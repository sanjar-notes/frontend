Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-07-09T04:15:34+05:30

====== 5. Data structures in JS ======
Created Thursday 09 July 2020

1. Array
* Syntax for arrays
{{{code: lang="js" linenumbers="True"
let list = [1,2,3,4]; // definition
}}}

* Mixed(heterogeneous) lists can cause performance issues. ''let mixed = [1, "one", 2, [3,4]];''
* Array functions:
	1. Accessing element - ''arr[0]''
	2. ''a.concat(b)'' //returns// a concatenated list. In place.
	3. ''a.sort()'' - sorts the in place array(just like python)
	4. ''a.concat().sort()'' - returns a sorted copy
	5. ''a.push(var1, var2)'' - append. It is a virial function.
	6. ''a.pop()'' - removes the last letter.
	7. ''a.splice(index, how_many, addvar1, addvar2)'' - used to insert and delete how_many elements from(incl) index. **IP**
		a. ''arr.splice(i, 0, x);'' // adds x as the ith index, all others pushed to the right
		b. ''arr.splice(i, 1);'' // removes the ith index terms, all others pushed to the left
	8. ''a.length'' - length of array
	9. ''b = a;'' does a deep copy of array ''a''
	10. arr.reverse() reverses the array **IP**
* Array can have empty values.
--------------------
2. Objects - They are a collection of attributes and values.
{{{code: lang="js" linenumbers="True"
var user = {
	name: "John",
	age:34,
	hobby: "Socccer",
	isMarried: false, // , does not matter
	shout: function(){ console.log('Ahhhhh');},	// method - a function inside an object
};

user.favoriteFood = "spinach"; // add a member to an object
user['favoriteFood'] = "spinach"; // same as above
}}}

* **null** - Represents the state of being empty, not equal to emptiness. i.e ''null!={}''
* Properties can be accessed by ''objectA.property_name'' or ''objectA[property_name]''.
* Objects are not index subscriptable.
--------------------
Membership:
* **''in''** can be used to check membership, for all iterables. Not for arrays.
* use myArray.includes(key) to check membership. Works with any data structure.
