Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-07-08T16:08:23+05:30

====== 3. Basic JavaScript ======
Created Wednesday 08 July 2020

**Comments**: same as C++, both multiline and single line.

=== Data types ===
* JavaScript is dynamically typed.
* There are two kinds of types in JS: primitives(non-objects) and ''object''.
* There are 7 "primitive" types:
1. ''number'' - No difference between int and float. ''NaN'' is a part of number.
2. ''bigint''
3. ''string'' - ' and " are equivalent. Concatenation is done using ''+''. Strings can be manipulated like numbers(and vice versa). e.g. '''2.3'*2 = 4.6''
4. ''boolean''(''true''/''false'')
5. ''Symbol''
6. ''undefined'' - not been assigned(garbage values are avoided this way)
7. ''null''

* Everything else is an ''object'', including functions, arrays etc.
* All primitives(except null and undefined) have an object equivalent.

Note:
	* An ''object'' in JS is simply a hashmap with key-value pairs. A key is always a ''string'', and a value can be anything including strings, integers, booleans, functions, other objects etc.
	* All primitives are immutable.

=== Variables ===
There are 3 kinds of variable declarations in JS:
* **let** - simple variable(scoping same as C++). Example ''let x = 2;''
* **const** - non reassignable variable(data structure is still mutable). Same as C++. Example ''const k = 32;''
* **var **- variable declaration(not initialization). Discouraged.
{{./pasted_image.png}}
Note: 
	a. Avoid using ''var'', except when working with old codebases.
	b. Uninitalized(undefined) variables store the value ''undefined''üòÅÔ∏è.
	c. Internally, //let, const //and// var, function, function*, class //are **all** [[https://stackoverflow.com/questions/31219420/are-variables-declared-with-let-or-const-hoisted/31222689#31222689|hoisted]]
	d. JavaScript has only two scopes - global(unique), local(changes).
	e. All inner scopes can read/write variables from outer scope. Just like C++.

=== ''var'' vs ''let'' ===
* The only difference is that var has a function scope, a more free scope. i.e it can leak out of top-level blocks, but not out of the function.
{{{code: lang="js" linenumbers="True"
if(true)
	var x = 2;
console.log(x); // prints 2, as x leaked out from the block

if(true)
	let x = 2; // x is a block scope, so it ends here. Just like C++
console.log(x); // Error x is undefined
}}}

* So ''var'' has only two anomalies(w.r.t C++):
	a. It leaks out of non-function blocks(conditionals, loops).
	b. It can be redeclared.

=== Hoisting(JS feature) ===
* A JavaScript interpreter performs many things behind the scene, and one of them is called hoisting.
* If you are not aware of this ‚Äúhidden‚Äù behavior, it can cause a lot of confusion. 
* The best way of thinking about the behavior of JavaScript variables is to always visualize them as consisting of two parts: a declaration and an assignment.

=== Standard IO ===
**Output** 
* ''console.log(variable)'' - just like ''print()'' in Python3(newlines, virial). Works for both CLI and browser.
* ''alert(variable)'', for the browser. Alert is blocking: you have to click OK or press the Enter key.
**Input**
* ''prompt('message', defaultAnswer)'' - same as ''input()'' in Python3. only for the browser.

=== Operators ===
**Semicolons** are required at end of a statement. It won't break the code, but recommended.

* Equality(string equivalent) - ''=='' and ''!=''
* Equality(of value and type) - ''==='' and ''!==''
* Relational operators same as C++'s

* Code blocks are {}, and consequently we need () for **for**, **while **etc  - Exactly the same as C++

=== Conditionals ===
* //if//, //else//, //else if//, //ternary operator(?:;)// - same as C++
* //switch - //same as// C++//
* JS does have a concept of truthy values.

=== Loops ===
* //for//, //while//, //do while - same as C++//
* //continue// and //break// mean the same as C++.

=== Functions ===
* No return/parameter type required.
* Keyword ''function'' is used - like ''def'' in Python3
* Name may be skipped for IIFE.
* Default params are allowed in JS, rules same as C++.
* Functions are always hoisted.
* **return** ends the function(obviously). Every function returns ''undefined'', if return is absent.
**Syntax**
1. Named function
{{{code: lang="js" linenumbers="True"
function foo(bar1, bar2)
{
	// code
}
}}}

2. Anonymous functions(lambda) - storing function in variables.
{{{code: lang="js" linenumbers="True"
let x = function(){ // function name not necessary
	return 2;
};	

x(); // calling
}}}

3. IIFE - short form of lambda. No storing required.
{{{code: lang="js" linenumbers="True"
( // prefix parenthesis is required here.
	function(bar)
	{ /* code */ }
)(); // calling parenthesis is out of function object
}}}
