Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-07-08T16:08:23+05:30

====== 3. Basic JavaScript ======
Created Wednesday 08 July 2020

**Comments**: same as C++, both multiline and inline.

=== Data types ===
* JavaScript is dynamically typed.
* There are 8 data types:
1. ''number'' - For both integers and floats.
2. ''bigint''
3. ''string'' - both kinds of quotes are OK, you can even use backticks. Concatenation using ''+''. Strings can be like numbers(and vice versa). e.g. '''2.3'*2 = 4.6''. [[./pasted_image001.png|Escape]] character same as C++. Strings can span multiple lines.
4. ''boolean''(''true''/''false'')
5. ''Symbol''
6. ''undefined'' - not been assigned(garbage values are avoided this way)
7. ''null''
8. ''object'' - everything except the primitives is an ''object'', including functions, arrays etc.

* non-''object'' types are called primitve data types.
* Everything is an ''object'', except primitives.
* All primitives have ''object'' versions.
* ''null'' and ''undefined'' are objects, not primitives.

Note:
* An ''object'' in JS is simply a hashmap with key-value pairs. A key is always a ''string'', and a value can be anything(primitives, functions, objects).
* All primitives are immutable.
* ''NaN'' - result of number • nonNumber. It is a number.
* ''Infinity'' - a ''number''.

=== String ===
* Single quotes and double quotes are equivalent.
* Concatenate using ''+''
* Escape char and rules same as Python, C++, Java.
* Numerical strings interact just like numbers, except concatenation. Like so:
{{{code: lang="js" linenumbers="True"
'2' * 3 		// number 6
'2' * '3.2' 		// number 6.4
'2' + '3' 		// string '23' - concatenation is concatenation
}}}


=== Variables ===
There are 3 kinds of variable declarations in JS:
* **let** - simple variable(i.e. reassignable). Example ''let x = 0;''
* **const** - non reassignable variable(mutable variables remain mutable). Must be declarized(declared and intialized). Same as C++'s ''const''. Example ''const k = 'stingy symbol table';''
* **var **- leaks out of block scope. Follows all other scoping rules. Syntax: ''var k = 'var wars';''
{{./pasted_image.png}}
Note:
	a. Declarations can be mixed, chained. i.e ''let x = 2, y = [1, 2], z = 3;'' is OK.
	b. Simply **avoid** using ''var'', except for old codebases.
	c. Internally, //var,// //let, const, function, class, function* //are **all** [[https://stackoverflow.com/questions/31219420/are-variables-declared-with-let-or-const-hoisted/31222689#31222689|hoisted]]. But only ''var'', ''function'' and ''function*'' are allocated memory for.
	d. Undefined(uninitiliazed) variables store the value ''undefined''😁️. Example: ''let x; console.log(x) // undefined''
	e. JavaScript has 4 scopes - local, enclosing, global, builtin. Same as python3.
	f. All inner scopes can read/write to variables of outer scope. Just like C++.

=== ''var'' vs ''let'' ===
* The only difference is that var has a function scope, a more free scope. i.e it can leak out of top-level blocks, but not out of the function.
{{{code: lang="js" linenumbers="True"
if(true)
	var x = 2;
console.log(x); // prints 2, as x leaked out from the block, just like python3

// Run separately
if(true)
	let x = 2; // x respects block scope, goes out of scope. Just like C++, Java
console.log(x); // Error x is undefined
}}}

* So ''var'' has only two anomalies(w.r.t C++):
	a. It violates block scope, i.e leaks out to the nearest enclosing function scope.
	b. It can be redeclared.
* ''var'' is identical to a python3 variable. Simple.💡️

=== Hoisting(JS feature) ===
* Hoisting - a JS feature where the intepreter moves all variable/function/class declarations to the top of the current scope (block or function).
* Only declarations are hoisted, not initializations.
* Gotchas about hoisting, there are 2:
	* **Intialization** - During hoisting, ''var''/''function''/''function*'' are intialized(to ''undefined'' or function body), but ''let''/''const''/''class'' are not.
	* **Temporal Dead Zone(''ReferenceError'')** - It refers to the //time//(//phase)// between the declaration and intialization, for a variable. This means that you cannot access ''let''/''const''/''class'' variables before their actual declaration statement(in code). You'll recieve a ''ReferenceError(variable not initalized)'' if try. **Note** that the dead zone correlates with sections of the code, but this is the effect, not the cause.
* Conclusion: Assume that people don't know about hoisitng. ''let'' and ''const'' were created for solving the problems with hoisting. Declare variables just like you would in C++, Python: nearest to first use.
[[./badCode.js|Bad code]]

=== Standard IO ===
**Output**
* ''console.log(variable)'' - just like ''print()'' in Python3(newlines, virial). Works for both CLI and browser.
* ''alert(variable)'', for the browser. Alert is blocking: you have to click OK or press the Enter key.
**Input**
* ''prompt('message', defaultAnswer)'' - same as ''input()'' in Python3. only for the browser.

=== Operators ===
* All operators are the same(symbol and rules) as C++(bitwise, relational, increment/decrement(post and pre)), with some changes:
	* Equality(string equivalent) - ''=='' and ''!=''
	* Equality(of value and type) - ''==='' and ''!==''
	* ''**'' does exponentiation of numbers.
	* ''>>>'' - makes the number unsigned after the shift.
* Shorthand operators are allowed.
* Assignment expressions are allowed.

=== Code indentation and statements ===
* **Semicolons** are required at end of a statement. It won't break the code, but recommended.
* JS if free-form - Code blocks are {}, and consequently we need () for **for**, **while **etc  - Just like C++.

=== Conditionals ===
* //if//, //else//, //else if//, //ternary operator(?:;)// - same as C++
* //switch - //same as// C++//
* JS does have a concept of truthy values.

=== Loops ===
* //for//, //while//, //do while - same as C++//
* //continue// and //break// mean the same as C++.

=== Functions ===
* No return/parameter type required.
* Keyword ''function'' is used - like ''def'' in Python3
* Name may be skipped for IIFE.
* Default params are allowed in JS, rules same as C++.
* Functions are always hoisted.
* **return** ends the function(obviously). Every function returns ''undefined'', if return is absent.
**Syntax**
1. Named function - just function.
{{{code: lang="js" linenumbers="True"
function foo(bar1, bar2)
{
	// code
}
}}}

2. Anonymous functions - unhoisted. Use case - as a functor, an [[https://developer.mozilla.org/en-US/docs/Glossary/IIFE|IIFE]]
{{{code: lang="js" linenumbers="True"
x.sort( function (a) { return Number(a); }) // functor as sorting criteria
// Don't call the functor, just specify it.


// IIFE - Immediately Invoked Function Expression
(
	function(bar) { /* code */ }(option1)
)(option2)
// You have two option, use (option1) or (option2) depending on the situation.
// Enclosing () are a must - They prevent namespace pollution
}}}

3. Lambda - passable anonymous functions. FIXME: can't have both.
{{{code: lang="js" linenumbers="True"
let x = function(){ // storing
	return 2;
};

x(); // calling
}}}

4. Inner functions - have their own content(scope). Not invocable outside parent function. Chain as many as you like.
{{{code: lang="js" linenumbers="True"
function f()
{
	function g() {	/*code*/ }
	g() // invocation - OK
	
	function k() { /* code */ } // so called 'sibling' function
}

g()// Error - g not defined
}}}
