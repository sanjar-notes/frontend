{
  "paths": [
    {
      "type": "file",
      "value": "README.md"
    },
    {
      "type": "dir",
      "name": "home",
      "children": [
        {
          "type": "file",
          "value": "home/1_motivation.md"
        },
        {
          "type": "file",
          "value": "home/2_resources.md"
        },
        {
          "type": "file",
          "value": "home/3_roadmap.md"
        },
        {
          "type": "dir",
          "name": "4_resource_itineraries",
          "children": [
            {
              "type": "file",
              "value": "home/4_resource_itineraries/1_Complete_Web_Developer_2020.md"
            },
            {
              "type": "file",
              "value": "home/4_resource_itineraries/2_freeCodeCamp.md"
            },
            {
              "type": "dir",
              "name": "3_JavaScript_Understanding_the_weird_parts",
              "children": [
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/0_Source Link.md"
                },
                {
                  "type": "dir",
                  "name": "1_Getting_Started",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/1_Getting_Started/1_Introduction_and_Goal_of_the_course.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/1_Getting_Started/2_Setup.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/1_Getting_Started/6_Understanding_and_frameworks.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "2_Execution_Contexts_and_Lexical_Environments",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/10_The_Global_environment_and_the_global_variable.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/11_Two_phase_interpretation,_hoisting.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/12_undefined_is_special.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/14_js_is_single_threaded_and_synchronous.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/17_The_scope_chain.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/19_Asynchronous_callbacks.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/7_First_3_big_word_alerts.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/8_Name_value_pairs_and_objects.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "3_Types_and_operators",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/3_Types_and_operators/21_Primitive_types.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/3_Types_and_operators/26_Comparison_operators.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/3_Types_and_operators/29_Logic_ops_and_value_evaluation.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/3_Types_and_operators/30_Multi-file_collisions.md"
                    }
                  ]
                }
              ]
            },
            {
              "type": "dir",
              "name": "4_FrontendMentor_challenges",
              "children": [
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/4_FrontendMentor_challenges/1_intro_section_with_nav_dropdown.md"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "value": "home/5_projects.md"
        },
        {
          "type": "file",
          "value": "home/6_setup.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "tooling",
      "children": [
        {
          "type": "file",
          "value": "tooling/README.md"
        },
        {
          "type": "dir",
          "name": "obsidian-templates",
          "children": [
            {
              "type": "file",
              "value": "tooling/obsidian-templates/README.md"
            },
            {
              "type": "dir",
              "name": "templater",
              "children": [
                {
                  "type": "file",
                  "value": "tooling/obsidian-templates/templater/timestamp.md"
                },
                {
                  "type": "file",
                  "value": "tooling/obsidian-templates/templater/title_and_date.md"
                },
                {
                  "type": "file",
                  "value": "tooling/obsidian-templates/templater/w2h.md"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "dir",
      "name": "vault",
      "children": [
        {
          "type": "dir",
          "name": "0_Basics_of_the_Web",
          "children": [
            {
              "type": "file",
              "value": "vault/0_Basics_of_the_Web/1_Browsing_the_web.md"
            },
            {
              "type": "dir",
              "name": "2_Dev_Tool",
              "children": [
                {
                  "type": "file",
                  "value": "vault/0_Basics_of_the_Web/2_Dev_Tool/0_index.md"
                },
                {
                  "type": "file",
                  "value": "vault/0_Basics_of_the_Web/2_Dev_Tool/1_DevTool_advanced.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "vault/0_Basics_of_the_Web/3_How_browsers_work.md"
            },
            {
              "type": "file",
              "value": "vault/0_Basics_of_the_Web/4_First_website_visit_details.md"
            },
            {
              "type": "file",
              "value": "vault/0_Basics_of_the_Web/4_Rendering_Performance_basics.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "1_HTML",
          "children": [
            {
              "type": "file",
              "value": "vault/1_HTML/0_index.md"
            },
            {
              "type": "file",
              "value": "vault/1_HTML/1_What_are_tags.md"
            },
            {
              "type": "dir",
              "name": "2_Common_tags",
              "children": [
                {
                  "type": "file",
                  "value": "vault/1_HTML/2_Common_tags/1_Writing_stuff.md"
                },
                {
                  "type": "file",
                  "value": "vault/1_HTML/2_Common_tags/2_Anchor_tag.md"
                },
                {
                  "type": "file",
                  "value": "vault/1_HTML/2_Common_tags/3_Lists.md"
                },
                {
                  "type": "file",
                  "value": "vault/1_HTML/2_Common_tags/4_Multimedia_tags.md"
                },
                {
                  "type": "file",
                  "value": "vault/1_HTML/2_Common_tags/5_Table.md"
                },
                {
                  "type": "file",
                  "value": "vault/1_HTML/2_Common_tags/6_Meta_tags.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "vault/1_HTML/3_Containers.md"
            },
            {
              "type": "file",
              "value": "vault/1_HTML/4_Forms.md"
            },
            {
              "type": "file",
              "value": "vault/1_HTML/5_Semantic_tags_-_Page_Sections.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "2_CSS",
          "children": [
            {
              "type": "file",
              "value": "vault/2_CSS/0_index.md"
            },
            {
              "type": "dir",
              "name": "1_CSS_Basics",
              "children": [
                {
                  "type": "file",
                  "value": "vault/2_CSS/1_CSS_Basics/0_index.md"
                },
                {
                  "type": "file",
                  "value": "vault/2_CSS/1_CSS_Basics/1_Types_of_CSS.md"
                },
                {
                  "type": "file",
                  "value": "vault/2_CSS/1_CSS_Basics/2_CSS_Selectors.md"
                },
                {
                  "type": "file",
                  "value": "vault/2_CSS/1_CSS_Basics/3_Order_and_Inheritance_in_CSS.md"
                },
                {
                  "type": "file",
                  "value": "vault/2_CSS/1_CSS_Basics/4_Critical_Render_Path.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "2_Commonly_used_properties_-_IGN",
              "children": [
                {
                  "type": "file",
                  "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/0_Miscellaneous.md"
                },
                {
                  "type": "dir",
                  "name": "1_Data_based",
                  "children": [
                    {
                      "type": "file",
                      "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/1_Size.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/2_Colors.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/3_background-image.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/4_Fonts.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/5_Text_Formatting.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/6_Icons.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/7_Links.md"
                    }
                  ]
                },
                {
                  "type": "file",
                  "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/4_List_styles.md"
                },
                {
                  "type": "file",
                  "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/5_CSS_tables.md"
                },
                {
                  "type": "dir",
                  "name": "6_CSS_extras_-_IGN",
                  "children": [
                    {
                      "type": "file",
                      "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/0_index.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/1_Media_queries.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/2_auto_keyword.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/3_Avoid_pixelation.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/4_Viewport_sizes.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/5_CSS_variables.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/6_CSS_calc_function.md"
                    }
                  ]
                }
              ]
            },
            {
              "type": "dir",
              "name": "3_Box_Model",
              "children": [
                {
                  "type": "file",
                  "value": "vault/2_CSS/3_Box_Model/0_index.md"
                },
                {
                  "type": "file",
                  "value": "vault/2_CSS/3_Box_Model/1_Box_model.md"
                },
                {
                  "type": "file",
                  "value": "vault/2_CSS/3_Box_Model/2_margin_and_padding.md"
                },
                {
                  "type": "file",
                  "value": "vault/2_CSS/3_Box_Model/3_border.md"
                },
                {
                  "type": "file",
                  "value": "vault/2_CSS/3_Box_Model/4_height_and_width.md"
                },
                {
                  "type": "file",
                  "value": "vault/2_CSS/3_Box_Model/5_outline.md"
                },
                {
                  "type": "file",
                  "value": "vault/2_CSS/3_Box_Model/6_display_and_visibility.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "4_Layouts_-_flex,_grid",
              "children": [
                {
                  "type": "file",
                  "value": "vault/2_CSS/4_Layouts_-_flex,_grid/0_index.md"
                },
                {
                  "type": "dir",
                  "name": "1_Flexbox_-_1D",
                  "children": [
                    {
                      "type": "file",
                      "value": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/0_flex_syntax.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/0_index.md"
                    },
                    {
                      "type": "dir",
                      "name": "1_Container",
                      "children": [
                        {
                          "type": "file",
                          "value": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/1_Container/1_main_axis.md"
                        },
                        {
                          "type": "file",
                          "value": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/1_Container/2_cross_axis.md"
                        },
                        {
                          "type": "file",
                          "value": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/1_Container/3_Wrapping.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "2_Items",
                      "children": [
                        {
                          "type": "file",
                          "value": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/1_flex-shrink.md"
                        },
                        {
                          "type": "file",
                          "value": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/2_flex-grow.md"
                        },
                        {
                          "type": "file",
                          "value": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/3_flex-basis.md"
                        },
                        {
                          "type": "file",
                          "value": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/4_order.md"
                        },
                        {
                          "type": "file",
                          "value": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/5_align_self.md"
                        },
                        {
                          "type": "file",
                          "value": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/6_All_in_one_flex_property.md"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "2_Grid_-_2D",
                  "children": [
                    {
                      "type": "file",
                      "value": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/0_index.md"
                    },
                    {
                      "type": "dir",
                      "name": "1_Container",
                      "children": [
                        {
                          "type": "file",
                          "value": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/1_Container/1_grid-template.md"
                        },
                        {
                          "type": "file",
                          "value": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/1_Container/3_row_and_column_gap.md"
                        },
                        {
                          "type": "file",
                          "value": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/1_Container/4_Justifying_and_aligning_items.md"
                        },
                        {
                          "type": "file",
                          "value": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/1_Container/5_Naming_items.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "2_Items",
                      "children": [
                        {
                          "type": "file",
                          "value": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/2_Items/0_index.md"
                        },
                        {
                          "type": "file",
                          "value": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/2_Items/1_Space_occupied.md"
                        },
                        {
                          "type": "file",
                          "value": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/2_Items/2_grid_item_position.md"
                        }
                      ]
                    },
                    {
                      "type": "file",
                      "value": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/3_Flex_vs_Grid.md"
                    }
                  ]
                },
                {
                  "type": "file",
                  "value": "vault/2_CSS/4_Layouts_-_flex,_grid/3_Floats.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "vault/2_CSS/5_Positioning.md"
            },
            {
              "type": "file",
              "value": "vault/2_CSS/6_Transition_and_Animations.md"
            },
            {
              "type": "file",
              "value": "vault/2_CSS/7_Media_queries.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "3_JavaScript",
          "children": [
            {
              "type": "file",
              "value": "vault/3_JavaScript/0_index.md"
            },
            {
              "type": "dir",
              "name": "1_JS_Basics",
              "children": [
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/1_JS_Basics/0_index.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/1_JS_Basics/1_JS_Setup.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/1_JS_Basics/2_What_is_JavaScript.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/1_JS_Basics/3_Basic_JavaScript.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/1_JS_Basics/4_Using_JS.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/1_JS_Basics/5_Basic_Data_Structures.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "2_DOM_Manipulation",
              "children": [
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/2_DOM_Manipulation/0_index.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/2_DOM_Manipulation/1_DOM_and_JS_Engine.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/2_DOM_Manipulation/2_DOM_Selectors.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/2_DOM_Manipulation/3_DOM_events.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/2_DOM_Manipulation/4_Creating_new_HTML_elements.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/2_DOM_Manipulation/6_jQuery_-_trivia.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/2_DOM_Manipulation/7_Developer_Fundamental_5.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "3_Advanced_JS",
              "children": [
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/3_Advanced_JS/0_index.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/3_Advanced_JS/10_How_Does_JS_works.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/3_Advanced_JS/11_Modules_in_JS.md"
                },
                {
                  "type": "dir",
                  "name": "12_Asynchronous_JavaScript",
                  "children": [
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/0_index.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/1_Event_loop.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/2_Callbacks.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/3_Promises.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/4_Async_await.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/5_Comparing_async_coding_constructs.md"
                    }
                  ]
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/3_Advanced_JS/13_Exception_handling.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/3_Advanced_JS/1_Scope.md"
                },
                {
                  "type": "dir",
                  "name": "2_ES5_and_ES6",
                  "children": [
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/2_ES5_and_ES6/0_index.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/2_ES5_and_ES6/A_Necessities.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/2_ES5_and_ES6/B_Shorthands_and_object_features.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/2_ES5_and_ES6/C_JS_exclusive_features.md"
                    }
                  ]
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/3_Advanced_JS/3_Advanced_Loops.md"
                },
                {
                  "type": "dir",
                  "name": "4_Advanced_Arrays",
                  "children": [
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/4_Advanced_Arrays/1_spread_and_rest_operators.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/4_Advanced_Arrays/2_Map,_filter_and_reduce.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/4_Advanced_Arrays/3_some_and_every.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "5_Advanced_Functions",
                  "children": [
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/5_Advanced_Functions/1_Pure_functions.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/5_Advanced_Functions/2_Closures.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/5_Advanced_Functions/3_Currying.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/5_Advanced_Functions/4_Function_composition.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "6_Advanced_Objects",
                  "children": [
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/6_Advanced_Objects/1_How_variables_work.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/6_Advanced_Objects/2_Scope_context.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/6_Advanced_Objects/3_Classes_and_objects.md"
                    },
                    {
                      "type": "file",
                      "value": "vault/3_JavaScript/3_Advanced_JS/6_Advanced_Objects/4_Inheritance.md"
                    }
                  ]
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/3_Advanced_JS/7_ES7.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/3_Advanced_JS/8_ES8.md"
                },
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/3_Advanced_JS/9_Debugging.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "4_Extra_JS",
              "children": [
                {
                  "type": "file",
                  "value": "vault/3_JavaScript/4_Extra_JS/1_Intl_API.md"
                }
              ]
            }
          ]
        },
        {
          "type": "dir",
          "name": "4_Website_Design",
          "children": [
            {
              "type": "file",
              "value": "vault/4_Website_Design/1_Accessibility.md"
            },
            {
              "type": "file",
              "value": "vault/4_Website_Design/2_Folder_structure.md"
            }
          ]
        },
        {
          "type": "file",
          "value": "vault/notebook.md"
        }
      ]
    }
  ],
  "contents": [
    {
      "path": "README.md",
      "url": "README.html",
      "content": "# web_dev_fundamentals\nIt's markdown, clone or just skim it on [Github](https://github.com/sanjar-notes/web_dev_fundamentals).\n\n[Start here](https://github.com/sanjar-notes/web_dev_fundamentals/tree/77827735603c754e7526e27bdc8b29a45934a86b/vault/) - [HTML](https://github.com/sanjar-notes/web_dev_fundamentals/tree/77827735603c754e7526e27bdc8b29a45934a86b/vault/1_HTML), [CSS](https://github.com/sanjar-notes/web_dev_fundamentals/tree/77827735603c754e7526e27bdc8b29a45934a86b/vault/2_CSS), [JS](https://github.com/sanjar-notes/web_dev_fundamentals/tree/77827735603c754e7526e27bdc8b29a45934a86b/vault/3_JavaScript)\n",
      "html": "<h1 id=\"web_dev_fundamentals\">web_dev_fundamentals <a class=\"heading-anchor-permalink\" href=\"#web_dev_fundamentals\">#</a></h1>\n<p>It’s markdown, clone or just skim it on <a href=\"https://github.com/sanjar-notes/web_dev_fundamentals\">Github</a>.</p>\n<p><a href=\"https://github.com/sanjar-notes/web_dev_fundamentals/tree/77827735603c754e7526e27bdc8b29a45934a86b/vault/\">Start here</a> - <a href=\"https://github.com/sanjar-notes/web_dev_fundamentals/tree/77827735603c754e7526e27bdc8b29a45934a86b/vault/1_HTML\">HTML</a>, <a href=\"https://github.com/sanjar-notes/web_dev_fundamentals/tree/77827735603c754e7526e27bdc8b29a45934a86b/vault/2_CSS\">CSS</a>, <a href=\"https://github.com/sanjar-notes/web_dev_fundamentals/tree/77827735603c754e7526e27bdc8b29a45934a86b/vault/3_JavaScript\">JS</a></p>\n",
      "id": 0
    },
    {
      "path": "home/1_motivation.md",
      "url": "home/1_motivation.html",
      "content": "# 1. Motivation\nCreated Wednesday 08 July 2020\n\nThe goal is to learn basic client side web fundamentals. This has 3 parts:\n1. HTML\n2. CSS\n3. JavaScript\n\nNo frameworks are used here, generally.",
      "html": "<h1 id=\"1.-motivation\">1. Motivation <a class=\"heading-anchor-permalink\" href=\"#1.-motivation\">#</a></h1>\n<p>Created Wednesday 08 July 2020</p>\n<p>The goal is to learn basic client side web fundamentals. This has 3 parts:</p>\n<ol>\n<li>HTML</li>\n<li>CSS</li>\n<li>JavaScript</li>\n</ol>\n<p>No frameworks are used here, generally.</p>\n",
      "id": 1
    },
    {
      "path": "home/2_resources.md",
      "url": "home/2_resources.html",
      "content": "# Resources\nCreated Saturday 20 March 2021\n\n#### Front End\n1. [Website Performance Optimization](https://www.udacity.com/course/website-performance-optimization--ud884)\n2. [Browser Rendering Optimization](https://www.udacity.com/course/browser-rendering-optimization--ud860)\n",
      "html": "<h1 id=\"resources\">Resources <a class=\"heading-anchor-permalink\" href=\"#resources\">#</a></h1>\n<p>Created Saturday 20 March 2021</p>\n<h4 id=\"front-end\">Front End <a class=\"heading-anchor-permalink\" href=\"#front-end\">#</a></h4>\n<ol>\n<li><a href=\"https://www.udacity.com/course/website-performance-optimization--ud884\">Website Performance Optimization</a></li>\n<li><a href=\"https://www.udacity.com/course/browser-rendering-optimization--ud860\">Browser Rendering Optimization</a></li>\n</ol>\n",
      "id": 2
    },
    {
      "path": "home/3_roadmap.md",
      "url": "home/3_roadmap.html",
      "content": "# 4. Roadmap\nCreated Friday 25 December 2020\n\n<details> <summary>Arnav's Course</summary>\n\nFull stack\nFront End - embrace it, good eye for Design\nBack End - Dev Ops\n\n# 1st Pass\n## Front End\n\n- runs inside a browser(HTML, CSS, JS - only these but very important)(MDN web docs), w3schools(used for basics),\n- (2 weeks) CSS - Box model, [tranforms, transitions, animations], layout[flexbox, grid, @media],\n- JS - (2 weeks) data types, equality, DOM ops, events, timeout, submit, split splice join, event loop(Philip Roberts, Carbon Five)\n- Learn Fundas of both Front and back, then do the intermediate things in both, then do advanced in Both, Then libraries\n\n- Front end and backend cannot be done in isloation\n\n## Back End\n- documentation is nodejs is nodejs.org\n- (1 week) nodejs - runtime for javascript based on V8, without the browser. This is faster than Python, around 10x\n- It was so fast that it became fit for desktop apps, even embedded apps\n- Maybe comparable to Java. Once a lang is fast, it is also used for making servers\n- Nodejs vs JS --> window, document is not available. process and global is available on desktop.\n- npm - very easy and useful tool\n- modules\n- how _require_ works\n- Native API: fs, events, os, http\n  (End of one week)\n- freeCodeCamp is a good resource\n\n- OSI model\n- HTTP methods\n- Fundamental of server-client - theoretical\n\n## Servers with Node JS(3 weeks)\n- How are REST APIs made - using Express.js, used to make servers\n  - Routes\n  - Middlewares\n  - templates - Hbs(handle bars), Ejs, SSR(Server Side Rendering)\n- DB\n  _ SQL vs NoSQL, which to use and when to use it.\n  _ CAP Theorem, PACELC theorem\n  _ MySQL or Postgres - SQL\n  _ NoSQL - MongoDB, CassandraDB\n  _ SQL commands - trickery\n  _ query, $sort in mongoDB\n  Ready to make CRUD websites\n\n# 2nd Pass\n## Front End(2 weeks)\n\n- CSS libaries - Bootstrap, Materialize - professional sites\n- jQuery - Very good tool, not used to create big tools\n- axios - js library, https requests asynchronously\n\n## Back End\n(Start of 2 weeks)\n\n- static or public HTML\n- HBS+data -> SSR\n- form submissions\n- POST request body -> URL encoded, JSON\n  (End of two weeks)\n  (Start of 2 weeks)\n- Sessions - log in state, need to understand how these works\n  - Cookies\n  - Tokens\n  - localStorage\n  - session storage used on front end\n- Authentication vs Authorization\n- OAuth2.0 - helps and used at FaceBook, Twitter and Google\n  (End of two weeks)\n\n## Make project(any one - 1 week)\n    Blogging site - comments\n    Social media\n\n## (1 week) Realtime apps - WebSocket(change without req-res) - learn - from socket.io.\n- (1 week) make Collab IDE, Shared Whiteboard\n\n## Good to know - browser API\n- Canvas -> 2D games\n- Browser APIs - GPS, A/V\n\n# 3rd pass\n## Testing\n\n### FE\n- Jasmine, JEST, Karma(automated test)\n- UI TEst - phantomJS(screenshot tests), puppeteer(headless testing), protractor\n- FE - Frameworks - React, Vue, Ember, Angular - Components, Routing, State Management(Just these three)\n\n### BE - testing\n- Mocha + Chai\n- NYC - code coverage(runs tests when code is updated), testing is very, very important.\n\n### Deployment and DevOps\n- handle, nginx configs\n- handle, Apache configs\n- Well versed with Linux - like firewalls, not basic stupid stuff\n- Setup database - Mongo, MySQL, postgres\n\n### Containerization\n- Docker - Modularization of OS and dependencies, programmatically managing resources(software)\n- Kubernetes(K8S) - Orchestrization framework\n- Chef, ansible\n\n## DevOps Services - Free/Paid\n- Serverless - AWS lambda\n- IaaS - Machine is given(configure yourself) - Google Compute Engine, AWS EC2, DigitalOcean\n- PaaS - Worry only about the code - Heroku, Google App Engine, AWL LightSail\n- BaaS - (backend existing, push notifications) Firebase\n- Static Web Hosting - GitHuib pages, Netlify, versel(now.sh)\n- Automation - Travis CI/ Github actions\n\n# Deployment to DevOps is a part of SRE(Site Reliability Engineer) - bare minimum\n\n---\n\nMAD as a web developer without Android, Flutter\n\n- Web App wrappers(PWA)\n- Ionic --> Hybrid Apps\n- React Native\n\n---\n\nDesktop Apps\n\n- Electron.js - Spotify, Slack, VSCode\n\nIoT and Electronics\n\n- johhnyify, p0\n\n---\n\nHis story\nLearn from hackathons\nMaybe not in a fundamental way, but it is important\nhttps://online.codingblocks.com/courses/web-development-online-course\n\nArnav suggests looking at free content first. MDN, CSSTricks, there should be returns\nSRE/FullStack are highest paid - Flock, RazorPay, Zeta, UrbanClap, Zomato, Swiggy, Flipkart, HotStar, DoubtNut\nFAANG have stock(which is great)\n\n---\n\nAdditional langs\n\n- TS\n- SASS or LESS\n- YDKJS\n- cb.lk/yt/jsadv ot/jsbasics\n\n---\n\nCodeWithHarry\n\n- Learn 80% HTML, 60% CSS and 50% JS(avoid promises, callbacks)\n- Learn PHP to get concepts, then use JS/Ruby/Python3\n- Don't use frameworks, website builders(like WiX), 3rd part libraries\n- Design and Web Dev are independent. Take inspiration from websites\n- HTMLCheatSheet.com\n- CodePen.io - learn things\n\n# Resources\n- UX wing(https://uxwing.com/) for Icons\n- PixaBay(https://pixabay.com/) for free Images\n- FreeHTML5(https://freehtml5.co/) for free templates\n- UnSplash(https://unsplash.com/) for Image API\n- Json Placeholder(https://jsonplaceholder.typicode.com/) for fake Online REST API\n- More resources are available on this GitHub Repository(https://github.com/bradtraversy/design-resources-for-developers)\n\n# This is great\n* Python vs Node is not important\n---\n</details>\n\n- https://roadmap.sh/frontend\n- https://roadmap.sh/backend\n",
      "html": "<h1 id=\"4.-roadmap\">4. Roadmap <a class=\"heading-anchor-permalink\" href=\"#4.-roadmap\">#</a></h1>\n<p>Created Friday 25 December 2020</p>\n<details> <summary>Arnav's Course</summary>\n<p>Full stack\nFront End - embrace it, good eye for Design\nBack End - Dev Ops</p>\n<h1 id=\"1st-pass\">1st Pass <a class=\"heading-anchor-permalink\" href=\"#1st-pass\">#</a></h1>\n<h2 id=\"front-end\">Front End <a class=\"heading-anchor-permalink\" href=\"#front-end\">#</a></h2>\n<ul>\n<li>\n<p>runs inside a browser(HTML, CSS, JS - only these but very important)(MDN web docs), w3schools(used for basics),</p>\n</li>\n<li>\n<p>(2 weeks) CSS - Box model, [tranforms, transitions, animations], layout[flexbox, grid, @media],</p>\n</li>\n<li>\n<p>JS - (2 weeks) data types, equality, DOM ops, events, timeout, submit, split splice join, event loop(Philip Roberts, Carbon Five)</p>\n</li>\n<li>\n<p>Learn Fundas of both Front and back, then do the intermediate things in both, then do advanced in Both, Then libraries</p>\n</li>\n<li>\n<p>Front end and backend cannot be done in isloation</p>\n</li>\n</ul>\n<h2 id=\"back-end\">Back End <a class=\"heading-anchor-permalink\" href=\"#back-end\">#</a></h2>\n<ul>\n<li>\n<p>documentation is nodejs is <a href=\"http://nodejs.org\">nodejs.org</a></p>\n</li>\n<li>\n<p>(1 week) nodejs - runtime for javascript based on V8, without the browser. This is faster than Python, around 10x</p>\n</li>\n<li>\n<p>It was so fast that it became fit for desktop apps, even embedded apps</p>\n</li>\n<li>\n<p>Maybe comparable to Java. Once a lang is fast, it is also used for making servers</p>\n</li>\n<li>\n<p>Nodejs vs JS --&gt; window, document is not available. process and global is available on desktop.</p>\n</li>\n<li>\n<p>npm - very easy and useful tool</p>\n</li>\n<li>\n<p>modules</p>\n</li>\n<li>\n<p>how <em>require</em> works</p>\n</li>\n<li>\n<p>Native API: fs, events, os, http\n(End of one week)</p>\n</li>\n<li>\n<p>freeCodeCamp is a good resource</p>\n</li>\n<li>\n<p>OSI model</p>\n</li>\n<li>\n<p>HTTP methods</p>\n</li>\n<li>\n<p>Fundamental of server-client - theoretical</p>\n</li>\n</ul>\n<h2 id=\"servers-with-node-js(3-weeks)\">Servers with Node JS(3 weeks) <a class=\"heading-anchor-permalink\" href=\"#servers-with-node-js(3-weeks)\">#</a></h2>\n<ul>\n<li>How are REST APIs made - using Express.js, used to make servers\n<ul>\n<li>Routes</li>\n<li>Middlewares</li>\n<li>templates - Hbs(handle bars), Ejs, SSR(Server Side Rendering)</li>\n</ul>\n</li>\n<li>DB\n_ SQL vs NoSQL, which to use and when to use it.\n_ CAP Theorem, PACELC theorem\n_ MySQL or Postgres - SQL\n_ NoSQL - MongoDB, CassandraDB\n_ SQL commands - trickery\n_ query, $sort in mongoDB\nReady to make CRUD websites</li>\n</ul>\n<h1 id=\"2nd-pass\">2nd Pass <a class=\"heading-anchor-permalink\" href=\"#2nd-pass\">#</a></h1>\n<h2 id=\"front-end(2-weeks)\">Front End(2 weeks) <a class=\"heading-anchor-permalink\" href=\"#front-end(2-weeks)\">#</a></h2>\n<ul>\n<li>CSS libaries - Bootstrap, Materialize - professional sites</li>\n<li>jQuery - Very good tool, not used to create big tools</li>\n<li>axios - js library, https requests asynchronously</li>\n</ul>\n<h2 id=\"back-end-2\">Back End <a class=\"heading-anchor-permalink\" href=\"#back-end-2\">#</a></h2>\n<p>(Start of 2 weeks)</p>\n<ul>\n<li>static or public HTML</li>\n<li>HBS+data -&gt; SSR</li>\n<li>form submissions</li>\n<li>POST request body -&gt; URL encoded, JSON\n(End of two weeks)\n(Start of 2 weeks)</li>\n<li>Sessions - log in state, need to understand how these works\n<ul>\n<li>Cookies</li>\n<li>Tokens</li>\n<li>localStorage</li>\n<li>session storage used on front end</li>\n</ul>\n</li>\n<li>Authentication vs Authorization</li>\n<li>OAuth2.0 - helps and used at FaceBook, Twitter and Google\n(End of two weeks)</li>\n</ul>\n<h2 id=\"make-project(any-one---1-week)\">Make project(any one - 1 week) <a class=\"heading-anchor-permalink\" href=\"#make-project(any-one---1-week)\">#</a></h2>\n<pre><code>Blogging site - comments\nSocial media\n</code></pre>\n<h2 id=\"(1-week)-realtime-apps---websocket(change-without-req-res)---learn---from-socket.io.\">(1 week) Realtime apps - WebSocket(change without req-res) - learn - from <a href=\"http://socket.io\">socket.io</a>. <a class=\"heading-anchor-permalink\" href=\"#(1-week)-realtime-apps---websocket(change-without-req-res)---learn---from-socket.io.\">#</a></h2>\n<ul>\n<li>(1 week) make Collab IDE, Shared Whiteboard</li>\n</ul>\n<h2 id=\"good-to-know---browser-api\">Good to know - browser API <a class=\"heading-anchor-permalink\" href=\"#good-to-know---browser-api\">#</a></h2>\n<ul>\n<li>Canvas -&gt; 2D games</li>\n<li>Browser APIs - GPS, A/V</li>\n</ul>\n<h1 id=\"3rd-pass\">3rd pass <a class=\"heading-anchor-permalink\" href=\"#3rd-pass\">#</a></h1>\n<h2 id=\"testing\">Testing <a class=\"heading-anchor-permalink\" href=\"#testing\">#</a></h2>\n<h3 id=\"fe\">FE <a class=\"heading-anchor-permalink\" href=\"#fe\">#</a></h3>\n<ul>\n<li>Jasmine, JEST, Karma(automated test)</li>\n<li>UI TEst - phantomJS(screenshot tests), puppeteer(headless testing), protractor</li>\n<li>FE - Frameworks - React, Vue, Ember, Angular - Components, Routing, State Management(Just these three)</li>\n</ul>\n<h3 id=\"be---testing\">BE - testing <a class=\"heading-anchor-permalink\" href=\"#be---testing\">#</a></h3>\n<ul>\n<li>Mocha + Chai</li>\n<li>NYC - code coverage(runs tests when code is updated), testing is very, very important.</li>\n</ul>\n<h3 id=\"deployment-and-devops\">Deployment and DevOps <a class=\"heading-anchor-permalink\" href=\"#deployment-and-devops\">#</a></h3>\n<ul>\n<li>handle, nginx configs</li>\n<li>handle, Apache configs</li>\n<li>Well versed with Linux - like firewalls, not basic stupid stuff</li>\n<li>Setup database - Mongo, MySQL, postgres</li>\n</ul>\n<h3 id=\"containerization\">Containerization <a class=\"heading-anchor-permalink\" href=\"#containerization\">#</a></h3>\n<ul>\n<li>Docker - Modularization of OS and dependencies, programmatically managing resources(software)</li>\n<li>Kubernetes(K8S) - Orchestrization framework</li>\n<li>Chef, ansible</li>\n</ul>\n<h2 id=\"devops-services---free%2Fpaid\">DevOps Services - Free/Paid <a class=\"heading-anchor-permalink\" href=\"#devops-services---free%2Fpaid\">#</a></h2>\n<ul>\n<li>Serverless - AWS lambda</li>\n<li>IaaS - Machine is given(configure yourself) - Google Compute Engine, AWS EC2, DigitalOcean</li>\n<li>PaaS - Worry only about the code - Heroku, Google App Engine, AWL LightSail</li>\n<li>BaaS - (backend existing, push notifications) Firebase</li>\n<li>Static Web Hosting - GitHuib pages, Netlify, versel(<a href=\"http://now.sh\">now.sh</a>)</li>\n<li>Automation - Travis CI/ Github actions</li>\n</ul>\n<h1 id=\"deployment-to-devops-is-a-part-of-sre(site-reliability-engineer)---bare-minimum\">Deployment to DevOps is a part of SRE(Site Reliability Engineer) - bare minimum <a class=\"heading-anchor-permalink\" href=\"#deployment-to-devops-is-a-part-of-sre(site-reliability-engineer)---bare-minimum\">#</a></h1>\n<hr>\n<p>MAD as a web developer without Android, Flutter</p>\n<ul>\n<li>Web App wrappers(PWA)</li>\n<li>Ionic --&gt; Hybrid Apps</li>\n<li>React Native</li>\n</ul>\n<hr>\n<p>Desktop Apps</p>\n<ul>\n<li>Electron.js - Spotify, Slack, VSCode</li>\n</ul>\n<p>IoT and Electronics</p>\n<ul>\n<li>johhnyify, p0</li>\n</ul>\n<hr>\n<p>His story\nLearn from hackathons\nMaybe not in a fundamental way, but it is important\n<a href=\"https://online.codingblocks.com/courses/web-development-online-course\">https://online.codingblocks.com/courses/web-development-online-course</a></p>\n<p>Arnav suggests looking at free content first. MDN, CSSTricks, there should be returns\nSRE/FullStack are highest paid - Flock, RazorPay, Zeta, UrbanClap, Zomato, Swiggy, Flipkart, HotStar, DoubtNut\nFAANG have stock(which is great)</p>\n<hr>\n<p>Additional langs</p>\n<ul>\n<li>TS</li>\n<li>SASS or LESS</li>\n<li>YDKJS</li>\n<li><a href=\"http://cb.lk/yt/jsadv\">cb.lk/yt/jsadv</a> ot/jsbasics</li>\n</ul>\n<hr>\n<p>CodeWithHarry</p>\n<ul>\n<li>Learn 80% HTML, 60% CSS and 50% JS(avoid promises, callbacks)</li>\n<li>Learn PHP to get concepts, then use JS/Ruby/Python3</li>\n<li>Don’t use frameworks, website builders(like WiX), 3rd part libraries</li>\n<li>Design and Web Dev are independent. Take inspiration from websites</li>\n<li><a href=\"http://HTMLCheatSheet.com\">HTMLCheatSheet.com</a></li>\n<li><a href=\"http://CodePen.io\">CodePen.io</a> - learn things</li>\n</ul>\n<h1 id=\"resources\">Resources <a class=\"heading-anchor-permalink\" href=\"#resources\">#</a></h1>\n<ul>\n<li>UX wing(<a href=\"https://uxwing.com/\">https://uxwing.com/</a>) for Icons</li>\n<li>PixaBay(<a href=\"https://pixabay.com/\">https://pixabay.com/</a>) for free Images</li>\n<li>FreeHTML5(<a href=\"https://freehtml5.co/\">https://freehtml5.co/</a>) for free templates</li>\n<li>UnSplash(<a href=\"https://unsplash.com/\">https://unsplash.com/</a>) for Image API</li>\n<li>Json Placeholder(<a href=\"https://jsonplaceholder.typicode.com/\">https://jsonplaceholder.typicode.com/</a>) for fake Online REST API</li>\n<li>More resources are available on this GitHub Repository(<a href=\"https://github.com/bradtraversy/design-resources-for-developers\">https://github.com/bradtraversy/design-resources-for-developers</a>)</li>\n</ul>\n<h1 id=\"this-is-great\">This is great <a class=\"heading-anchor-permalink\" href=\"#this-is-great\">#</a></h1>\n<ul>\n<li>Python vs Node is not important</li>\n</ul>\n<hr>\n</details>\n<ul>\n<li><a href=\"https://roadmap.sh/frontend\">https://roadmap.sh/frontend</a></li>\n<li><a href=\"https://roadmap.sh/backend\">https://roadmap.sh/backend</a></li>\n</ul>\n",
      "id": 3
    },
    {
      "path": "home/4_resource_itineraries/1_Complete_Web_Developer_2020.md",
      "url": "home/4_resource_itineraries/1_Complete_Web_Developer_2020.html",
      "content": "# Resources\nCreated Saturday 20 March 2021\n\nThis is a course I did.\nLink: https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/\n\nIt teaches basic HTML, CSS, JavaScript and other stuff.\n\nI also learnt some React, HTTP verbs and some advanced (ES6-8) JavaScript.",
      "html": "<h1 id=\"resources\">Resources <a class=\"heading-anchor-permalink\" href=\"#resources\">#</a></h1>\n<p>Created Saturday 20 March 2021</p>\n<p>This is a course I did.\nLink: <a href=\"https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/\">https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/</a></p>\n<p>It teaches basic HTML, CSS, JavaScript and other stuff.</p>\n<p>I also learnt some React, HTTP verbs and some advanced (ES6-8) JavaScript.</p>\n",
      "id": 4
    },
    {
      "path": "home/4_resource_itineraries/2_freeCodeCamp.md",
      "url": "home/4_resource_itineraries/2_freeCodeCamp.html",
      "content": "# Resources\nCreated Saturday 20 March 2021\n\nDid HTML, CSS and accessibility courses from here. And some projects.\n\nLink: https://www.freecodecamp.org/learn/responsive-web-design/\n\n",
      "html": "<h1 id=\"resources\">Resources <a class=\"heading-anchor-permalink\" href=\"#resources\">#</a></h1>\n<p>Created Saturday 20 March 2021</p>\n<p>Did HTML, CSS and accessibility courses from here. And some projects.</p>\n<p>Link: <a href=\"https://www.freecodecamp.org/learn/responsive-web-design/\">https://www.freecodecamp.org/learn/responsive-web-design/</a></p>\n",
      "id": 5
    },
    {
      "path": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/0_Source Link.md",
      "url": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/0_Source Link.html",
      "content": "# 0. Source Link\nCreated Sunday 20 February 2022\n\n- Motivation: To learn JavaScript's details and nuances.\n- Course Link: [JavaScript: Understanding Weird Parts](https://www.udemy.com/course/understand-javascript/)\n- Dates: Course Purchases in October 2021. Starting the course in Feb 2022\n",
      "html": "<h1 id=\"0.-source-link\">0. Source Link <a class=\"heading-anchor-permalink\" href=\"#0.-source-link\">#</a></h1>\n<p>Created Sunday 20 February 2022</p>\n<ul>\n<li>Motivation: To learn JavaScript’s details and nuances.</li>\n<li>Course Link: <a href=\"https://www.udemy.com/course/understand-javascript/\">JavaScript: Understanding Weird Parts</a></li>\n<li>Dates: Course Purchases in October 2021. Starting the course in Feb 2022</li>\n</ul>\n",
      "id": 6
    },
    {
      "path": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/1_Getting_Started/1_Introduction_and_Goal_of_the_course.md",
      "url": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/1_Getting_Started/1_Introduction_and_Goal_of_the_course.html",
      "content": "# 1. Introduction and Goal of the course\nCreated Sunday 20 February 2022\n- [ ] in vault\n\nTo understand JavaScript, and not Nodejs or browser stuff - so the language.\n\nIt is expected that I have very basic knowledge of JS - like variables, loops, function basics.\n\nNote: Also, any words that seem difficult and grand but are actually represent simple things are called will be tagged using \"big word alert\" symbol.",
      "html": "<h1 id=\"1.-introduction-and-goal-of-the-course\">1. Introduction and Goal of the course <a class=\"heading-anchor-permalink\" href=\"#1.-introduction-and-goal-of-the-course\">#</a></h1>\n<p>Created Sunday 20 February 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<p>To understand JavaScript, and not Nodejs or browser stuff - so the language.</p>\n<p>It is expected that I have very basic knowledge of JS - like variables, loops, function basics.</p>\n<p>Note: Also, any words that seem difficult and grand but are actually represent simple things are called will be tagged using “big word alert” symbol.</p>\n",
      "id": 7
    },
    {
      "path": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/1_Getting_Started/2_Setup.md",
      "url": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/1_Getting_Started/2_Setup.html",
      "content": "# 2. Setup\nCreated Sunday 20 February 2022\n- [ ] in vault\n\n- Visual Studio Code aka vscode\n- Live Server extension installed on vscode",
      "html": "<h1 id=\"2.-setup\">2. Setup <a class=\"heading-anchor-permalink\" href=\"#2.-setup\">#</a></h1>\n<p>Created Sunday 20 February 2022</p>\n<ul>\n<li>\n<p>[ ] in vault</p>\n</li>\n<li>\n<p>Visual Studio Code aka vscode</p>\n</li>\n<li>\n<p>Live Server extension installed on vscode</p>\n</li>\n</ul>\n",
      "id": 8
    },
    {
      "path": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/1_Getting_Started/6_Understanding_and_frameworks.md",
      "url": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/1_Getting_Started/6_Understanding_and_frameworks.html",
      "content": "# 6. Understanding and frameworks\nCreated Sunday 20 February 2022\n- [ ] in vault.\n\nJavaScript is being for very powerful, awesome libraries and frameworks like Express.js, Angular.js, React.js and more.\n\n- Developers get introduced to JavaScript details via these libraries and frameworks, i.e. JavaScript is not studied in isolation.\n- This has an effect that the learner does not get a very good understanding of core JavaScript, but only the parts relevant to their library/framework.\n- As we are studying JavaScript in isolation here, we will be studying all of core JavaScript, so that we understand the files of these libraries/frameworks.\n- We will also be creating out own library at the end of this course.",
      "html": "<h1 id=\"6.-understanding-and-frameworks\">6. Understanding and frameworks <a class=\"heading-anchor-permalink\" href=\"#6.-understanding-and-frameworks\">#</a></h1>\n<p>Created Sunday 20 February 2022</p>\n<ul>\n<li>[ ] in vault.</li>\n</ul>\n<p>JavaScript is being for very powerful, awesome libraries and frameworks like Express.js, Angular.js, React.js and more.</p>\n<ul>\n<li>Developers get introduced to JavaScript details via these libraries and frameworks, i.e. JavaScript is not studied in isolation.</li>\n<li>This has an effect that the learner does not get a very good understanding of core JavaScript, but only the parts relevant to their library/framework.</li>\n<li>As we are studying JavaScript in isolation here, we will be studying all of core JavaScript, so that we understand the files of these libraries/frameworks.</li>\n<li>We will also be creating out own library at the end of this course.</li>\n</ul>\n",
      "id": 9
    },
    {
      "path": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/10_The_Global_environment_and_the_global_variable.md",
      "url": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/10_The_Global_environment_and_the_global_variable.html",
      "content": "# 10. The Global environment and the global object\nCreated Sunday 20 February 2022\n- [ ] in vault\n\n#### Global execution context\n- All code in JavaScript is run inside an execution context (or activation record).\n- The JavaScript engine always provides a base execution context in the form of a lexically global object.\n- All code outside a function is attached to this global object as a name-value pair.\n- In the browser, this engine provided global object is named `window`.\n\n#### this keyword\nThe `this` keyword refers to the current execution context. In case of global code, `this` points (is equal) to `window`.\n\n#### The 4 things for any location\nEvery location in the code has 4 things associated/accessible with it:\n1. Global execution context (GEC). In the browser, this is `window`.\n2. Current execution context, referred by `this`.\n3. Outer environment (=`null` for the global execution context).\n4. The code in the current execution context.\n\n![](../../../../assets/10_The_Global_environment_and_the_global_variable-image-1-0a0f9733.png)\n",
      "html": "<h1 id=\"10.-the-global-environment-and-the-global-object\">10. The Global environment and the global object <a class=\"heading-anchor-permalink\" href=\"#10.-the-global-environment-and-the-global-object\">#</a></h1>\n<p>Created Sunday 20 February 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<h4 id=\"global-execution-context\">Global execution context <a class=\"heading-anchor-permalink\" href=\"#global-execution-context\">#</a></h4>\n<ul>\n<li>All code in JavaScript is run inside an execution context (or activation record).</li>\n<li>The JavaScript engine always provides a base execution context in the form of a lexically global object.</li>\n<li>All code outside a function is attached to this global object as a name-value pair.</li>\n<li>In the browser, this engine provided global object is named <code>window</code>.</li>\n</ul>\n<h4 id=\"this-keyword\">this keyword <a class=\"heading-anchor-permalink\" href=\"#this-keyword\">#</a></h4>\n<p>The <code>this</code> keyword refers to the current execution context. In case of global code, <code>this</code> points (is equal) to <code>window</code>.</p>\n<h4 id=\"the-4-things-for-any-location\">The 4 things for any location <a class=\"heading-anchor-permalink\" href=\"#the-4-things-for-any-location\">#</a></h4>\n<p>Every location in the code has 4 things associated/accessible with it:</p>\n<ol>\n<li>Global execution context (GEC). In the browser, this is <code>window</code>.</li>\n<li>Current execution context, referred by <code>this</code>.</li>\n<li>Outer environment (=<code>null</code> for the global execution context).</li>\n<li>The code in the current execution context.</li>\n</ol>\n<p><img src=\"../../../../assets/10_The_Global_environment_and_the_global_variable-image-1-0a0f9733.png\" alt=\"\"></p>\n",
      "id": 10
    },
    {
      "path": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/11_Two_phase_interpretation,_hoisting.md",
      "url": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/11_Two_phase_interpretation,_hoisting.html",
      "content": "# 11. Two phase interpretation, \"hoisting\"\nCreated Tuesday 1 March 2022\n- [ ] in vault\n\n#### The two phases\nJavaScript is run in two phases by the JavaScript engine.\nThe phases are:\n1. Creation phase (or \"hoisting\") - memory is reserved for variables and functions, i.e. they are declared but not defined.\n2. Execution phase - here hoisted code is given value and all the code is executed.\n\nDue to \"hoisting\", this code does not raise an error:\n```js\nconsole.log(a);\nvar a = 2;\n```\n\nSome caveats:\n1. Function bodies are defined, in addition to being declared during \"hoisting\", although variables are only declared not defined.\n2. When using `let`, using code like the above (i.e. access before definition, due to the fact of \"hoisting\") results in a `ReferenceError`.\n\n#### What about nested code, how is that hoisted?\nHoisting happens only for the current code level, not for nested code. See [this](https://stackoverflow.com/questions/41249587/confused-about-javascript-hoisting?rq=1). In short, hoisting is minimal (contained to the code level).\n\n#### Sane practice\nOne should avoid \"using\" hoisiting to access code at obscure places. It is nice to access code after it has been defined.",
      "html": "<h1 id=\"11.-two-phase-interpretation%2C-%E2%80%9Choisting%E2%80%9D\">11. Two phase interpretation, “hoisting” <a class=\"heading-anchor-permalink\" href=\"#11.-two-phase-interpretation%2C-%E2%80%9Choisting%E2%80%9D\">#</a></h1>\n<p>Created Tuesday 1 March 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<h4 id=\"the-two-phases\">The two phases <a class=\"heading-anchor-permalink\" href=\"#the-two-phases\">#</a></h4>\n<p>JavaScript is run in two phases by the JavaScript engine.\nThe phases are:</p>\n<ol>\n<li>Creation phase (or “hoisting”) - memory is reserved for variables and functions, i.e. they are declared but not defined.</li>\n<li>Execution phase - here hoisted code is given value and all the code is executed.</li>\n</ol>\n<p>Due to “hoisting”, this code does not raise an error:</p>\n<pre><code class=\"language-js\">console.log(a);\nvar a = 2;\n</code></pre>\n<p>Some caveats:</p>\n<ol>\n<li>Function bodies are defined, in addition to being declared during “hoisting”, although variables are only declared not defined.</li>\n<li>When using <code>let</code>, using code like the above (i.e. access before definition, due to the fact of “hoisting”) results in a <code>ReferenceError</code>.</li>\n</ol>\n<h4 id=\"what-about-nested-code%2C-how-is-that-hoisted%3F\">What about nested code, how is that hoisted? <a class=\"heading-anchor-permalink\" href=\"#what-about-nested-code%2C-how-is-that-hoisted%3F\">#</a></h4>\n<p>Hoisting happens only for the current code level, not for nested code. See <a href=\"https://stackoverflow.com/questions/41249587/confused-about-javascript-hoisting?rq=1\">this</a>. In short, hoisting is minimal (contained to the code level).</p>\n<h4 id=\"sane-practice\">Sane practice <a class=\"heading-anchor-permalink\" href=\"#sane-practice\">#</a></h4>\n<p>One should avoid “using” hoisiting to access code at obscure places. It is nice to access code after it has been defined.</p>\n",
      "id": 11
    },
    {
      "path": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/12_undefined_is_special.md",
      "url": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/12_undefined_is_special.html",
      "content": "# 12. undefined is special\nCreated Tuesday 1 March 2022\n- [ ] in vault\n\n- When variables are \"hoisted\", they are set to `undefined`. \n- This is therefore a value set by the JavaScript engine.\n\n#### Good practice\nSo, we should never assign a variable to `undefined` ourselves. This is because it makes it difficult to debug, because `undefined` is supposed to be provided by the JS engine.\n\nInstead, use the keyword `null` if a value needs to be explicitly shown that it does not exist.",
      "html": "<h1 id=\"12.-undefined-is-special\">12. undefined is special <a class=\"heading-anchor-permalink\" href=\"#12.-undefined-is-special\">#</a></h1>\n<p>Created Tuesday 1 March 2022</p>\n<ul>\n<li>\n<p>[ ] in vault</p>\n</li>\n<li>\n<p>When variables are “hoisted”, they are set to <code>undefined</code>.</p>\n</li>\n<li>\n<p>This is therefore a value set by the JavaScript engine.</p>\n</li>\n</ul>\n<h4 id=\"good-practice\">Good practice <a class=\"heading-anchor-permalink\" href=\"#good-practice\">#</a></h4>\n<p>So, we should never assign a variable to <code>undefined</code> ourselves. This is because it makes it difficult to debug, because <code>undefined</code> is supposed to be provided by the JS engine.</p>\n<p>Instead, use the keyword <code>null</code> if a value needs to be explicitly shown that it does not exist.</p>\n",
      "id": 12
    },
    {
      "path": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/14_js_is_single_threaded_and_synchronous.md",
      "url": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/14_js_is_single_threaded_and_synchronous.html",
      "content": "# 14. js is single threaded and synchronous\nCreated Tuesday 1 March 2022\n- [ ] in vault\n\n#### Meaning of the words\n- Single threaded - running one command at a time.\n- Synchronous - one line of code at a time, and in order.\n\nHere's a fact - JavaScript is single threaded and synchronous.",
      "html": "<h1 id=\"14.-js-is-single-threaded-and-synchronous\">14. js is single threaded and synchronous <a class=\"heading-anchor-permalink\" href=\"#14.-js-is-single-threaded-and-synchronous\">#</a></h1>\n<p>Created Tuesday 1 March 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<h4 id=\"meaning-of-the-words\">Meaning of the words <a class=\"heading-anchor-permalink\" href=\"#meaning-of-the-words\">#</a></h4>\n<ul>\n<li>Single threaded - running one command at a time.</li>\n<li>Synchronous - one line of code at a time, and in order.</li>\n</ul>\n<p>Here’s a fact - JavaScript is single threaded and synchronous.</p>\n",
      "id": 13
    },
    {
      "path": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/17_The_scope_chain.md",
      "url": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/17_The_scope_chain.html",
      "content": "# 17. The scope chain\nCreated Wednesday 2 March 2022\n- [ ] in vault\n\nConsider this code:\n```js\nfunction b() {\n\tconsole.log(myVar);\n}\n\nfunction a() {\n\tlet myVar = 2;\n\tb();\n}\n\nlet myVar = 1;\na(); // prints 1\n```\n\nThis code snipper indicates that JavaScript looks for variables not in the current execution context, in the next outer lexical environment and so on. This is the **scope chain traversal**.\n\nNote that execution context (activation record) and lexical environment (scope) are two different things. This is the reason the lexical environment does not always behave like a stack, like here.\n\nOf course, one should not write code like this, and keep the declarations above the use.\n![](../../../../assets/17_The_scope_chain-image-1-0a0f9733.png)\n\nHowever, we can change the lexical environment for `b`. For example:\n```js\nfunction a() {\n\tfunction b() {\n\t\tconsole.log(myVar);\n\t}\n\tlet myVar = 2;\n\tb()\n}\n\na();\n```\n",
      "html": "<h1 id=\"17.-the-scope-chain\">17. The scope chain <a class=\"heading-anchor-permalink\" href=\"#17.-the-scope-chain\">#</a></h1>\n<p>Created Wednesday 2 March 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<p>Consider this code:</p>\n<pre><code class=\"language-js\">function b() {\n\tconsole.log(myVar);\n}\n\nfunction a() {\n\tlet myVar = 2;\n\tb();\n}\n\nlet myVar = 1;\na(); // prints 1\n</code></pre>\n<p>This code snipper indicates that JavaScript looks for variables not in the current execution context, in the next outer lexical environment and so on. This is the <strong>scope chain traversal</strong>.</p>\n<p>Note that execution context (activation record) and lexical environment (scope) are two different things. This is the reason the lexical environment does not always behave like a stack, like here.</p>\n<p>Of course, one should not write code like this, and keep the declarations above the use.\n<img src=\"../../../../assets/17_The_scope_chain-image-1-0a0f9733.png\" alt=\"\"></p>\n<p>However, we can change the lexical environment for <code>b</code>. For example:</p>\n<pre><code class=\"language-js\">function a() {\n\tfunction b() {\n\t\tconsole.log(myVar);\n\t}\n\tlet myVar = 2;\n\tb()\n}\n\na();\n</code></pre>\n",
      "id": 14
    },
    {
      "path": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/19_Asynchronous_callbacks.md",
      "url": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/19_Asynchronous_callbacks.html",
      "content": "# 19. Asynchronous Callbacks\nCreated Wednesday 2 March 2022\n- [ ] in vault\n\n#### Asynchronous - JS engine vs Browser\n\"JavaScript is synchrounous and single threaded\" - this statement seems naive or wrong. But it's not.\n\n\"JavaScript\" here refers to the working of the JavaScript engine, not the whole browser. The JavaScript engine talks to the rendering engine for making changes on a webpage and talks with the network part of the browser for intermittent data requests.\n\nThe JavaScript engine just places requests at these browser APIs, but still runs single threaded and synchronously.\n\nSo, the browser as a whole is asynchronous and multi-threaded.\n![](../../../../assets/19_Asynchronous_callbacks-image-1-0a0f9733.png)\n\n#### Event loop and queue - the bridge between browser APIs and the JS engine\nThe browser is aynchronous and multi-threaded, but the JS engine is not. Well, they cannot just work out of the box. There's actually a construct inside the JS engine that makes this combination of browser + JS engine, smooth. This construct has two parts:\n1. Event loop\n2. Event queue, which has two subparts:\n\t1. Microtask queue\n\t2. Callback queue\n\n![](../../../../assets/19_Asynchronous_callbacks-image-2-0a0f9733.png)\n\n#### How is the event queue populated and depopulated\n- The code from the event queue is run only when the main stack is empty.\n- When the main code (in the file) runs, it may use browser APIs for events like clicks and network calls. These are then handled by parts of the browser, but the JS engine continues running code. When thse browser tasks are completed and ready, they get enqueued in the event queue. Then when all the code in the main stack is done and the stack becomes empty, one task from the event queue is added to the stack to be run. Then it finishes, and another task is loaded from the event queue to the stack. This way, everything is finally run and done with.\n- It should be noted that stuff like `Promise` and \"mutation observers\" are kept in the microtask queue, instead of the callback queue. This part of the event queue has a higher priority than the callback queue. So callback queue tasks are inserted and run in the stack only when the microtask queue is empty.\n- `setTimeout` and callbacks are kept in the callback queue.\n\n#### The order of code when async elements are involved\nHere's an example of the order of execution, main code then callbacks and setTimeouts.\n```js\nfunction waitForThreeSeconds () {\n\tlet ms = 3000 + (new Date()).getTime();\n\n\twhile((new Date()) < ms) {}\n\n\tconsole.log('finished function')\n}\n\nfunction clickHandler() {\n\tconsole.log('click event!')\n}\n\ndocument.addEventListener('click', clickHandler);\n\nwaitForThreeSeconds();\nconsole.log('finished execution');\n```\n\nResult is:\n![](../../../../assets/19_Asynchronous_callbacks-image-3-0a0f9733.png)\nHere, the whole pages kind of freezes for the first 3 seconds, because the main code (i.e. code in stack) is running. Still, click events (if any) are picked up by the browser resources and stored in the event queue. Once the 3 second `while` loop is done, the stack is still not empty, because it needs to call the remaining main code(the \"finished function code\" `console.log`). Only after this is executed does the stack become empty. Once the main stack is empty, the click event's callbacks are pushed into the stack to execute. This is the order of code.\n",
      "html": "<h1 id=\"19.-asynchronous-callbacks\">19. Asynchronous Callbacks <a class=\"heading-anchor-permalink\" href=\"#19.-asynchronous-callbacks\">#</a></h1>\n<p>Created Wednesday 2 March 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<h4 id=\"asynchronous---js-engine-vs-browser\">Asynchronous - JS engine vs Browser <a class=\"heading-anchor-permalink\" href=\"#asynchronous---js-engine-vs-browser\">#</a></h4>\n<p>“JavaScript is synchrounous and single threaded” - this statement seems naive or wrong. But it’s not.</p>\n<p>“JavaScript” here refers to the working of the JavaScript engine, not the whole browser. The JavaScript engine talks to the rendering engine for making changes on a webpage and talks with the network part of the browser for intermittent data requests.</p>\n<p>The JavaScript engine just places requests at these browser APIs, but still runs single threaded and synchronously.</p>\n<p>So, the browser as a whole is asynchronous and multi-threaded.\n<img src=\"../../../../assets/19_Asynchronous_callbacks-image-1-0a0f9733.png\" alt=\"\"></p>\n<h4 id=\"event-loop-and-queue---the-bridge-between-browser-apis-and-the-js-engine\">Event loop and queue - the bridge between browser APIs and the JS engine <a class=\"heading-anchor-permalink\" href=\"#event-loop-and-queue---the-bridge-between-browser-apis-and-the-js-engine\">#</a></h4>\n<p>The browser is aynchronous and multi-threaded, but the JS engine is not. Well, they cannot just work out of the box. There’s actually a construct inside the JS engine that makes this combination of browser + JS engine, smooth. This construct has two parts:</p>\n<ol>\n<li>Event loop</li>\n<li>Event queue, which has two subparts:\n<ol>\n<li>Microtask queue</li>\n<li>Callback queue</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"../../../../assets/19_Asynchronous_callbacks-image-2-0a0f9733.png\" alt=\"\"></p>\n<h4 id=\"how-is-the-event-queue-populated-and-depopulated\">How is the event queue populated and depopulated <a class=\"heading-anchor-permalink\" href=\"#how-is-the-event-queue-populated-and-depopulated\">#</a></h4>\n<ul>\n<li>The code from the event queue is run only when the main stack is empty.</li>\n<li>When the main code (in the file) runs, it may use browser APIs for events like clicks and network calls. These are then handled by parts of the browser, but the JS engine continues running code. When thse browser tasks are completed and ready, they get enqueued in the event queue. Then when all the code in the main stack is done and the stack becomes empty, one task from the event queue is added to the stack to be run. Then it finishes, and another task is loaded from the event queue to the stack. This way, everything is finally run and done with.</li>\n<li>It should be noted that stuff like <code>Promise</code> and “mutation observers” are kept in the microtask queue, instead of the callback queue. This part of the event queue has a higher priority than the callback queue. So callback queue tasks are inserted and run in the stack only when the microtask queue is empty.</li>\n<li><code>setTimeout</code> and callbacks are kept in the callback queue.</li>\n</ul>\n<h4 id=\"the-order-of-code-when-async-elements-are-involved\">The order of code when async elements are involved <a class=\"heading-anchor-permalink\" href=\"#the-order-of-code-when-async-elements-are-involved\">#</a></h4>\n<p>Here’s an example of the order of execution, main code then callbacks and setTimeouts.</p>\n<pre><code class=\"language-js\">function waitForThreeSeconds () {\n\tlet ms = 3000 + (new Date()).getTime();\n\n\twhile((new Date()) &lt; ms) {}\n\n\tconsole.log('finished function')\n}\n\nfunction clickHandler() {\n\tconsole.log('click event!')\n}\n\ndocument.addEventListener('click', clickHandler);\n\nwaitForThreeSeconds();\nconsole.log('finished execution');\n</code></pre>\n<p>Result is:\n<img src=\"../../../../assets/19_Asynchronous_callbacks-image-3-0a0f9733.png\" alt=\"\">\nHere, the whole pages kind of freezes for the first 3 seconds, because the main code (i.e. code in stack) is running. Still, click events (if any) are picked up by the browser resources and stored in the event queue. Once the 3 second <code>while</code> loop is done, the stack is still not empty, because it needs to call the remaining main code(the “finished function code” <code>console.log</code>). Only after this is executed does the stack become empty. Once the main stack is empty, the click event’s callbacks are pushed into the stack to execute. This is the order of code.</p>\n",
      "id": 15
    },
    {
      "path": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/7_First_3_big_word_alerts.md",
      "url": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/7_First_3_big_word_alerts.html",
      "content": "# 7. First 3 big word alerts\nCreated Sunday 20 February 2022\n- [ ] in vault\n\nThe first 3 \"big word alerts\" to be discussed in this video are:\n1. Syntax Parsers\n2. Execution Contexts\n3. Lexical  Environments\n\nWhat are these things, let's see:\n1. Syntax Parser - a program that reads source code and checks syntax. It may do extra stuff too, if specified by the syntax parser's creators.\n2. Lexical Environment - the tree structure of scopes.\n3. Execution Context - the current stack frame.\n\nI was confused between 2 and 3, as the course author does not use the word 'activation record' or 'frame.' [This](https://stackoverflow.com/a/35760441/11392807) cleared it.\n\nThese things are important. They'll help us understand what's going inside JavaScript.",
      "html": "<h1 id=\"7.-first-3-big-word-alerts\">7. First 3 big word alerts <a class=\"heading-anchor-permalink\" href=\"#7.-first-3-big-word-alerts\">#</a></h1>\n<p>Created Sunday 20 February 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<p>The first 3 “big word alerts” to be discussed in this video are:</p>\n<ol>\n<li>Syntax Parsers</li>\n<li>Execution Contexts</li>\n<li>Lexical  Environments</li>\n</ol>\n<p>What are these things, let’s see:</p>\n<ol>\n<li>Syntax Parser - a program that reads source code and checks syntax. It may do extra stuff too, if specified by the syntax parser’s creators.</li>\n<li>Lexical Environment - the tree structure of scopes.</li>\n<li>Execution Context - the current stack frame.</li>\n</ol>\n<p>I was confused between 2 and 3, as the course author does not use the word ‘activation record’ or ‘frame.’ <a href=\"https://stackoverflow.com/a/35760441/11392807\">This</a> cleared it.</p>\n<p>These things are important. They’ll help us understand what’s going inside JavaScript.</p>\n",
      "id": 16
    },
    {
      "path": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/8_Name_value_pairs_and_objects.md",
      "url": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/2_Execution_Contexts_and_Lexical_Environments/8_Name_value_pairs_and_objects.html",
      "content": "# 8. Name value pairs and objects\nCreated Sunday 20 February 2022\n- [ ] in vault\n\n- Objects are very important in JavaScript.\n- We need to understand and distinguish between the terms:\n\t1. Name-value pair - a name which maps to a single value. This is the basic for variables. This is singular.\n\t2. Object - a \"collection\" of name value pairs.\n- Other programming languages may have other notions of Objects, but in JavaScript, it means a collection of name-value pairs.\n- Value of a name may be an object (collection of name value pairs) itself, that's fine. Simply said, nesting is possible.",
      "html": "<h1 id=\"8.-name-value-pairs-and-objects\">8. Name value pairs and objects <a class=\"heading-anchor-permalink\" href=\"#8.-name-value-pairs-and-objects\">#</a></h1>\n<p>Created Sunday 20 February 2022</p>\n<ul>\n<li>\n<p>[ ] in vault</p>\n</li>\n<li>\n<p>Objects are very important in JavaScript.</p>\n</li>\n<li>\n<p>We need to understand and distinguish between the terms:</p>\n<ol>\n<li>Name-value pair - a name which maps to a single value. This is the basic for variables. This is singular.</li>\n<li>Object - a “collection” of name value pairs.</li>\n</ol>\n</li>\n<li>\n<p>Other programming languages may have other notions of Objects, but in JavaScript, it means a collection of name-value pairs.</p>\n</li>\n<li>\n<p>Value of a name may be an object (collection of name value pairs) itself, that’s fine. Simply said, nesting is possible.</p>\n</li>\n</ul>\n",
      "id": 17
    },
    {
      "path": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/3_Types_and_operators/21_Primitive_types.md",
      "url": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/3_Types_and_operators/21_Primitive_types.html",
      "content": "# 21. Primitive types\nCreated Thursday 3 March 2022\n- [ ] in vault\n\nThere are two kinds of variable types in JavaScript:\n1. Primitive types - just values\n2. Objects - name, value pairs. Value may be an object itself.\n\nThere are 7 types of primitive types in JS, at the point of this writing:\n1. `undefined` - non-existence of a value, given by the JS engine. Should not be assigned to by us. Checking for it is fine though.\n2. `null` - non-existence of a value. This can be assigned by us.\n3. `number` - a floating type number.\n4. `string` - a string of characters. Immutable because there is no `char` in JS.\n5. `boolean` - obvious\n6. `symbol` - ES6+, FIXME. We are ignoring this in this course.\n7. `bigint` FIXME\n",
      "html": "<h1 id=\"21.-primitive-types\">21. Primitive types <a class=\"heading-anchor-permalink\" href=\"#21.-primitive-types\">#</a></h1>\n<p>Created Thursday 3 March 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<p>There are two kinds of variable types in JavaScript:</p>\n<ol>\n<li>Primitive types - just values</li>\n<li>Objects - name, value pairs. Value may be an object itself.</li>\n</ol>\n<p>There are 7 types of primitive types in JS, at the point of this writing:</p>\n<ol>\n<li><code>undefined</code> - non-existence of a value, given by the JS engine. Should not be assigned to by us. Checking for it is fine though.</li>\n<li><code>null</code> - non-existence of a value. This can be assigned by us.</li>\n<li><code>number</code> - a floating type number.</li>\n<li><code>string</code> - a string of characters. Immutable because there is no <code>char</code> in JS.</li>\n<li><code>boolean</code> - obvious</li>\n<li><code>symbol</code> - ES6+, FIXME. We are ignoring this in this course.</li>\n<li><code>bigint</code> FIXME</li>\n</ol>\n",
      "id": 18
    },
    {
      "path": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/3_Types_and_operators/26_Comparison_operators.md",
      "url": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/3_Types_and_operators/26_Comparison_operators.html",
      "content": "# 26. Primitive types\nCreated Thursday 3 March 2022\n- [ ] in vault\n\n#### Sane practice\n- Try to use strict comparison operators as much as possible, and avoid coerced comparison operators.\n- Loose comparison operators make code difficult to anticipate, hinder understanding and can be a source of very painful bugs.\n\n- Strict equal - `true` if types and values are same, else `false`.\n- Loose equal - `true` if coerced values are equal, else `false`.\n- Loose unequal - `false` if coerced values are equal.\n- Strict unequal - `true` if coerced values or types are different.",
      "html": "<h1 id=\"26.-primitive-types\">26. Primitive types <a class=\"heading-anchor-permalink\" href=\"#26.-primitive-types\">#</a></h1>\n<p>Created Thursday 3 March 2022</p>\n<ul>\n<li>[ ] in vault</li>\n</ul>\n<h4 id=\"sane-practice\">Sane practice <a class=\"heading-anchor-permalink\" href=\"#sane-practice\">#</a></h4>\n<ul>\n<li>\n<p>Try to use strict comparison operators as much as possible, and avoid coerced comparison operators.</p>\n</li>\n<li>\n<p>Loose comparison operators make code difficult to anticipate, hinder understanding and can be a source of very painful bugs.</p>\n</li>\n<li>\n<p>Strict equal - <code>true</code> if types and values are same, else <code>false</code>.</p>\n</li>\n<li>\n<p>Loose equal - <code>true</code> if coerced values are equal, else <code>false</code>.</p>\n</li>\n<li>\n<p>Loose unequal - <code>false</code> if coerced values are equal.</p>\n</li>\n<li>\n<p>Strict unequal - <code>true</code> if coerced values or types are different.</p>\n</li>\n</ul>\n",
      "id": 19
    },
    {
      "path": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/3_Types_and_operators/29_Logic_ops_and_value_evaluation.md",
      "url": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/3_Types_and_operators/29_Logic_ops_and_value_evaluation.html",
      "content": "# 29. Logical ops and value evaluation\nCreated Thursday 3 March 2022\n- [ ] in vault\n- [x] In brain memory\n\nIn JavaScript, the logical AND and OR have special meaning.\n- OR evaluates to the first truthy value. So `false || 'Sanjar'` evaluates to `Sanjar`. If all are falsy, it returns evaluates to the last value, so `false || undefined` evaluates to `undefined`. This is because of the short circuit behavior of OR. This behavior is used at many places to set default values to variables, like so:\n```js\nfunction f(name) {\n\tname = name || '<Default Name here>';\n}\nf(); // if nothing is passed, name = undefined, so the string is returned\n```\n- AND returns the first falsy value. It returns the last value if all variables involved are truthy. So `true && 1 && 'Sanjar'` evaluates to `Sanjar`. Also `undefined && true && 'Sanjar'` evaluates to `undefined`. This due to the short-circuit behavior of AND.\n\nIn short AND and OR are logical operators, but they don't necessarily evaluate to`Boolean` values.\n\nNote: In ES6+ functions, default values can be placed in params with the assignment operator, and OR is not needed.",
      "html": "<h1 id=\"29.-logical-ops-and-value-evaluation\">29. Logical ops and value evaluation <a class=\"heading-anchor-permalink\" href=\"#29.-logical-ops-and-value-evaluation\">#</a></h1>\n<p>Created Thursday 3 March 2022</p>\n<ul>\n<li>[ ] in vault</li>\n<li>[x] In brain memory</li>\n</ul>\n<p>In JavaScript, the logical AND and OR have special meaning.</p>\n<ul>\n<li>OR evaluates to the first truthy value. So <code>false || 'Sanjar'</code> evaluates to <code>Sanjar</code>. If all are falsy, it returns evaluates to the last value, so <code>false || undefined</code> evaluates to <code>undefined</code>. This is because of the short circuit behavior of OR. This behavior is used at many places to set default values to variables, like so:</li>\n</ul>\n<pre><code class=\"language-js\">function f(name) {\n\tname = name || '&lt;Default Name here&gt;';\n}\nf(); // if nothing is passed, name = undefined, so the string is returned\n</code></pre>\n<ul>\n<li>AND returns the first falsy value. It returns the last value if all variables involved are truthy. So <code>true &amp;&amp; 1 &amp;&amp; 'Sanjar'</code> evaluates to <code>Sanjar</code>. Also <code>undefined &amp;&amp; true &amp;&amp; 'Sanjar'</code> evaluates to <code>undefined</code>. This due to the short-circuit behavior of AND.</li>\n</ul>\n<p>In short AND and OR are logical operators, but they don’t necessarily evaluate to<code>Boolean</code> values.</p>\n<p>Note: In ES6+ functions, default values can be placed in params with the assignment operator, and OR is not needed.</p>\n",
      "id": 20
    },
    {
      "path": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/3_Types_and_operators/30_Multi-file_collisions.md",
      "url": "home/4_resource_itineraries/3_JavaScript_Understanding_the_weird_parts/3_Types_and_operators/30_Multi-file_collisions.html",
      "content": "# 30. Multi-file collisions\nCreated Thursday 3 March 2022\n\t- [ ] in vault\n",
      "html": "<h1 id=\"30.-multi-file-collisions\">30. Multi-file collisions <a class=\"heading-anchor-permalink\" href=\"#30.-multi-file-collisions\">#</a></h1>\n<p>Created Thursday 3 March 2022\n- [ ] in vault</p>\n",
      "id": 21
    },
    {
      "path": "home/4_resource_itineraries/4_FrontendMentor_challenges/1_intro_section_with_nav_dropdown.md",
      "url": "home/4_resource_itineraries/4_FrontendMentor_challenges/1_intro_section_with_nav_dropdown.html",
      "content": "# 1. Intro section with dropdown navigation\n[Challenge link](https://www.frontendmentor.io/challenges/intro-section-with-dropdown-navigation-ryaPetHE5/hub/intro-section-with-dropdown-navigation-nf9va42mE1)\n\n### Learnings\n1. Question: what to implement first, small components or the large layouts/components. i.e. bottom-up or top-down. This is valid when starting with any UI.\n2. Confidence gain: I can work with layouts quite nicely.\n3. Problem: brush up box-model, i.e. does width(or height) include border/padding/margin? How to remember this?\n\n### Todo\nHave to implement UI that'll render properly on mobile (which is completely different).\n1. How is this done?\n2. Are media queries enough?\n3. Can a page have a switch case where each device has a different UI which is rendered selectively, or is it all mixed up.\n\nHow is a custom styled dropdown created ?\nI am yet to create this.\nSee\n![](../../../assets/1_intro_section_with_nav_dropdown-image-1-428041d6.png)\n1. Using `z-index` and `display: none`?\n2. Or something else.\n3. Note that dropdown `select`, `option` are OS controlled, and cannot be styled extensively.\n",
      "html": "<h1 id=\"1.-intro-section-with-dropdown-navigation\">1. Intro section with dropdown navigation <a class=\"heading-anchor-permalink\" href=\"#1.-intro-section-with-dropdown-navigation\">#</a></h1>\n<p><a href=\"https://www.frontendmentor.io/challenges/intro-section-with-dropdown-navigation-ryaPetHE5/hub/intro-section-with-dropdown-navigation-nf9va42mE1\">Challenge link</a></p>\n<h3 id=\"learnings\">Learnings <a class=\"heading-anchor-permalink\" href=\"#learnings\">#</a></h3>\n<ol>\n<li>Question: what to implement first, small components or the large layouts/components. i.e. bottom-up or top-down. This is valid when starting with any UI.</li>\n<li>Confidence gain: I can work with layouts quite nicely.</li>\n<li>Problem: brush up box-model, i.e. does width(or height) include border/padding/margin? How to remember this?</li>\n</ol>\n<h3 id=\"todo\">Todo <a class=\"heading-anchor-permalink\" href=\"#todo\">#</a></h3>\n<p>Have to implement UI that’ll render properly on mobile (which is completely different).</p>\n<ol>\n<li>How is this done?</li>\n<li>Are media queries enough?</li>\n<li>Can a page have a switch case where each device has a different UI which is rendered selectively, or is it all mixed up.</li>\n</ol>\n<p>How is a custom styled dropdown created ?\nI am yet to create this.\nSee\n<img src=\"../../../assets/1_intro_section_with_nav_dropdown-image-1-428041d6.png\" alt=\"\"></p>\n<ol>\n<li>Using <code>z-index</code> and <code>display: none</code>?</li>\n<li>Or something else.</li>\n<li>Note that dropdown <code>select</code>, <code>option</code> are OS controlled, and cannot be styled extensively.</li>\n</ol>\n",
      "id": 22
    },
    {
      "path": "home/5_projects.md",
      "url": "home/5_projects.html",
      "content": "",
      "html": "",
      "id": 23
    },
    {
      "path": "home/6_setup.md",
      "url": "home/6_setup.html",
      "content": "# 4. Setup\nAll you need is a:\n1. Computer, laptop or PC would be nice.\n2. Browser\n3. Code Editor, VScode is a good one.\n\nOptional\n4. Git installed on computer\n5. GitHub account\n6. SSH key signed in for GitHub",
      "html": "<h1 id=\"4.-setup\">4. Setup <a class=\"heading-anchor-permalink\" href=\"#4.-setup\">#</a></h1>\n<p>All you need is a:</p>\n<ol>\n<li>Computer, laptop or PC would be nice.</li>\n<li>Browser</li>\n<li>Code Editor, VScode is a good one.</li>\n</ol>\n<p>Optional\n4. Git installed on computer\n5. GitHub account\n6. SSH key signed in for GitHub</p>\n",
      "id": 24
    },
    {
      "path": "tooling/README.md",
      "url": "tooling/README.html",
      "content": "This is meant for obsidian templates and other IDE stuff. Is generally context agnostic of the PKB domain.\n\nCreated Sun Sep 10, 2023 at 6:44 PM\n\n",
      "html": "<p>This is meant for obsidian templates and other IDE stuff. Is generally context agnostic of the PKB domain.</p>\n<p>Created Sun Sep 10, 2023 at 6:44 PM</p>\n",
      "id": 25
    },
    {
      "path": "tooling/obsidian-templates/README.md",
      "url": "tooling/obsidian-templates/README.html",
      "content": "This folder is meant for obsidian templates.\n\n## Templater plugin\n\n- I keep the templater plugins here as well. [Templater help](https://github.com/SilentVoid13/Templater/issues/397#issuecomment-1712749066)\n- I've added empty hotkey enties into templater and have attached them as top command palette options.\n- If templates increase, I'll need to use the 'Templater: insert template modal'. *Palette term 'modal' is enough*\n",
      "html": "<p>This folder is meant for obsidian templates.</p>\n<h2 id=\"templater-plugin\">Templater plugin <a class=\"heading-anchor-permalink\" href=\"#templater-plugin\">#</a></h2>\n<ul>\n<li>I keep the templater plugins here as well. <a href=\"https://github.com/SilentVoid13/Templater/issues/397#issuecomment-1712749066\">Templater help</a></li>\n<li>I’ve added empty hotkey enties into templater and have attached them as top command palette options.</li>\n<li>If templates increase, I’ll need to use the ‘Templater: insert template modal’. <em>Palette term ‘modal’ is enough</em></li>\n</ul>\n",
      "id": 26
    },
    {
      "path": "tooling/obsidian-templates/templater/timestamp.md",
      "url": "tooling/obsidian-templates/templater/timestamp.html",
      "content": "<% tp.date.now(\"[Created] ddd ll [at] LT\") %>\n\n",
      "html": "<p>&lt;% tp.date.now(&quot;[Created] ddd ll [at] LT&quot;) %&gt;</p>\n",
      "id": 27
    },
    {
      "path": "tooling/obsidian-templates/templater/title_and_date.md",
      "url": "tooling/obsidian-templates/templater/title_and_date.html",
      "content": "<%*\nretVal = tp.file.title;\nif (retVal.endsWith(\".md\")) retVal = retVal.slice(0, -3);\n\n// I used underscores for note.md names, but they make bad URLs,\n// so I switched to using hypens. Example: '1_React_Lists' to '1-React-Lists'\n// adding a separator token here, fallback value is underscore\nconst separator = retVal.indexOf('-') > retVal.indexOf('_') ? '-' : '_';\ncompleteTitle = retVal.replaceAll(separator, \" \");\npotentialNumber = completeTitle.split(\" \").at(0);\nhasNumber = !Number.isNaN(parseFloat(potentialNumber));\ntitleWithoutNumber = completeTitle.slice(potentialNumber.length + 1);\n\nnewTitle = hasNumber\n  ? `${potentialNumber}. ${titleWithoutNumber}`\n  : completeTitle;\n%># <% newTitle %>\n<% tp.date.now(\"[Created] ddd ll [at] LT\") %>\n\n<% tp.file.cursor() %>",
      "html": "<p>&lt;%*\nretVal = tp.file.title;\nif (retVal.endsWith(&quot;.md&quot;)) retVal = retVal.slice(0, -3);</p>\n<p>// I used underscores for <a href=\"http://note.md\">note.md</a> names, but they make bad URLs,\n// so I switched to using hypens. Example: ‘1_React_Lists’ to ‘1-React-Lists’\n// adding a separator token here, fallback value is underscore\nconst separator = retVal.indexOf(’-’) &gt; retVal.indexOf(’<em>’) ? ‘-’ : '</em>’;\ncompleteTitle = retVal.replaceAll(separator, &quot; “);\npotentialNumber = completeTitle.split(” &quot;).at(0);\nhasNumber = !Number.isNaN(parseFloat(potentialNumber));\ntitleWithoutNumber = completeTitle.slice(potentialNumber.length + 1);</p>\n<p>newTitle = hasNumber\n? <code>${potentialNumber}. ${titleWithoutNumber}</code>\n: completeTitle;\n%&gt;# &lt;% newTitle %&gt;\n&lt;% tp.date.now(&quot;[Created] ddd ll [at] LT&quot;) %&gt;</p>\n<p>&lt;% tp.file.cursor() %&gt;</p>\n",
      "id": 28
    },
    {
      "path": "tooling/obsidian-templates/templater/w2h.md",
      "url": "tooling/obsidian-templates/templater/w2h.html",
      "content": "## Why\n<% tp.file.cursor(1) %>\n\n## How\n<% tp.file.cursor(2) %>\n\n## What\n<% tp.file.cursor(3) %>",
      "html": "<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>&lt;% tp.file.cursor(1) %&gt;</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>&lt;% tp.file.cursor(2) %&gt;</p>\n<h2 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h2>\n<p>&lt;% tp.file.cursor(3) %&gt;</p>\n",
      "id": 29
    },
    {
      "path": "vault/0_Basics_of_the_Web/1_Browsing_the_web.md",
      "url": "vault/0_Basics_of_the_Web/1_Browsing_the_web.html",
      "content": "# 1. Browsing the web\nCreated Saturday 27 March 2021\n\n#### Browsing the web\nBrowsing the web? This is* \"*trivial\". Yes, _using_ is. But we cannot think of optimization without knowing these details.\n\n#### First connection to a website\n![](../../assets/1_Browsing_the_web-image-1-c17f2814.png)\n\n- The URL is sent to the DNS, through the ISP(your Internet company).\n- The DNS sends an IP address(the physical device's address). This identifies the server(computer owned by the website) address. Your device also has an IP address.\n- You communicate directly with the server now. You are still using going through the ISP, but a DNS is not required in between.\n\nDNS is a system, as well as a server. Watch [here](https://www.youtube.com/watch?v=72snZctFFtA&feature=youtu.be&t=45s).\n\n#### How does the website load\n- You request the website(server) for a page. The default page is called the \"landing page\".\n- The server sends 3 kinds of files for the webpage:\n  1.  HTML\n  2.  JS\n  3.  CSS\n\nNote: Media files like images, videos, PDF etc are also recieved.\n\n- The browser reads the files and renders the webpage.\n\n![](../../assets/1_Browsing_the_web-image-2-c17f2814.png)\n\n#### What do the files do?\n- HTML - defines basic structure of the page. Relative locations of paragraphs, quotes, buttons, videos, images etc are defined in this file.\n- CSS - defines styling. - defines the font, color, styling and behavior of the parts defined by HTML.\n- JavaScript - adds interactivity to the page. It can manipulate page elements.\n- Media files are places as per the 3 files.\n\n#### What happens when a new page is requested\nNaive way:\n\n- You request for the new page.\n- The server sends the relevant files.\n\nEfficient way:\n\n- The server actually sent many webpages at once, and the browser stored(cached) them.\n- So the JS file loads the new page from the files cached before.\n- This way the server has to only send files that are not in cache.\n- This saves time and data resources, and makes the site fast.\n",
      "html": "<h1 id=\"1.-browsing-the-web\">1. Browsing the web <a class=\"heading-anchor-permalink\" href=\"#1.-browsing-the-web\">#</a></h1>\n<p>Created Saturday 27 March 2021</p>\n<h4 id=\"browsing-the-web\">Browsing the web <a class=\"heading-anchor-permalink\" href=\"#browsing-the-web\">#</a></h4>\n<p>Browsing the web? This is* “*trivial”. Yes, <em>using</em> is. But we cannot think of optimization without knowing these details.</p>\n<h4 id=\"first-connection-to-a-website\">First connection to a website <a class=\"heading-anchor-permalink\" href=\"#first-connection-to-a-website\">#</a></h4>\n<p><img src=\"../../assets/1_Browsing_the_web-image-1-c17f2814.png\" alt=\"\"></p>\n<ul>\n<li>The URL is sent to the DNS, through the ISP(your Internet company).</li>\n<li>The DNS sends an IP address(the physical device’s address). This identifies the server(computer owned by the website) address. Your device also has an IP address.</li>\n<li>You communicate directly with the server now. You are still using going through the ISP, but a DNS is not required in between.</li>\n</ul>\n<p>DNS is a system, as well as a server. Watch <a href=\"https://www.youtube.com/watch?v=72snZctFFtA&amp;feature=youtu.be&amp;t=45s\">here</a>.</p>\n<h4 id=\"how-does-the-website-load\">How does the website load <a class=\"heading-anchor-permalink\" href=\"#how-does-the-website-load\">#</a></h4>\n<ul>\n<li>You request the website(server) for a page. The default page is called the “landing page”.</li>\n<li>The server sends 3 kinds of files for the webpage:\n<ol>\n<li>HTML</li>\n<li>JS</li>\n<li>CSS</li>\n</ol>\n</li>\n</ul>\n<p>Note: Media files like images, videos, PDF etc are also recieved.</p>\n<ul>\n<li>The browser reads the files and renders the webpage.</li>\n</ul>\n<p><img src=\"../../assets/1_Browsing_the_web-image-2-c17f2814.png\" alt=\"\"></p>\n<h4 id=\"what-do-the-files-do%3F\">What do the files do? <a class=\"heading-anchor-permalink\" href=\"#what-do-the-files-do%3F\">#</a></h4>\n<ul>\n<li>HTML - defines basic structure of the page. Relative locations of paragraphs, quotes, buttons, videos, images etc are defined in this file.</li>\n<li>CSS - defines styling. - defines the font, color, styling and behavior of the parts defined by HTML.</li>\n<li>JavaScript - adds interactivity to the page. It can manipulate page elements.</li>\n<li>Media files are places as per the 3 files.</li>\n</ul>\n<h4 id=\"what-happens-when-a-new-page-is-requested\">What happens when a new page is requested <a class=\"heading-anchor-permalink\" href=\"#what-happens-when-a-new-page-is-requested\">#</a></h4>\n<p>Naive way:</p>\n<ul>\n<li>You request for the new page.</li>\n<li>The server sends the relevant files.</li>\n</ul>\n<p>Efficient way:</p>\n<ul>\n<li>The server actually sent many webpages at once, and the browser stored(cached) them.</li>\n<li>So the JS file loads the new page from the files cached before.</li>\n<li>This way the server has to only send files that are not in cache.</li>\n<li>This saves time and data resources, and makes the site fast.</li>\n</ul>\n",
      "id": 30
    },
    {
      "path": "vault/0_Basics_of_the_Web/2_Dev_Tool/0_index.md",
      "url": "vault/0_Basics_of_the_Web/2_Dev_Tool/0_index.html",
      "content": "# 2. Dev Tool\nCreated Saturday 27 March 2021\n\n#### Dev Tool\n- This is a tool available in every modern browser.\n- To open it, click: Sandwich button → More Tools → Developer tools\n- Shortcut: `Ctrl` + `Shift` + `I`\n\n#### What does it do?\n- It is used to see:\n  - Files sent by the server\n  - Track website performance\n  - Track network requests\n  - See security profile of the website\n\nAnd more\n\n- For now, we will just play around with websites we see.\n\n![](../../../assets/0_index-image-1-ca3b196c.png)\n\n#### Playing around with a page\n- You can edit the files - HTML, CSS and JS. Changes are rendered instantly.\n- To edit HTML, click on the 'Elements tab'.\n\n![](../../../assets/0_index-image-2-ca3b196c.png)\n\n- To view/edit CSS, click on the 'styles' section. This generally on a different bar than the 'Elements' tab.\n\n![](../../../assets/0_index-image-3-ca3b196c.png)\n\n- An example, select the element selector button and click on an element(on the page). You'll be shown the corresponding code. Double click to edit.\n\n![](../../../assets/0_index-image-4-ca3b196c.png)\n\n- Refresh the website to reset changes.\n\n#### How does the Dev Tool work\n- We are just editing the recieved files.\n- No changes are actually made on the server.\n",
      "html": "<h1 id=\"2.-dev-tool\">2. Dev Tool <a class=\"heading-anchor-permalink\" href=\"#2.-dev-tool\">#</a></h1>\n<p>Created Saturday 27 March 2021</p>\n<h4 id=\"dev-tool\">Dev Tool <a class=\"heading-anchor-permalink\" href=\"#dev-tool\">#</a></h4>\n<ul>\n<li>This is a tool available in every modern browser.</li>\n<li>To open it, click: Sandwich button → More Tools → Developer tools</li>\n<li>Shortcut: <code>Ctrl</code> + <code>Shift</code> + <code>I</code></li>\n</ul>\n<h4 id=\"what-does-it-do%3F\">What does it do? <a class=\"heading-anchor-permalink\" href=\"#what-does-it-do%3F\">#</a></h4>\n<ul>\n<li>It is used to see:\n<ul>\n<li>Files sent by the server</li>\n<li>Track website performance</li>\n<li>Track network requests</li>\n<li>See security profile of the website</li>\n</ul>\n</li>\n</ul>\n<p>And more</p>\n<ul>\n<li>For now, we will just play around with websites we see.</li>\n</ul>\n<p><img src=\"../../../assets/0_index-image-1-ca3b196c.png\" alt=\"\"></p>\n<h4 id=\"playing-around-with-a-page\">Playing around with a page <a class=\"heading-anchor-permalink\" href=\"#playing-around-with-a-page\">#</a></h4>\n<ul>\n<li>You can edit the files - HTML, CSS and JS. Changes are rendered instantly.</li>\n<li>To edit HTML, click on the ‘Elements tab’.</li>\n</ul>\n<p><img src=\"../../../assets/0_index-image-2-ca3b196c.png\" alt=\"\"></p>\n<ul>\n<li>To view/edit CSS, click on the ‘styles’ section. This generally on a different bar than the ‘Elements’ tab.</li>\n</ul>\n<p><img src=\"../../../assets/0_index-image-3-ca3b196c.png\" alt=\"\"></p>\n<ul>\n<li>An example, select the element selector button and click on an element(on the page). You’ll be shown the corresponding code. Double click to edit.</li>\n</ul>\n<p><img src=\"../../../assets/0_index-image-4-ca3b196c.png\" alt=\"\"></p>\n<ul>\n<li>Refresh the website to reset changes.</li>\n</ul>\n<h4 id=\"how-does-the-dev-tool-work\">How does the Dev Tool work <a class=\"heading-anchor-permalink\" href=\"#how-does-the-dev-tool-work\">#</a></h4>\n<ul>\n<li>We are just editing the recieved files.</li>\n<li>No changes are actually made on the server.</li>\n</ul>\n",
      "id": 31
    },
    {
      "path": "vault/0_Basics_of_the_Web/2_Dev_Tool/1_DevTool_advanced.md",
      "url": "vault/0_Basics_of_the_Web/2_Dev_Tool/1_DevTool_advanced.html",
      "content": "# DevTool advanced\nCreated Saturday 04 December 2021\n\nFIXME ! do this [~2hr course](https://www.youtube.com/watch?v=Y3u2groOG-A)\nAlso, [ChromeDevTool](https://developer.chrome.com/docs/devtools/)\n\n",
      "html": "<h1 id=\"devtool-advanced\">DevTool advanced <a class=\"heading-anchor-permalink\" href=\"#devtool-advanced\">#</a></h1>\n<p>Created Saturday 04 December 2021</p>\n<p>FIXME ! do this <a href=\"https://www.youtube.com/watch?v=Y3u2groOG-A\">~2hr course</a>\nAlso, <a href=\"https://developer.chrome.com/docs/devtools/\">ChromeDevTool</a></p>\n",
      "id": 32
    },
    {
      "path": "vault/0_Basics_of_the_Web/3_How_browsers_work.md",
      "url": "vault/0_Basics_of_the_Web/3_How_browsers_work.html",
      "content": "# 3. How browsers work\nCreated Saturday 23 January 2022\n\n## The browser's high level structure\nThe browser's main components are:\n1.  **The user interface**: this includes the address bar, back/forward button, bookmarking menu, etc. Every part of the browser display except the window where you see the requested page.\n2.  **The browser bridge (engine)**: marshals actions between the UI and the rendering engine.\n3.  **The rendering engine** : responsible for displaying requested content. For example if the requested content is HTML, the rendering engine parses HTML and CSS, and displays the parsed content on the screen.\n4.  **Networking**: for network calls such as HTTP requests, using different implementations for different platform behind a platform-independent interface.\n5.  **UI backend**: used for drawing basic widgets like combo boxes and windows. This backend exposes a generic interface that is not platform specific. Underneath it uses operating system user interface methods.\n6.  **JavaScript interpreter**. Used to parse and execute JavaScript code.\n7.  **Data storage**. This is a persistence layer. The browser may need to save all sorts of data locally, such as cookies. Browsers also support storage mechanisms such as localStorage, IndexedDB, WebSQL and FileSystem.\n![[../../assets/3_How_browsers_work-image-1-c17f2814.png]]\n\n\n## Code to Display flow\n![[../../assets/3_How_browsers_work-image-2-c17f2814.png]]\n![[../../assets/3_How_browsers_work-image-3-c17f2814.png]]\n1. parse HTML --> DOM tree and parse CSS and apply selectors --> CSSOM tree\n2. DOM and CSSOM are combined to create \"render tree\". This contains visible nodes and their height/width and other styles.\n3. Layout/Reflow: Layouts (dimensions and coordinates) are calculated.\n4. Repaint: Render tree is finally painted using UI backend (connected to OS).\n![[../../assets/3_How_browsers_work-image-4-c17f2814.png]]\nThe flow of HTML, CSS code to render.\n\n###### Resources used\n- [Read - How browsers work](https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/)\n- [Reflow and repainting](https://gist.github.com/faressoft/36cdd64faae21ed22948b458e6bf04d5)",
      "html": "<h1 id=\"3.-how-browsers-work\">3. How browsers work <a class=\"heading-anchor-permalink\" href=\"#3.-how-browsers-work\">#</a></h1>\n<p>Created Saturday 23 January 2022</p>\n<h2 id=\"the-browser%E2%80%99s-high-level-structure\">The browser’s high level structure <a class=\"heading-anchor-permalink\" href=\"#the-browser%E2%80%99s-high-level-structure\">#</a></h2>\n<p>The browser’s main components are:</p>\n<ol>\n<li><strong>The user interface</strong>: this includes the address bar, back/forward button, bookmarking menu, etc. Every part of the browser display except the window where you see the requested page.</li>\n<li><strong>The browser bridge (engine)</strong>: marshals actions between the UI and the rendering engine.</li>\n<li><strong>The rendering engine</strong> : responsible for displaying requested content. For example if the requested content is HTML, the rendering engine parses HTML and CSS, and displays the parsed content on the screen.</li>\n<li><strong>Networking</strong>: for network calls such as HTTP requests, using different implementations for different platform behind a platform-independent interface.</li>\n<li><strong>UI backend</strong>: used for drawing basic widgets like combo boxes and windows. This backend exposes a generic interface that is not platform specific. Underneath it uses operating system user interface methods.</li>\n<li><strong>JavaScript interpreter</strong>. Used to parse and execute JavaScript code.</li>\n<li><strong>Data storage</strong>. This is a persistence layer. The browser may need to save all sorts of data locally, such as cookies. Browsers also support storage mechanisms such as localStorage, IndexedDB, WebSQL and FileSystem.\n![[…/…/assets/3_How_browsers_work-image-1-c17f2814.png]]</li>\n</ol>\n<h2 id=\"code-to-display-flow\">Code to Display flow <a class=\"heading-anchor-permalink\" href=\"#code-to-display-flow\">#</a></h2>\n<p>![[…/…/assets/3_How_browsers_work-image-2-c17f2814.png]]\n![[…/…/assets/3_How_browsers_work-image-3-c17f2814.png]]</p>\n<ol>\n<li>parse HTML --&gt; DOM tree and parse CSS and apply selectors --&gt; CSSOM tree</li>\n<li>DOM and CSSOM are combined to create “render tree”. This contains visible nodes and their height/width and other styles.</li>\n<li>Layout/Reflow: Layouts (dimensions and coordinates) are calculated.</li>\n<li>Repaint: Render tree is finally painted using UI backend (connected to OS).\n![[…/…/assets/3_How_browsers_work-image-4-c17f2814.png]]\nThe flow of HTML, CSS code to render.</li>\n</ol>\n<h6 id=\"resources-used\">Resources used <a class=\"heading-anchor-permalink\" href=\"#resources-used\">#</a></h6>\n<ul>\n<li><a href=\"https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/\">Read - How browsers work</a></li>\n<li><a href=\"https://gist.github.com/faressoft/36cdd64faae21ed22948b458e6bf04d5\">Reflow and repainting</a></li>\n</ul>\n",
      "id": 33
    },
    {
      "path": "vault/0_Basics_of_the_Web/4_First_website_visit_details.md",
      "url": "vault/0_Basics_of_the_Web/4_First_website_visit_details.html",
      "content": "# 4. First website visit details\nCreated Saturday 28 May 2022\n\nFIXME: https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work",
      "html": "<h1 id=\"4.-first-website-visit-details\">4. First website visit details <a class=\"heading-anchor-permalink\" href=\"#4.-first-website-visit-details\">#</a></h1>\n<p>Created Saturday 28 May 2022</p>\n<p>FIXME: <a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work\">https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work</a></p>\n",
      "id": 34
    },
    {
      "path": "vault/0_Basics_of_the_Web/4_Rendering_Performance_basics.md",
      "url": "vault/0_Basics_of_the_Web/4_Rendering_Performance_basics.html",
      "content": "\nFIXME: read, understand and explain https://web.dev/rendering-performance/ (FIXME: contains a Udacity course on rendering performance)\n\nAlso see https://github.com/sanjar-notes/web_dev_fundamentals/issues/44 second video. It talks about Dev tools for assessing rendering performance.\n",
      "html": "<p>FIXME: read, understand and explain <a href=\"https://web.dev/rendering-performance/\">https://web.dev/rendering-performance/</a> (FIXME: contains a Udacity course on rendering performance)</p>\n<p>Also see <a href=\"https://github.com/sanjar-notes/web_dev_fundamentals/issues/44\">https://github.com/sanjar-notes/web_dev_fundamentals/issues/44</a> second video. It talks about Dev tools for assessing rendering performance.</p>\n",
      "id": 35
    },
    {
      "path": "vault/1_HTML/0_index.md",
      "url": "vault/1_HTML/0_index.html",
      "content": "# 1. HTML\nCreated Monday 07 October 2019\n\n\n* No need to remember syntax here.\n* Just undertstand the concepts.\n",
      "html": "<h1 id=\"1.-html\">1. HTML <a class=\"heading-anchor-permalink\" href=\"#1.-html\">#</a></h1>\n<p>Created Monday 07 October 2019</p>\n<ul>\n<li>No need to remember syntax here.</li>\n<li>Just undertstand the concepts.</li>\n</ul>\n",
      "id": 36
    },
    {
      "path": "vault/1_HTML/1_What_are_tags.md",
      "url": "vault/1_HTML/1_What_are_tags.html",
      "content": "# 1. What are tags\nCreated Sunday 14 February 2021\n\n### What is HTML\n- It is a language used to specify the structure(skeleton) of a webpage.\n- HTML is a markup language, not a programming language.\n- HTML stands for HyperText Markup Language\n\n### Tags\n- The basic unit of HTML is the tag.\n- There are two kinds of tags\n  1.  Content tags(or just tags). Example: `<p> HTML is genius </p>`\n  2.  Self closing(or empty tags). Example: `<img />`\n\n### Attributes\n- An attribute is a key-value pair that modifies the behavior of a tag.\n- They are written inside the opening angled brackets.\n- Syntax:\n  ```html\n  <img height=\"200px\" width=\"200px\" />\n  ```\n- Parts of an attribute:\n  1.  key - a string without quotes.\n  2.  value\n\n* `=` is used for assigning values to key.\n\n- Rules for attributes:\n  - Attributes are separated by space.\n  - Ordering of attributes does not matter.\n- Presence of a boolean attribute means it is enabled.\n\n  ```html\n  <video autoplay=\"true\" />\n  <!-- verbose -->\n\n  <video autoplay />\n  <!-- concise is better -->\n  ```\n\n### Anatomy of a webpage\n- There are 3 basic tags in all webpages.\n  1.  `html` - encloses the whole webpage.\n  2.  `head` - contains title(tab title) and page metadata. Used by crawlers.\n  3.  `body` - webpage content, as seen in the browser.\n- Basic structure of a webpage.\n\n```html\n<!DOCTYPE html>\n<!--Ignore this for now-->\n<html>\n  <head> </head>\n\n  <body></body>\n</html>\n```\n\n- Everything inside the `body` is visible(perceptible) in the browser(below the omnibox).\n- The preamble, `<!DOCTYPE html>` is used for legacy reasons. It's not a part of the webpage and just describes the file type.\n\n### Other basic tags\n- `title` - appears on the tab. Page file name is displayed if this is absent. Used within `head`.\n- `meta` - self closing tag specifying metadata like language, region, character encoding etc.\n\n### Facts about HTML\n- Errors are ignored by the browser. [See](https://youtu.be/-csXdj4WVwA)(optional).\n- Whitespace is ignored in the content of HTML tags, except in string literals.\n- HTML does not have strict indentation, it is free flow language.\n",
      "html": "<h1 id=\"1.-what-are-tags\">1. What are tags <a class=\"heading-anchor-permalink\" href=\"#1.-what-are-tags\">#</a></h1>\n<p>Created Sunday 14 February 2021</p>\n<h3 id=\"what-is-html\">What is HTML <a class=\"heading-anchor-permalink\" href=\"#what-is-html\">#</a></h3>\n<ul>\n<li>It is a language used to specify the structure(skeleton) of a webpage.</li>\n<li>HTML is a markup language, not a programming language.</li>\n<li>HTML stands for HyperText Markup Language</li>\n</ul>\n<h3 id=\"tags\">Tags <a class=\"heading-anchor-permalink\" href=\"#tags\">#</a></h3>\n<ul>\n<li>The basic unit of HTML is the tag.</li>\n<li>There are two kinds of tags\n<ol>\n<li>Content tags(or just tags). Example: <code>&lt;p&gt; HTML is genius &lt;/p&gt;</code></li>\n<li>Self closing(or empty tags). Example: <code>&lt;img /&gt;</code></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"attributes\">Attributes <a class=\"heading-anchor-permalink\" href=\"#attributes\">#</a></h3>\n<ul>\n<li>An attribute is a key-value pair that modifies the behavior of a tag.</li>\n<li>They are written inside the opening angled brackets.</li>\n<li>Syntax:<pre><code class=\"language-html\">&lt;img height=&quot;200px&quot; width=&quot;200px&quot; /&gt;\n</code></pre>\n</li>\n<li>Parts of an attribute:\n<ol>\n<li>key - a string without quotes.</li>\n<li>value</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><code>=</code> is used for assigning values to key.</li>\n</ul>\n<ul>\n<li>\n<p>Rules for attributes:</p>\n<ul>\n<li>Attributes are separated by space.</li>\n<li>Ordering of attributes does not matter.</li>\n</ul>\n</li>\n<li>\n<p>Presence of a boolean attribute means it is enabled.</p>\n<pre><code class=\"language-html\">&lt;video autoplay=&quot;true&quot; /&gt;\n&lt;!-- verbose --&gt;\n\n&lt;video autoplay /&gt;\n&lt;!-- concise is better --&gt;\n</code></pre>\n</li>\n</ul>\n<h3 id=\"anatomy-of-a-webpage\">Anatomy of a webpage <a class=\"heading-anchor-permalink\" href=\"#anatomy-of-a-webpage\">#</a></h3>\n<ul>\n<li>There are 3 basic tags in all webpages.\n<ol>\n<li><code>html</code> - encloses the whole webpage.</li>\n<li><code>head</code> - contains title(tab title) and page metadata. Used by crawlers.</li>\n<li><code>body</code> - webpage content, as seen in the browser.</li>\n</ol>\n</li>\n<li>Basic structure of a webpage.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;!--Ignore this for now--&gt;\n&lt;html&gt;\n  &lt;head&gt; &lt;/head&gt;\n\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Everything inside the <code>body</code> is visible(perceptible) in the browser(below the omnibox).</li>\n<li>The preamble, <code>&lt;!DOCTYPE html&gt;</code> is used for legacy reasons. It’s not a part of the webpage and just describes the file type.</li>\n</ul>\n<h3 id=\"other-basic-tags\">Other basic tags <a class=\"heading-anchor-permalink\" href=\"#other-basic-tags\">#</a></h3>\n<ul>\n<li><code>title</code> - appears on the tab. Page file name is displayed if this is absent. Used within <code>head</code>.</li>\n<li><code>meta</code> - self closing tag specifying metadata like language, region, character encoding etc.</li>\n</ul>\n<h3 id=\"facts-about-html\">Facts about HTML <a class=\"heading-anchor-permalink\" href=\"#facts-about-html\">#</a></h3>\n<ul>\n<li>Errors are ignored by the browser. <a href=\"https://youtu.be/-csXdj4WVwA\">See</a>(optional).</li>\n<li>Whitespace is ignored in the content of HTML tags, except in string literals.</li>\n<li>HTML does not have strict indentation, it is free flow language.</li>\n</ul>\n",
      "id": 37
    },
    {
      "path": "vault/1_HTML/2_Common_tags/1_Writing_stuff.md",
      "url": "vault/1_HTML/2_Common_tags/1_Writing_stuff.html",
      "content": "# 1. Writing stuff\nCreated Wednesday 17 June 2020\n\n### Basic text constructs\n1. ``h1`` ⇒ heading, h6 is the smallest.\n2. ``p`` ⇒ paragraph tag, the attribute ``contenteditable=\"true\"`` is omitted generally.\n3. ``strong`` ⇒ bold text\n4. ``em`` ⇒ italicized text\n5. ``<br />`` ⇒ newline\n6. ``<hr />`` ⇒ visible horizontal separator\n7. ``cite`` ⇒ citation (displayed as italicized)\n8. ``pre`` ⇒ pre-formatted or verbatim text\n9. `<blockquote cite=\"\">` ⇒ indented\n10. ``q`` ⇒ Quote, Italicized\n11. ``abbr`` ⇒ abbreviation. Short is new, `<acronym>` is obsolete.\n12. ``dfn`` ⇒ definition.\n\n### Code and scientific notation\n1. ``eqn`` - for equations.\n2. ``code`` - Mostly the code is wrapped by a `<pre>` wrapped by a `<code>` element.\n3. ``samp`` The output of the code.\n4. ``var`` represents a variable.\n5. ``sub`` is used for subscript text. CH~4~.\n6. ``sup`` is used for superscript text. E=mc^2^.\n\n\n### HTML Entities\n* As discussed before, browser ignores whitespace in HTML content.\n* So - whitespace, operators and emojis are handled using ``entitites``.\n* Syntax for entities - there are 3 equivalent notations - `&code;`, `&#decimal;` and `&#hex;`\n* How to use - just write the entity in the content.\n\nExamples\n![](../../../assets/1_Writing_stuff-image-1-a92d20ef.png)\n\n### Miscellaneous\n1. `<kbd> Ctrl+S </kbd>` for keybindings.\n2. ``address`` ⇒ italicizes the address.\n3. Use the `title` attribute for abbreviations and citations. This usually adds a hover tooltip to the whole HTML element.\n\n### Demo\n```html\n<code>\n\tx = 5;<br>\n\ty = 6;<br>\n\tz = x + y;\n</code>\n\n<!-- samp - output of the program -->\n<p>If you input wrong value, the program will return <samp>Error!</samp></p>\n\n<!-- 2. kbd - represents keyboard input: For quick action, very important in PCs Rendered differenetly-->\n<p>Save the document by pressing <kbd>Ctrl + S</kbd></p>\n\n<!-- var helps us render a variable differently - italicised -->\nEinstein wrote: <var>E</var> = <var>mc</var><sup>2</sup>.\n```\n[See Output](output.html)\n\n",
      "html": "<h1 id=\"1.-writing-stuff\">1. Writing stuff <a class=\"heading-anchor-permalink\" href=\"#1.-writing-stuff\">#</a></h1>\n<p>Created Wednesday 17 June 2020</p>\n<h3 id=\"basic-text-constructs\">Basic text constructs <a class=\"heading-anchor-permalink\" href=\"#basic-text-constructs\">#</a></h3>\n<ol>\n<li><code>h1</code> ⇒ heading, h6 is the smallest.</li>\n<li><code>p</code> ⇒ paragraph tag, the attribute <code>contenteditable=&quot;true&quot;</code> is omitted generally.</li>\n<li><code>strong</code> ⇒ bold text</li>\n<li><code>em</code> ⇒ italicized text</li>\n<li><code>&lt;br /&gt;</code> ⇒ newline</li>\n<li><code>&lt;hr /&gt;</code> ⇒ visible horizontal separator</li>\n<li><code>cite</code> ⇒ citation (displayed as italicized)</li>\n<li><code>pre</code> ⇒ pre-formatted or verbatim text</li>\n<li><code>&lt;blockquote cite=&quot;&quot;&gt;</code> ⇒ indented</li>\n<li><code>q</code> ⇒ Quote, Italicized</li>\n<li><code>abbr</code> ⇒ abbreviation. Short is new, <code>&lt;acronym&gt;</code> is obsolete.</li>\n<li><code>dfn</code> ⇒ definition.</li>\n</ol>\n<h3 id=\"code-and-scientific-notation\">Code and scientific notation <a class=\"heading-anchor-permalink\" href=\"#code-and-scientific-notation\">#</a></h3>\n<ol>\n<li><code>eqn</code> - for equations.</li>\n<li><code>code</code> - Mostly the code is wrapped by a <code>&lt;pre&gt;</code> wrapped by a <code>&lt;code&gt;</code> element.</li>\n<li><code>samp</code> The output of the code.</li>\n<li><code>var</code> represents a variable.</li>\n<li><code>sub</code> is used for subscript text. CH~4~.</li>\n<li><code>sup</code> is used for superscript text. E=mc^2^.</li>\n</ol>\n<h3 id=\"html-entities\">HTML Entities <a class=\"heading-anchor-permalink\" href=\"#html-entities\">#</a></h3>\n<ul>\n<li>As discussed before, browser ignores whitespace in HTML content.</li>\n<li>So - whitespace, operators and emojis are handled using <code>entitites</code>.</li>\n<li>Syntax for entities - there are 3 equivalent notations - <code>&amp;code;</code>, <code>&amp;#decimal;</code> and <code>&amp;#hex;</code></li>\n<li>How to use - just write the entity in the content.</li>\n</ul>\n<p>Examples\n<img src=\"../../../assets/1_Writing_stuff-image-1-a92d20ef.png\" alt=\"\"></p>\n<h3 id=\"miscellaneous\">Miscellaneous <a class=\"heading-anchor-permalink\" href=\"#miscellaneous\">#</a></h3>\n<ol>\n<li><code>&lt;kbd&gt; Ctrl+S &lt;/kbd&gt;</code> for keybindings.</li>\n<li><code>address</code> ⇒ italicizes the address.</li>\n<li>Use the <code>title</code> attribute for abbreviations and citations. This usually adds a hover tooltip to the whole HTML element.</li>\n</ol>\n<h3 id=\"demo\">Demo <a class=\"heading-anchor-permalink\" href=\"#demo\">#</a></h3>\n<pre><code class=\"language-html\">&lt;code&gt;\n\tx = 5;&lt;br&gt;\n\ty = 6;&lt;br&gt;\n\tz = x + y;\n&lt;/code&gt;\n\n&lt;!-- samp - output of the program --&gt;\n&lt;p&gt;If you input wrong value, the program will return &lt;samp&gt;Error!&lt;/samp&gt;&lt;/p&gt;\n\n&lt;!-- 2. kbd - represents keyboard input: For quick action, very important in PCs Rendered differenetly--&gt;\n&lt;p&gt;Save the document by pressing &lt;kbd&gt;Ctrl + S&lt;/kbd&gt;&lt;/p&gt;\n\n&lt;!-- var helps us render a variable differently - italicised --&gt;\nEinstein wrote: &lt;var&gt;E&lt;/var&gt; = &lt;var&gt;mc&lt;/var&gt;&lt;sup&gt;2&lt;/sup&gt;.\n</code></pre>\n<p><a href=\"output.html\">See Output</a></p>\n",
      "id": 38
    },
    {
      "path": "vault/1_HTML/2_Common_tags/2_Anchor_tag.md",
      "url": "vault/1_HTML/2_Common_tags/2_Anchor_tag.html",
      "content": "# 2. Anchor tag\nCreated Wednesday 17 June 2020\n\n### Why\nUsed for linking to other pages.\nSyntax: `<a href=\"\"> </a>` is used for making links.\n\n### What can it link to:\n1. Other URLs/html pages\n2. Files\n3. Link element on the same page, using id attribute of destination. Syntax: ``<a href=\"#idname\"></a>``. Jump, no reloads 😃️!\n4. Email address, phone number, SMS.\n\t1. Email - [``mailto:example@gmail.com``](mailto:example@gmail.com)``?subject=Subject&body=Content``\n\t2. SMS - ``sms:1234567890?body=Content``\n\t3. Phone call - ``tel:1234567890``\n\nThis opens the relevant app. subject and body may be skipped.\n* *Huge Plus*: As anchor is an open tag, We can set images to act as links, and technically anything.\n\n### Other attributes\n1. `<a target=\"_blank\"></a>` opens the link in new tab. It has 3 more values, see [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target).\n2. `<a download></a>` boolean attribute will download the file. Of course the `href` needs to be a valid file.\n\n### Relative vs absolute address/paths\n* Relative is based current folder address.\n* Absolute is based on the root (/home or analogue) folder.",
      "html": "<h1 id=\"2.-anchor-tag\">2. Anchor tag <a class=\"heading-anchor-permalink\" href=\"#2.-anchor-tag\">#</a></h1>\n<p>Created Wednesday 17 June 2020</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>Used for linking to other pages.\nSyntax: <code>&lt;a href=&quot;&quot;&gt; &lt;/a&gt;</code> is used for making links.</p>\n<h3 id=\"what-can-it-link-to%3A\">What can it link to: <a class=\"heading-anchor-permalink\" href=\"#what-can-it-link-to%3A\">#</a></h3>\n<ol>\n<li>Other URLs/html pages</li>\n<li>Files</li>\n<li>Link element on the same page, using id attribute of destination. Syntax: <code>&lt;a href=&quot;#idname&quot;&gt;&lt;/a&gt;</code>. Jump, no reloads 😃️!</li>\n<li>Email address, phone number, SMS.\n<ol>\n<li>Email - <a href=\"mailto:example@gmail.com\"><code>mailto:example@gmail.com</code></a><code>?subject=Subject&amp;body=Content</code></li>\n<li>SMS - <code>sms:1234567890?body=Content</code></li>\n<li>Phone call - <code>tel:1234567890</code></li>\n</ol>\n</li>\n</ol>\n<p>This opens the relevant app. subject and body may be skipped.</p>\n<ul>\n<li><em>Huge Plus</em>: As anchor is an open tag, We can set images to act as links, and technically anything.</li>\n</ul>\n<h3 id=\"other-attributes\">Other attributes <a class=\"heading-anchor-permalink\" href=\"#other-attributes\">#</a></h3>\n<ol>\n<li><code>&lt;a target=&quot;_blank&quot;&gt;&lt;/a&gt;</code> opens the link in new tab. It has 3 more values, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target\">MDN</a>.</li>\n<li><code>&lt;a download&gt;&lt;/a&gt;</code> boolean attribute will download the file. Of course the <code>href</code> needs to be a valid file.</li>\n</ol>\n<h3 id=\"relative-vs-absolute-address%2Fpaths\">Relative vs absolute address/paths <a class=\"heading-anchor-permalink\" href=\"#relative-vs-absolute-address%2Fpaths\">#</a></h3>\n<ul>\n<li>Relative is based current folder address.</li>\n<li>Absolute is based on the root (/home or analogue) folder.</li>\n</ul>\n",
      "id": 39
    },
    {
      "path": "vault/1_HTML/2_Common_tags/3_Lists.md",
      "url": "vault/1_HTML/2_Common_tags/3_Lists.html",
      "content": "# 3. Lists\nCreated Wednesday 17 June 2020\n\n### 3 types of lists\n1. ``ul`` - Unordered-lists\n2. ``ol`` - Ordered-lists, default is number\n3. ``dl`` - definition lists\n\n### About lists\n* Elements inside `ul`, `ol` are specified using `<li></li>` tag, where ``li`` stands for list item.\n* Elements inside dl are specified using ``dt``(definition title) and ``dd``(definition description) items.\n* Lists can be nested\n\n### Examples\n```html\n<ul>\n\t<li></li>\n\t\t<!-- We can input any thing inside a list item -->\n</ul>\n```\n```html\n<ol type=\"a\">\n\t<!-- type = i | I | a | A, default is 1 -->\n\t<li>Optimus</li>\n\t<li>Bumblebee</li>\n\t<!-- lists can be embedded -->\n</ol>\n```\n```html\n<!-- 3rd kind of lists definition -->\n<dl>\n\t<dt> Commutative </dt>\n\t<dd> Order of arguments in operation gives the same output </dd>\n\t\n\t<dt> Rational </dt>\n\t<dd> Can be represented as a ratio of whole numbers </dd>\n</dl>\n```",
      "html": "<h1 id=\"3.-lists\">3. Lists <a class=\"heading-anchor-permalink\" href=\"#3.-lists\">#</a></h1>\n<p>Created Wednesday 17 June 2020</p>\n<h3 id=\"3-types-of-lists\">3 types of lists <a class=\"heading-anchor-permalink\" href=\"#3-types-of-lists\">#</a></h3>\n<ol>\n<li><code>ul</code> - Unordered-lists</li>\n<li><code>ol</code> - Ordered-lists, default is number</li>\n<li><code>dl</code> - definition lists</li>\n</ol>\n<h3 id=\"about-lists\">About lists <a class=\"heading-anchor-permalink\" href=\"#about-lists\">#</a></h3>\n<ul>\n<li>Elements inside <code>ul</code>, <code>ol</code> are specified using <code>&lt;li&gt;&lt;/li&gt;</code> tag, where <code>li</code> stands for list item.</li>\n<li>Elements inside dl are specified using <code>dt</code>(definition title) and <code>dd</code>(definition description) items.</li>\n<li>Lists can be nested</li>\n</ul>\n<h3 id=\"examples\">Examples <a class=\"heading-anchor-permalink\" href=\"#examples\">#</a></h3>\n<pre><code class=\"language-html\">&lt;ul&gt;\n\t&lt;li&gt;&lt;/li&gt;\n\t\t&lt;!-- We can input any thing inside a list item --&gt;\n&lt;/ul&gt;\n</code></pre>\n<pre><code class=\"language-html\">&lt;ol type=&quot;a&quot;&gt;\n\t&lt;!-- type = i | I | a | A, default is 1 --&gt;\n\t&lt;li&gt;Optimus&lt;/li&gt;\n\t&lt;li&gt;Bumblebee&lt;/li&gt;\n\t&lt;!-- lists can be embedded --&gt;\n&lt;/ol&gt;\n</code></pre>\n<pre><code class=\"language-html\">&lt;!-- 3rd kind of lists definition --&gt;\n&lt;dl&gt;\n\t&lt;dt&gt; Commutative &lt;/dt&gt;\n\t&lt;dd&gt; Order of arguments in operation gives the same output &lt;/dd&gt;\n\t\n\t&lt;dt&gt; Rational &lt;/dt&gt;\n\t&lt;dd&gt; Can be represented as a ratio of whole numbers &lt;/dd&gt;\n&lt;/dl&gt;\n</code></pre>\n",
      "id": 40
    },
    {
      "path": "vault/1_HTML/2_Common_tags/4_Multimedia_tags.md",
      "url": "vault/1_HTML/2_Common_tags/4_Multimedia_tags.html",
      "content": "# 4. Multimedia tags\nCreated Tuesday 01 September 2020\n\nAvailable multimedia types are:\n1. image\n2. video\n3. audio\n4. iframe\n5. PDF via browser level core plugins\n\n### Image\n1. <**img**> - self closing image tag\n   1. src - path to image file.\n   2. alt - text for image file, displayed if image is unavailable\n   3. width - in px\n   4. height - in px\n   5. title - tooltip upon hover\n2. <**figure**></**figure**> - used when image has a caption associated with it.\n3. <**figcaption**></**figcaption**> - to add caption to image. Used in conjunction only inside a `figure` tag - [one inside one](https://www.sitepoint.com/quick-tip-the-right-way-to-use-figure-and-figcaption-elements/)\n\nExample - `figure` tag is immensely helpful.\n\n```html\n<figure>\n  <img src=\"myCat.jpg\" />\n  <figcaption>My Cat</figcaption>\n  <figure></figure>\n</figure>\n```\n\n### Video\n- Syntax: `<video src=\"\">Video not loaded text</video>`\n- Attributes:\n  1.  `src`\n  2.  `height`\n  3.  `width`\n  4.  `poster` = \"image.png\"\n  5.  `autoplay`\n  6.  `control`\n  7.  `loop`\n  8.  `muted`\n\n### Audio\n- `<audio controls>alt_text_here</audio>`\n- `<source src=\"\" type=\"audio/mpeg\" />` needs to be inside audio - can be used for sound awa transcripts\n\nmAid - self closing tags don't have a text content.\n\n### iframe\n- Used for getting a webview from a website.\n- It is not a self closing tag\n- `<iframe src=\"\">Fallback text here</iframe>`\n  1.  `src`\n  2.  `width`\n  3.  `allow=\"autoplay\"`\n  4.  `allowfullscreen`\n- Has limited scripting support for security\n- Example code\n  ```html\n  <iframe\n    src=\"https://www.youtube.com/embed/2DGxm1csQQM?\"\n    width=\"height\"\n    allow=\"autoplay\"\n    allowfullscreen\n  ></iframe>\n  ```\n  ```html\n  <iframe\n    style=\"border-radius:12px\"\n    src=\"https://open.spotify.com/embed/track/6SFAshmB8xVQZMIPrJ1qqY?utm_source=generator\"\n    width=\"100%\"\n    height=\"152\"\n    frameborder=\"0\"\n    allowfullscreen=\"\"\n    allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"\n    loading=\"lazy\"\n  ></iframe>\n  ```\n\n* Example outputs (below):\n  <iframe\n  \tsrc=\"https://www.youtube.com/embed/2DGxm1csQQM?\"\n  \twidth=\"height\"\n  \tallow=\"autoplay\"\n  \tallowfullscreenx\n    ></iframe>\n\n  <iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/6SFAshmB8xVQZMIPrJ1qqY?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n### A note on path\n- `src` path follows UNIX notation.\n- Use forward slash, even if website is on a Windows machine.\n- Relative paths are allowed - `.` and `..` can be used, relative to the current page.\n- Absolute paths are OK too, from the root of the machine.\n- Note: index.html does not determine the root in any case.\n",
      "html": "<h1 id=\"4.-multimedia-tags\">4. Multimedia tags <a class=\"heading-anchor-permalink\" href=\"#4.-multimedia-tags\">#</a></h1>\n<p>Created Tuesday 01 September 2020</p>\n<p>Available multimedia types are:</p>\n<ol>\n<li>image</li>\n<li>video</li>\n<li>audio</li>\n<li>iframe</li>\n<li>PDF via browser level core plugins</li>\n</ol>\n<h3 id=\"image\">Image <a class=\"heading-anchor-permalink\" href=\"#image\">#</a></h3>\n<ol>\n<li>&lt;<strong>img</strong>&gt; - self closing image tag\n<ol>\n<li>src - path to image file.</li>\n<li>alt - text for image file, displayed if image is unavailable</li>\n<li>width - in px</li>\n<li>height - in px</li>\n<li>title - tooltip upon hover</li>\n</ol>\n</li>\n<li>&lt;<strong>figure</strong>&gt;&lt;/<strong>figure</strong>&gt; - used when image has a caption associated with it.</li>\n<li>&lt;<strong>figcaption</strong>&gt;&lt;/<strong>figcaption</strong>&gt; - to add caption to image. Used in conjunction only inside a <code>figure</code> tag - <a href=\"https://www.sitepoint.com/quick-tip-the-right-way-to-use-figure-and-figcaption-elements/\">one inside one</a></li>\n</ol>\n<p>Example - <code>figure</code> tag is immensely helpful.</p>\n<pre><code class=\"language-html\">&lt;figure&gt;\n  &lt;img src=&quot;myCat.jpg&quot; /&gt;\n  &lt;figcaption&gt;My Cat&lt;/figcaption&gt;\n  &lt;figure&gt;&lt;/figure&gt;\n&lt;/figure&gt;\n</code></pre>\n<h3 id=\"video\">Video <a class=\"heading-anchor-permalink\" href=\"#video\">#</a></h3>\n<ul>\n<li>Syntax: <code>&lt;video src=&quot;&quot;&gt;Video not loaded text&lt;/video&gt;</code></li>\n<li>Attributes:\n<ol>\n<li><code>src</code></li>\n<li><code>height</code></li>\n<li><code>width</code></li>\n<li><code>poster</code> = “image.png”</li>\n<li><code>autoplay</code></li>\n<li><code>control</code></li>\n<li><code>loop</code></li>\n<li><code>muted</code></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"audio\">Audio <a class=\"heading-anchor-permalink\" href=\"#audio\">#</a></h3>\n<ul>\n<li><code>&lt;audio controls&gt;alt_text_here&lt;/audio&gt;</code></li>\n<li><code>&lt;source src=&quot;&quot; type=&quot;audio/mpeg&quot; /&gt;</code> needs to be inside audio - can be used for sound awa transcripts</li>\n</ul>\n<p>mAid - self closing tags don’t have a text content.</p>\n<h3 id=\"iframe\">iframe <a class=\"heading-anchor-permalink\" href=\"#iframe\">#</a></h3>\n<ul>\n<li>Used for getting a webview from a website.</li>\n<li>It is not a self closing tag</li>\n<li><code>&lt;iframe src=&quot;&quot;&gt;Fallback text here&lt;/iframe&gt;</code>\n<ol>\n<li><code>src</code></li>\n<li><code>width</code></li>\n<li><code>allow=&quot;autoplay&quot;</code></li>\n<li><code>allowfullscreen</code></li>\n</ol>\n</li>\n<li>Has limited scripting support for security</li>\n<li>Example code<pre><code class=\"language-html\">&lt;iframe\n  src=&quot;https://www.youtube.com/embed/2DGxm1csQQM?&quot;\n  width=&quot;height&quot;\n  allow=&quot;autoplay&quot;\n  allowfullscreen\n&gt;&lt;/iframe&gt;\n</code></pre>\n<pre><code class=\"language-html\">&lt;iframe\n  style=&quot;border-radius:12px&quot;\n  src=&quot;https://open.spotify.com/embed/track/6SFAshmB8xVQZMIPrJ1qqY?utm_source=generator&quot;\n  width=&quot;100%&quot;\n  height=&quot;152&quot;\n  frameborder=&quot;0&quot;\n  allowfullscreen=&quot;&quot;\n  allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;\n  loading=&quot;lazy&quot;\n&gt;&lt;/iframe&gt;\n</code></pre>\n</li>\n</ul>\n<ul>\n<li>\n<p>Example outputs (below):</p>\n<iframe\n\tsrc=\"https://www.youtube.com/embed/2DGxm1csQQM?\"\n\twidth=\"height\"\n\tallow=\"autoplay\"\n\tallowfullscreenx\n  ></iframe>\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/6SFAshmB8xVQZMIPrJ1qqY?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n</li>\n</ul>\n<h3 id=\"a-note-on-path\">A note on path <a class=\"heading-anchor-permalink\" href=\"#a-note-on-path\">#</a></h3>\n<ul>\n<li><code>src</code> path follows UNIX notation.</li>\n<li>Use forward slash, even if website is on a Windows machine.</li>\n<li>Relative paths are allowed - <code>.</code> and <code>..</code> can be used, relative to the current page.</li>\n<li>Absolute paths are OK too, from the root of the machine.</li>\n<li>Note: index.html does not determine the root in any case.</li>\n</ul>\n",
      "id": 41
    },
    {
      "path": "vault/1_HTML/2_Common_tags/5_Table.md",
      "url": "vault/1_HTML/2_Common_tags/5_Table.html",
      "content": "# 5. Table\nCreated Tuesday 01 September 2020\n\n### Tags of table\n1. `table`- basic table tag\n2. `tr` - row of table\n3. Cells\n\t1. `td` - tag for enclosing a usual data cell.\n\t2. `th` - tag for enclosing a header cell, i.e this is only used inside **``thead``**\n4. Sections - *optional*.\n\t1. `thead`- head of the table, containing headings\n\t2. `tbody` - body of the table, containing cells\n\t3. `tfoot` - the foot of the table, contains appendices and/or legends.\n\nCode example\n```html\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th> <th>Rank</th>\n\t\t</tr>\n\t</thead>\n\t\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Optimus</td>   <td>Leader</td>\n\t\t<tr>\n\t\t<tr> \n\t\t\t<td>Bumblebee</td> <td>Lieutenant</td> \n\t\t<tr>\n\t</tbody>\n</table>\n```\n\n\n### Heading Scope\nFIXME - to be included or not.\nSee <https://www.w3schools.com/tags/att_th_scope.asp> and <https://www.codecademy.com/courses/learn-html/lessons/html-tables/exercises/table-headings>\n\n### Row and column spans attributes\n* There are two attributes that merge space for a cell to take multiple row/column cells.\n* Syntax: add ``rowspan``/``colspan``=\"*number*\" to the `td`, the number defines number of cells spanned. Default value is 1 for both, 😁️.\n\n![](../../../assets/5_Table-image-1-a92d20ef.png)\nIn the diagram here\n* Hours has been rowspan set to 6, Sat F has rowspan set to 3, Lunch has colspan set to 5.\n* All other corresponding rows/columns have been removed. They are **absent**.\n\n\n### Border attrbute\nFIXME, to be included or not. I'll use CSS anyways.\nCan set this to some integer value, for the table outline.\n\n",
      "html": "<h1 id=\"5.-table\">5. Table <a class=\"heading-anchor-permalink\" href=\"#5.-table\">#</a></h1>\n<p>Created Tuesday 01 September 2020</p>\n<h3 id=\"tags-of-table\">Tags of table <a class=\"heading-anchor-permalink\" href=\"#tags-of-table\">#</a></h3>\n<ol>\n<li><code>table</code>- basic table tag</li>\n<li><code>tr</code> - row of table</li>\n<li>Cells\n<ol>\n<li><code>td</code> - tag for enclosing a usual data cell.</li>\n<li><code>th</code> - tag for enclosing a header cell, i.e this is only used inside <strong><code>thead</code></strong></li>\n</ol>\n</li>\n<li>Sections - <em>optional</em>.\n<ol>\n<li><code>thead</code>- head of the table, containing headings</li>\n<li><code>tbody</code> - body of the table, containing cells</li>\n<li><code>tfoot</code> - the foot of the table, contains appendices and/or legends.</li>\n</ol>\n</li>\n</ol>\n<p>Code example</p>\n<pre><code class=\"language-html\">&lt;table&gt;\n\t&lt;thead&gt;\n\t\t&lt;tr&gt;\n\t\t\t&lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Rank&lt;/th&gt;\n\t\t&lt;/tr&gt;\n\t&lt;/thead&gt;\n\t\n\t&lt;tbody&gt;\n\t\t&lt;tr&gt;\n\t\t\t&lt;td&gt;Optimus&lt;/td&gt;   &lt;td&gt;Leader&lt;/td&gt;\n\t\t&lt;tr&gt;\n\t\t&lt;tr&gt; \n\t\t\t&lt;td&gt;Bumblebee&lt;/td&gt; &lt;td&gt;Lieutenant&lt;/td&gt; \n\t\t&lt;tr&gt;\n\t&lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>\n<h3 id=\"heading-scope\">Heading Scope <a class=\"heading-anchor-permalink\" href=\"#heading-scope\">#</a></h3>\n<p>FIXME - to be included or not.\nSee <a href=\"https://www.w3schools.com/tags/att_th_scope.asp\">https://www.w3schools.com/tags/att_th_scope.asp</a> and <a href=\"https://www.codecademy.com/courses/learn-html/lessons/html-tables/exercises/table-headings\">https://www.codecademy.com/courses/learn-html/lessons/html-tables/exercises/table-headings</a></p>\n<h3 id=\"row-and-column-spans-attributes\">Row and column spans attributes <a class=\"heading-anchor-permalink\" href=\"#row-and-column-spans-attributes\">#</a></h3>\n<ul>\n<li>There are two attributes that merge space for a cell to take multiple row/column cells.</li>\n<li>Syntax: add <code>rowspan</code>/<code>colspan</code>=“<em>number</em>” to the <code>td</code>, the number defines number of cells spanned. Default value is 1 for both, 😁️.</li>\n</ul>\n<p><img src=\"../../../assets/5_Table-image-1-a92d20ef.png\" alt=\"\">\nIn the diagram here</p>\n<ul>\n<li>Hours has been rowspan set to 6, Sat F has rowspan set to 3, Lunch has colspan set to 5.</li>\n<li>All other corresponding rows/columns have been removed. They are <strong>absent</strong>.</li>\n</ul>\n<h3 id=\"border-attrbute\">Border attrbute <a class=\"heading-anchor-permalink\" href=\"#border-attrbute\">#</a></h3>\n<p>FIXME, to be included or not. I’ll use CSS anyways.\nCan set this to some integer value, for the table outline.</p>\n",
      "id": 42
    },
    {
      "path": "vault/1_HTML/2_Common_tags/6_Meta_tags.md",
      "url": "vault/1_HTML/2_Common_tags/6_Meta_tags.html",
      "content": "# 6. Meta tags\nCreated Tuesday 01 September 2020\n\n### Why\nThese tags are placed inside `<head></head>`. \nThey're mostly used for \n1. SEO (Search engine optimization) related things. Meta tags describe additional information, which is very useful for web crawler.\n2. Link previews of the site (like on WhatsApp)\n\n### Syntax\n```html\n<meta name=\"author\" content=\"\"/>\n```",
      "html": "<h1 id=\"6.-meta-tags\">6. Meta tags <a class=\"heading-anchor-permalink\" href=\"#6.-meta-tags\">#</a></h1>\n<p>Created Tuesday 01 September 2020</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>These tags are placed inside <code>&lt;head&gt;&lt;/head&gt;</code>.\nThey’re mostly used for</p>\n<ol>\n<li>SEO (Search engine optimization) related things. Meta tags describe additional information, which is very useful for web crawler.</li>\n<li>Link previews of the site (like on WhatsApp)</li>\n</ol>\n<h3 id=\"syntax\">Syntax <a class=\"heading-anchor-permalink\" href=\"#syntax\">#</a></h3>\n<pre><code class=\"language-html\">&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;\n</code></pre>\n",
      "id": 43
    },
    {
      "path": "vault/1_HTML/3_Containers.md",
      "url": "vault/1_HTML/3_Containers.html",
      "content": "# 3. Containers\nCreated Tuesday 01 September 2020\n\n\nThere are two \"container\" tags in HTML. These tags are used to group together elements/containers.\n\n1. `<div></div>` - block level container, automatic newline and endline.\n2. `<span></span>` - inline level container(stacks horizontally, i.e. inline)\n\n* According to the box model, both div and span change width w.r.t the content.\n* These should be used to group together related stuff, for good relatability and DX.",
      "html": "<h1 id=\"3.-containers\">3. Containers <a class=\"heading-anchor-permalink\" href=\"#3.-containers\">#</a></h1>\n<p>Created Tuesday 01 September 2020</p>\n<p>There are two “container” tags in HTML. These tags are used to group together elements/containers.</p>\n<ol>\n<li><code>&lt;div&gt;&lt;/div&gt;</code> - block level container, automatic newline and endline.</li>\n<li><code>&lt;span&gt;&lt;/span&gt;</code> - inline level container(stacks horizontally, i.e. inline)</li>\n</ol>\n<ul>\n<li>According to the box model, both div and span change width w.r.t the content.</li>\n<li>These should be used to group together related stuff, for good relatability and DX.</li>\n</ul>\n",
      "id": 44
    },
    {
      "path": "vault/1_HTML/4_Forms.md",
      "url": "vault/1_HTML/4_Forms.html",
      "content": "# 4. Forms\nCreated Tuesday 01 September 2020\n\nFIXME why, how and what of <form>\n\n### Major form tags\n1. Form - `<form></form>` - encloses the whole form\n2. Field - `<input type />`. Works as text input, number input, checkbox, radio, file upload, date input etc.\n3. Field label - `<label for=\"x\"></label>` - used before/after/enclosing an input, the value displayed. Non-optional for checkbox clickability. The `for` value is the same as `<input id/>` value.\n4. Dropdown - `<select> <option value=\"\" selected></option><option value=\"\"></option></select>` elements - the components of a dropdown.\n5. Searchable dropdown - use `datalist` instead of `select` for surrounding `option`s, and connect `datalist` to a field with `list` attribute `<input list=\"dataListId\" />`. Code example:\n\t```html\n\t<label for=\"browser\">Choose your browser from the list:</label>\n\t<input list=\"browserDropdown\" name=\"browser\" id=\"browser\">\n\n\t<datalist id=\"browserDropdown\">\n\t<!-- datalist instead of select for surrounding option-->\n\t  <option value=\"Edge\">\n\t  <option value=\"Firefox\">\n\t  <option value=\"Firefox2\">\n\t  <option value=\"Chrome\">\n\t  <option value=\"Opera\">\n\t  <option value=\"Safari\">\n\t</datalist>\n\t```\n\t<label for=\"browser\">Choose your browser from the list:</label>\n\t<input list=\"browserDropdown\" name=\"browser\" id=\"browser\">\n\n\t<datalist id=\"browserDropdown\">\n\t  <option value=\"Edge\">\n\t  <option value=\"Firefox\">\n\t  <option value=\"Firefox2\">\n\t  <option value=\"Chrome\">\n\t  <option value=\"Opera\">\n\t  <option value=\"Safari\">\n\t</datalist>\n\n### kv pairs - `name` and `value` attributes\n- name - Each form element must have a name.\n- value - attribute is skipped in HTML code if the user is going to type it.\n- name-value are passed as key-value pairs to the server on submission.\n\n```html\n<input type=\"_non-text_\" name=\"\" value=\"\">\n```\n<input type=\"text\" name=\"\"> <!-- value typed by the user -->\n\n\n### `<input />` tag attributes\n1. name\n2. value (omit if text)\n3. type - text (default), number, email, checkbox, radio, file\n4. required -boolean attribute. Omit if optional input.\n5. optional attributes - become relevant for certain `type`s.\n\n### `<input type=\"\"/>` values\n1. `text` - placeholder + maxlength\n2. `submit` - submit button\n3. `checkbox` - name + value + same id for additive linking.\n4. `radio` - name + value + \"same id\" for linking\n5. `button` - title + value\n6. `text` - placeholder + maxlength\n7. `password`\n8. `date`\n9. `file`\n10. `color`\n11. `pattern` - regex expression. Standard symbols, i.e. [a-z], [0-9], *, +, .. New in HTML5\n12. `reset` - value\n\n### `<form></form>` attributes\n- Form tag has 2 attributes\n\t1. `action=\"url_to_submit_data_to\"` will be triggered when submit is clicked. Default value is the same as current URL.\n\t2. `method= \"GET\" | \"POST\"` - POST is more secure. Default is GET.\n- For SPA's like React or even for vanilla JS web apps, neither of the above are useful. instead the `onsubmit` attribute (event handler) is useful. The form data is available as a param here, but care must be taken to prevent default behavior of navigating on submit\n\t  ```html\n\t  <form onsubmit=\"spaSubmitHandler\"></form>\n\t  \n\t  <script>\n\t\tfunction spaSubmitHandler(event) {\n\t\t  // disables default HTML behavior of navigation on submit\n\t\t  event.preventDefault();\n\t\t  \n\t\t  event.target.value.firstName; // value of input name=\"firstName\"\n\t\t}\n\t  </script>\n\t  ```\n\n### Radio - `<input type=\"radio\" />`\n- idea: select one value from a given list of values\n- Syntax: `<input type=\"radio\" />`\n- same `name` - All radio elements of the same purpose will have the same `name`\n- Labels act as extra CTAs if set up properly (label.for and input.id). No need of nesting.\n- Output (input to server) is `name: value`\n  \n```html\n<!-- Simplest, but there are no labels-->\n<!-- Name is the same since only one pair will be formed-->\n<!-- `checked` means default selection. it's optional -->\n<input type=\"radio\" name=\"gender\" value=\"male\" checked>\n<input type=\"radio\" name=\"gender\" value=\"female\">\n<input type=\"radio\" name=\"gender\" value=\"other\">\n```\n\n```html\n<!-- Practical, has labels-->\n<!-- Label becomes a CTA too - by adding labels properly (label.for and input.id), clicking the label also triggers the radio, there's no need to click the radio itself exactly-->\n<label for=\"maleLabel\">Male</label>\n<input type=\"radio\" name=\"gender\" value=\"male\" checked id=\"maleLabel\">\n\n<label for=\"femaleLabel\">Female</label>\n<input type=\"radio\" name=\"gender\" value=\"female\" id=\"femaleLabel\">\n\n<label  for=\"otherLabel\">Other</label>\n<input type=\"radio\" name=\"gender\" value=\"other\" id=\"otherLabel\">\n```\n\n\n### Checkbox - `<input type=\"checkbox\" />`\n- idea: select multiple values a given list of values\n- Syntax: `<input type=\"radio\" />`\n- same `name` - All checkbox elements for a single purpose will have the  same `name`\n- Labels act as extra CTAs if set up properly (label.for and input.id). No need of nesting.\n- Output (input to server) is `name: [value1, value2]`\n  \n```html\n<!-- Simplest, but there are no labels-->\n<!-- Name is the same since all have the same purpose (are on the same list) -->\n<!-- `checked` means default selection. it's optional -->\n<input type=\"checkbox\" name=\"meal\" value=\"burger\">\n<input type=\"checkbox\" name=\"meal\" value=\"fries\">\n<input type=\"checkbox\" name=\"meal\" value=\"soda\">\n```\n\n```html\n<!-- Practical, has labels-->\n<!-- Label becomes a CTA too - by adding labels properly (label.for and input.id), clicking the label also triggers the radio, there's no need to click the radio itself exactly-->\n<label for=\"burgerLabel\">Burger</label>\n<input type=\"checkbox\" name=\"meal\" value=\"burger\" checked id=\"burgerLabel\">\n\n<label for=\"friesLabel\">Fries</label>\n<input type=\"checkbox\" name=\"meal\" value=\"fries\" id=\"friesLabel\">\n\n<label  for=\"sodaLabel\">Soda</label>\n<input type=\"checkbox\" name=\"meal\" value=\"soda\" id=\"sodaLabel\">\n```\n\n### Form validations\nFIXME - add basic validation. Note about validation (JS code) in SPAs and how to structure the code.\n\n### File uploads\nFIXME add basics about file upload. multi/single. folder upload. JS for custom mimetypes and working with `FormData` construct of browserJS.\n\n### Accessibility principles for form\n1. Use the fieldset tag to enclose `option` tags.\n2. Use the legend tag to ask the question inside the [fieldset](https://www.freecodecamp.org/learn/responsive-web-design/applied-accessibility/wrap-radio-buttons-in-a-fieldset-element-for-better-accessibility).",
      "html": "<h1 id=\"4.-forms\">4. Forms <a class=\"heading-anchor-permalink\" href=\"#4.-forms\">#</a></h1>\n<p>Created Tuesday 01 September 2020</p>\n<p>FIXME why, how and what of <form></p>\n<h3 id=\"major-form-tags\">Major form tags <a class=\"heading-anchor-permalink\" href=\"#major-form-tags\">#</a></h3>\n<ol>\n<li>\n<p>Form - <code>&lt;form&gt;&lt;/form&gt;</code> - encloses the whole form</p>\n</li>\n<li>\n<p>Field - <code>&lt;input type /&gt;</code>. Works as text input, number input, checkbox, radio, file upload, date input etc.</p>\n</li>\n<li>\n<p>Field label - <code>&lt;label for=&quot;x&quot;&gt;&lt;/label&gt;</code> - used before/after/enclosing an input, the value displayed. Non-optional for checkbox clickability. The <code>for</code> value is the same as <code>&lt;input id/&gt;</code> value.</p>\n</li>\n<li>\n<p>Dropdown - <code>&lt;select&gt; &lt;option value=&quot;&quot; selected&gt;&lt;/option&gt;&lt;option value=&quot;&quot;&gt;&lt;/option&gt;&lt;/select&gt;</code> elements - the components of a dropdown.</p>\n</li>\n<li>\n<p>Searchable dropdown - use <code>datalist</code> instead of <code>select</code> for surrounding <code>option</code>s, and connect <code>datalist</code> to a field with <code>list</code> attribute <code>&lt;input list=&quot;dataListId&quot; /&gt;</code>. Code example:</p>\n<pre><code class=\"language-html\">&lt;label for=&quot;browser&quot;&gt;Choose your browser from the list:&lt;/label&gt;\n&lt;input list=&quot;browserDropdown&quot; name=&quot;browser&quot; id=&quot;browser&quot;&gt;\n\n&lt;datalist id=&quot;browserDropdown&quot;&gt;\n&lt;!-- datalist instead of select for surrounding option--&gt;\n  &lt;option value=&quot;Edge&quot;&gt;\n  &lt;option value=&quot;Firefox&quot;&gt;\n  &lt;option value=&quot;Firefox2&quot;&gt;\n  &lt;option value=&quot;Chrome&quot;&gt;\n  &lt;option value=&quot;Opera&quot;&gt;\n  &lt;option value=&quot;Safari&quot;&gt;\n&lt;/datalist&gt;\n</code></pre>\n<p><label for=\"browser\">Choose your browser from the list:</label>\n<input list=\"browserDropdown\" name=\"browser\" id=\"browser\"></p>\n <datalist id=\"browserDropdown\">\n   <option value=\"Edge\">\n   <option value=\"Firefox\">\n   <option value=\"Firefox2\">\n   <option value=\"Chrome\">\n   <option value=\"Opera\">\n   <option value=\"Safari\">\n </datalist>\n</li>\n</ol>\n<h3 id=\"kv-pairs---name-and-value-attributes\">kv pairs - <code>name</code> and <code>value</code> attributes <a class=\"heading-anchor-permalink\" href=\"#kv-pairs---name-and-value-attributes\">#</a></h3>\n<ul>\n<li>name - Each form element must have a name.</li>\n<li>value - attribute is skipped in HTML code if the user is going to type it.</li>\n<li>name-value are passed as key-value pairs to the server on submission.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;input type=&quot;_non-text_&quot; name=&quot;&quot; value=&quot;&quot;&gt;\n</code></pre>\n<p><input type=\"text\" name=\"\"> <!-- value typed by the user --></p>\n<h3 id=\"%3Cinput-%2F%3E-tag-attributes\"><code>&lt;input /&gt;</code> tag attributes <a class=\"heading-anchor-permalink\" href=\"#%3Cinput-%2F%3E-tag-attributes\">#</a></h3>\n<ol>\n<li>name</li>\n<li>value (omit if text)</li>\n<li>type - text (default), number, email, checkbox, radio, file</li>\n<li>required -boolean attribute. Omit if optional input.</li>\n<li>optional attributes - become relevant for certain <code>type</code>s.</li>\n</ol>\n<h3 id=\"%3Cinput-type%3D%22%22%2F%3E-values\"><code>&lt;input type=&quot;&quot;/&gt;</code> values <a class=\"heading-anchor-permalink\" href=\"#%3Cinput-type%3D%22%22%2F%3E-values\">#</a></h3>\n<ol>\n<li><code>text</code> - placeholder + maxlength</li>\n<li><code>submit</code> - submit button</li>\n<li><code>checkbox</code> - name + value + same id for additive linking.</li>\n<li><code>radio</code> - name + value + “same id” for linking</li>\n<li><code>button</code> - title + value</li>\n<li><code>text</code> - placeholder + maxlength</li>\n<li><code>password</code></li>\n<li><code>date</code></li>\n<li><code>file</code></li>\n<li><code>color</code></li>\n<li><code>pattern</code> - regex expression. Standard symbols, i.e. [a-z], [0-9], *, +, … New in HTML5</li>\n<li><code>reset</code> - value</li>\n</ol>\n<h3 id=\"%3Cform%3E%3C%2Fform%3E-attributes\"><code>&lt;form&gt;&lt;/form&gt;</code> attributes <a class=\"heading-anchor-permalink\" href=\"#%3Cform%3E%3C%2Fform%3E-attributes\">#</a></h3>\n<ul>\n<li>\n<p>Form tag has 2 attributes</p>\n<ol>\n<li><code>action=&quot;url_to_submit_data_to&quot;</code> will be triggered when submit is clicked. Default value is the same as current URL.</li>\n<li><code>method= &quot;GET&quot; | &quot;POST&quot;</code> - POST is more secure. Default is GET.</li>\n</ol>\n</li>\n<li>\n<p>For SPA’s like React or even for vanilla JS web apps, neither of the above are useful. instead the <code>onsubmit</code> attribute (event handler) is useful. The form data is available as a param here, but care must be taken to prevent default behavior of navigating on submit\n```html\n<form onsubmit=\"spaSubmitHandler\"></form></p>\n<pre><code>&lt;script&gt;\n  function spaSubmitHandler(event) {\n    // disables default HTML behavior of navigation on submit\n    event.preventDefault();\n    \n    event.target.value.firstName; // value of input name=&quot;firstName&quot;\n  }\n&lt;/script&gt;\n```\n</code></pre>\n</li>\n</ul>\n<h3 id=\"radio---%3Cinput-type%3D%22radio%22-%2F%3E\">Radio - <code>&lt;input type=&quot;radio&quot; /&gt;</code> <a class=\"heading-anchor-permalink\" href=\"#radio---%3Cinput-type%3D%22radio%22-%2F%3E\">#</a></h3>\n<ul>\n<li>idea: select one value from a given list of values</li>\n<li>Syntax: <code>&lt;input type=&quot;radio&quot; /&gt;</code></li>\n<li>same <code>name</code> - All radio elements of the same purpose will have the same <code>name</code></li>\n<li>Labels act as extra CTAs if set up properly (label.for and <a href=\"http://input.id\">input.id</a>). No need of nesting.</li>\n<li>Output (input to server) is <code>name: value</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;!-- Simplest, but there are no labels--&gt;\n&lt;!-- Name is the same since only one pair will be formed--&gt;\n&lt;!-- `checked` means default selection. it's optional --&gt;\n&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;male&quot; checked&gt;\n&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;female&quot;&gt;\n&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;other&quot;&gt;\n</code></pre>\n<pre><code class=\"language-html\">&lt;!-- Practical, has labels--&gt;\n&lt;!-- Label becomes a CTA too - by adding labels properly (label.for and input.id), clicking the label also triggers the radio, there's no need to click the radio itself exactly--&gt;\n&lt;label for=&quot;maleLabel&quot;&gt;Male&lt;/label&gt;\n&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;male&quot; checked id=&quot;maleLabel&quot;&gt;\n\n&lt;label for=&quot;femaleLabel&quot;&gt;Female&lt;/label&gt;\n&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;female&quot; id=&quot;femaleLabel&quot;&gt;\n\n&lt;label  for=&quot;otherLabel&quot;&gt;Other&lt;/label&gt;\n&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;other&quot; id=&quot;otherLabel&quot;&gt;\n</code></pre>\n<h3 id=\"checkbox---%3Cinput-type%3D%22checkbox%22-%2F%3E\">Checkbox - <code>&lt;input type=&quot;checkbox&quot; /&gt;</code> <a class=\"heading-anchor-permalink\" href=\"#checkbox---%3Cinput-type%3D%22checkbox%22-%2F%3E\">#</a></h3>\n<ul>\n<li>idea: select multiple values a given list of values</li>\n<li>Syntax: <code>&lt;input type=&quot;radio&quot; /&gt;</code></li>\n<li>same <code>name</code> - All checkbox elements for a single purpose will have the  same <code>name</code></li>\n<li>Labels act as extra CTAs if set up properly (label.for and <a href=\"http://input.id\">input.id</a>). No need of nesting.</li>\n<li>Output (input to server) is <code>name: [value1, value2]</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;!-- Simplest, but there are no labels--&gt;\n&lt;!-- Name is the same since all have the same purpose (are on the same list) --&gt;\n&lt;!-- `checked` means default selection. it's optional --&gt;\n&lt;input type=&quot;checkbox&quot; name=&quot;meal&quot; value=&quot;burger&quot;&gt;\n&lt;input type=&quot;checkbox&quot; name=&quot;meal&quot; value=&quot;fries&quot;&gt;\n&lt;input type=&quot;checkbox&quot; name=&quot;meal&quot; value=&quot;soda&quot;&gt;\n</code></pre>\n<pre><code class=\"language-html\">&lt;!-- Practical, has labels--&gt;\n&lt;!-- Label becomes a CTA too - by adding labels properly (label.for and input.id), clicking the label also triggers the radio, there's no need to click the radio itself exactly--&gt;\n&lt;label for=&quot;burgerLabel&quot;&gt;Burger&lt;/label&gt;\n&lt;input type=&quot;checkbox&quot; name=&quot;meal&quot; value=&quot;burger&quot; checked id=&quot;burgerLabel&quot;&gt;\n\n&lt;label for=&quot;friesLabel&quot;&gt;Fries&lt;/label&gt;\n&lt;input type=&quot;checkbox&quot; name=&quot;meal&quot; value=&quot;fries&quot; id=&quot;friesLabel&quot;&gt;\n\n&lt;label  for=&quot;sodaLabel&quot;&gt;Soda&lt;/label&gt;\n&lt;input type=&quot;checkbox&quot; name=&quot;meal&quot; value=&quot;soda&quot; id=&quot;sodaLabel&quot;&gt;\n</code></pre>\n<h3 id=\"form-validations\">Form validations <a class=\"heading-anchor-permalink\" href=\"#form-validations\">#</a></h3>\n<p>FIXME - add basic validation. Note about validation (JS code) in SPAs and how to structure the code.</p>\n<h3 id=\"file-uploads\">File uploads <a class=\"heading-anchor-permalink\" href=\"#file-uploads\">#</a></h3>\n<p>FIXME add basics about file upload. multi/single. folder upload. JS for custom mimetypes and working with <code>FormData</code> construct of browserJS.</p>\n<h3 id=\"accessibility-principles-for-form\">Accessibility principles for form <a class=\"heading-anchor-permalink\" href=\"#accessibility-principles-for-form\">#</a></h3>\n<ol>\n<li>Use the fieldset tag to enclose <code>option</code> tags.</li>\n<li>Use the legend tag to ask the question inside the <a href=\"https://www.freecodecamp.org/learn/responsive-web-design/applied-accessibility/wrap-radio-buttons-in-a-fieldset-element-for-better-accessibility\">fieldset</a>.</li>\n</ol>\n",
      "id": 45
    },
    {
      "path": "vault/1_HTML/5_Semantic_tags_-_Page_Sections.md",
      "url": "vault/1_HTML/5_Semantic_tags_-_Page_Sections.html",
      "content": "# 5. Semantic tags - Page Sections\nCreated Wednesday 17 June 2020\n\n- We have header, navigation, content tags and footer. The layout is like this:\n  ![](../../assets/5_Semantic_tags_-_Page_Sections-image-1-ac689b10.png)\n  The 7 semantic (fixed type of content is not fixed) tags:\n1. header - for headings, dates, name etc\n2. nav - for links to other pages\n3. \"content tags\":\n   1. main\n      1. section - encloses like content\n      2. article - a standalone article, part of no section\n   2. aside - side links, appendix\n4. footer - site footer\n",
      "html": "<h1 id=\"5.-semantic-tags---page-sections\">5. Semantic tags - Page Sections <a class=\"heading-anchor-permalink\" href=\"#5.-semantic-tags---page-sections\">#</a></h1>\n<p>Created Wednesday 17 June 2020</p>\n<ul>\n<li>We have header, navigation, content tags and footer. The layout is like this:\n<img src=\"../../assets/5_Semantic_tags_-_Page_Sections-image-1-ac689b10.png\" alt=\"\">\nThe 7 semantic (fixed type of content is not fixed) tags:</li>\n</ul>\n<ol>\n<li>header - for headings, dates, name etc</li>\n<li>nav - for links to other pages</li>\n<li>“content tags”:\n<ol>\n<li>main\n<ol>\n<li>section - encloses like content</li>\n<li>article - a standalone article, part of no section</li>\n</ol>\n</li>\n<li>aside - side links, appendix</li>\n</ol>\n</li>\n<li>footer - site footer</li>\n</ol>\n",
      "id": 46
    },
    {
      "path": "vault/2_CSS/0_index.md",
      "url": "vault/2_CSS/0_index.html",
      "content": "# 2. CSS\nCreated Friday 08 May 2020\n\nFIXME CSS w2h\n\n#### What is CSS?\n* Cascading Style Sheets\n* CSS describes how HTML elements are displayed on the **screen, paper or in other media**\n* CSS saves a **lot of work**, it can control the layout of multiple web pages all at once.\n\n![](../../assets/0_index-image-1-b8e7d93e.png)\n\n#### CSS 3\n* CSS3 is the latest version of CSS.\n\n![](../../assets/0_index-image-2-b8e7d93e.png)\n\n* In an ideal world, every browser has the same CSS behavior.\n* CSS has some animations too.\n* transition links to the pseudo classes.\n\n\n#### Links\n1. CSS Tricks - Alamnac and others\n2. caniuse.com\n3. Flexbox Froggy\n\nCSS-Tricks Alamnac is an exhaustive property list.\n\n",
      "html": "<h1 id=\"2.-css\">2. CSS <a class=\"heading-anchor-permalink\" href=\"#2.-css\">#</a></h1>\n<p>Created Friday 08 May 2020</p>\n<p>FIXME CSS w2h</p>\n<h4 id=\"what-is-css%3F\">What is CSS? <a class=\"heading-anchor-permalink\" href=\"#what-is-css%3F\">#</a></h4>\n<ul>\n<li>Cascading Style Sheets</li>\n<li>CSS describes how HTML elements are displayed on the <strong>screen, paper or in other media</strong></li>\n<li>CSS saves a <strong>lot of work</strong>, it can control the layout of multiple web pages all at once.</li>\n</ul>\n<p><img src=\"../../assets/0_index-image-1-b8e7d93e.png\" alt=\"\"></p>\n<h4 id=\"css-3\">CSS 3 <a class=\"heading-anchor-permalink\" href=\"#css-3\">#</a></h4>\n<ul>\n<li>CSS3 is the latest version of CSS.</li>\n</ul>\n<p><img src=\"../../assets/0_index-image-2-b8e7d93e.png\" alt=\"\"></p>\n<ul>\n<li>In an ideal world, every browser has the same CSS behavior.</li>\n<li>CSS has some animations too.</li>\n<li>transition links to the pseudo classes.</li>\n</ul>\n<h4 id=\"links\">Links <a class=\"heading-anchor-permalink\" href=\"#links\">#</a></h4>\n<ol>\n<li>CSS Tricks - Alamnac and others</li>\n<li><a href=\"http://caniuse.com\">caniuse.com</a></li>\n<li>Flexbox Froggy</li>\n</ol>\n<p>CSS-Tricks Alamnac is an exhaustive property list.</p>\n",
      "id": 47
    },
    {
      "path": "vault/2_CSS/1_CSS_Basics/0_index.md",
      "url": "vault/2_CSS/1_CSS_Basics/0_index.html",
      "content": "# 1. CSS Basics\nCreated Sunday 25 April 2021\n\n- The basic structure of CSS is very simple.\n- But there are lots of useful combinations. Consequently, lots of properties and values emerge.\n- CSS cannot be memorized - it's too big. Better learn the basics and use MDN for names.\n\nSee [Drawio mindmap.](css_mindmap) Here's the image.\n![](../../../assets/0_index-image-1-bfbe6ce8.png)\n",
      "html": "<h1 id=\"1.-css-basics\">1. CSS Basics <a class=\"heading-anchor-permalink\" href=\"#1.-css-basics\">#</a></h1>\n<p>Created Sunday 25 April 2021</p>\n<ul>\n<li>The basic structure of CSS is very simple.</li>\n<li>But there are lots of useful combinations. Consequently, lots of properties and values emerge.</li>\n<li>CSS cannot be memorized - it’s too big. Better learn the basics and use MDN for names.</li>\n</ul>\n<p>See <a href=\"css_mindmap\">Drawio mindmap.</a> Here’s the image.\n<img src=\"../../../assets/0_index-image-1-bfbe6ce8.png\" alt=\"\"></p>\n",
      "id": 48
    },
    {
      "path": "vault/2_CSS/1_CSS_Basics/1_Types_of_CSS.md",
      "url": "vault/2_CSS/1_CSS_Basics/1_Types_of_CSS.html",
      "content": "# 1. Types of CSS\nCreated Friday 08 May 2020\n\nThere are three ways of adding styles, in order of precedence:\n\n### 1. Inline - style attribute\nThe most immediate one\n```html\n<h1 style=\"color: blue; text-align: center;\">This is a heading</h1>\n\n<p  style=\"color: red;\">This is a paragraph.</p>\n```\nAs the element is already selected, just write the code-block's contents as attribute value.\n\n### 2. Internal - `<style>` tag in the head\ndefine the style in the html file, using `<style>` tag in the head. Contents have selectors.\n```html\n<html>\n<head>\n<style>\n\tbody {\n\tbackground-color: linen;\n\t}\n\thi {\n\tcolor: maroon;\n\tmargin-left: 40px;\n\t}\n</style>\n</head>\n\n  <body></body>\n</html>\n```\n\n### 3. External CSS - file with `link`\nA `link` tag is used. And as the CSS file is external, use `href`. It takes no input, so it is a closed tag.\n```html\n<!-- HTML -->\n<head>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />\n</head>\n```\n\t\n```css\n/* CSS file */\nh2 \n{ \n  color: red; \n}\n\np \n{ \n  color: pink;\n}\n\nspan\n{ \n  color: green;\n}\n```\n* The CSS file contents are nothing but the content of the **style **tag.\n* Each HTML file can have it's own styles.\n* If we need multiple HTMLs to have the same style, we just link it to the same css.\n* Internal and external styles are line order dependent\n\n\n### Why have a file instead of internal `<style>`\n1. Separation of concerns, very very important in CS.\n2. Collaboration - Multiple people might be working on the html. Integration will be quite difficult.\n3. DRY - don't repeat yourself.\n4. Import external CSS - Lets us get css files which are not part our code. Like GoogleFonts etc. Its not very useful to store such things in our code, since they could change at the source.",
      "html": "<h1 id=\"1.-types-of-css\">1. Types of CSS <a class=\"heading-anchor-permalink\" href=\"#1.-types-of-css\">#</a></h1>\n<p>Created Friday 08 May 2020</p>\n<p>There are three ways of adding styles, in order of precedence:</p>\n<h3 id=\"1.-inline---style-attribute\">1. Inline - style attribute <a class=\"heading-anchor-permalink\" href=\"#1.-inline---style-attribute\">#</a></h3>\n<p>The most immediate one</p>\n<pre><code class=\"language-html\">&lt;h1 style=&quot;color: blue; text-align: center;&quot;&gt;This is a heading&lt;/h1&gt;\n\n&lt;p  style=&quot;color: red;&quot;&gt;This is a paragraph.&lt;/p&gt;\n</code></pre>\n<p>As the element is already selected, just write the code-block’s contents as attribute value.</p>\n<h3 id=\"2.-internal---%3Cstyle%3E-tag-in-the-head\">2. Internal - <code>&lt;style&gt;</code> tag in the head <a class=\"heading-anchor-permalink\" href=\"#2.-internal---%3Cstyle%3E-tag-in-the-head\">#</a></h3>\n<p>define the style in the html file, using <code>&lt;style&gt;</code> tag in the head. Contents have selectors.</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n&lt;head&gt;\n&lt;style&gt;\n\tbody {\n\tbackground-color: linen;\n\t}\n\thi {\n\tcolor: maroon;\n\tmargin-left: 40px;\n\t}\n&lt;/style&gt;\n&lt;/head&gt;\n\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"3.-external-css---file-with-link\">3. External CSS - file with <code>link</code> <a class=\"heading-anchor-permalink\" href=\"#3.-external-css---file-with-link\">#</a></h3>\n<p>A <code>link</code> tag is used. And as the CSS file is external, use <code>href</code>. It takes no input, so it is a closed tag.</p>\n<pre><code class=\"language-html\">&lt;!-- HTML --&gt;\n&lt;head&gt;\n\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot; /&gt;\n&lt;/head&gt;\n</code></pre>\n<pre><code class=\"language-css\">/* CSS file */\nh2 \n{ \n  color: red; \n}\n\np \n{ \n  color: pink;\n}\n\nspan\n{ \n  color: green;\n}\n</code></pre>\n<ul>\n<li>The CSS file contents are nothing but the content of the **style **tag.</li>\n<li>Each HTML file can have it’s own styles.</li>\n<li>If we need multiple HTMLs to have the same style, we just link it to the same css.</li>\n<li>Internal and external styles are line order dependent</li>\n</ul>\n<h3 id=\"why-have-a-file-instead-of-internal-%3Cstyle%3E\">Why have a file instead of internal <code>&lt;style&gt;</code> <a class=\"heading-anchor-permalink\" href=\"#why-have-a-file-instead-of-internal-%3Cstyle%3E\">#</a></h3>\n<ol>\n<li>Separation of concerns, very very important in CS.</li>\n<li>Collaboration - Multiple people might be working on the html. Integration will be quite difficult.</li>\n<li>DRY - don’t repeat yourself.</li>\n<li>Import external CSS - Lets us get css files which are not part our code. Like GoogleFonts etc. Its not very useful to store such things in our code, since they could change at the source.</li>\n</ol>\n",
      "id": 49
    },
    {
      "path": "vault/2_CSS/1_CSS_Basics/2_CSS_Selectors.md",
      "url": "vault/2_CSS/1_CSS_Basics/2_CSS_Selectors.html",
      "content": "# 2. CSS Selectors\nCreated Friday 08 May 2020\n\nCSS selectors are used specify (\"select\") HTML elements we want to style.\n\n### Types of selectors - overview\nThere are 5 types of selectors:\n1. Simple selector - match by tagname, `id` or `class`\n2. Attribute selectors - match by attribute and/or value\n3. Combinator selector - match by relation, like sibling, parent etc.\n4. Pseudo-class selector - match by UI state, like hover.\n5. Pseudo-elements selectors - styles part of an element\n\nNote: Don't try to remember all the names, use as per requirement.\n\n### Syntax for using selectors\n- Basic\n\t```css\n\tselector_code\n\t{\n\t  prop1: value1;\n\t  prop2: value2;\n\t  prop3: value3;\n\t}\n\t```\n\n\t```css\n\tp {}\n\n\tp.class_name {}\n\n\tp#id_name {}\n\t```\n- Compound - no separator (no space and no comma). aka Logical AND.\n\t```css\n\t/* select all h2 having class \"header-text\" and \"japanese-text\"*/\n\th2.header-text.japanese-text {}\n\t/* of course, relevant h2 elements may have extra classes too, but the style will apply */\n\n\t/* select all p having class \"light-text\" and are being hovered upon */\n\tp.light-text:hover {}\n\t```\n- Selector list - comma separated (i.e. same style for multiple selectors). list items are unrelated.\n\t```css\n\tp, h2:hover, a:visited, *.light-text {\n\t  color: red;\n\t}\n\t```\n- Complex - combination of compounds. i.e. separated by descendant selectors etc.\n---\n### 1. Simple selectors\n1. tag name(p)\n2. class(**.**) (somewhat specific - group of elements - irrespective of tag)\n3. id(**#**) - (we can use it only once - single)\nNote:\t```\n* While using multiple classes in tags, they are [space](https://www.freecodecamp.org/learn/responsive-web-design/basic-css/add-borders-around-your-elements) separated. ID's are [supposed](https://www.freecodecamp.org/learn/responsive-web-design/basic-css/set-the-id-of-an-element) to be unique.\n* The order of class in the class `attribute` [does not](https://www.freecodecamp.org/learn/responsive-web-design/basic-css/override-class-declarations-by-styling-id-attributes) affect the style. The order of declaration of classes in the CSS does.\n\n\n### 2. Attribute selector\napply to all elements which have the attribute values set as the arg.\n1. only attribute ⇒\ttag[attri]`\n2. attribute with value ⇒ tag[attri=\"value\"]\n3. attribute with value like⇒ tag[attri~=\"value\"]. It's like regex ⇒ ^(starting with), $(ending with), \\*\n```css\nimg[alt] /* select all img elements that have an alt attribute*/\n{\n\tcolor:green;\n}\n\nimg[alt=\"server one down\"] /* select img elements whose alt matches*/\n{\n\tcolor:red;\n}\n\nimg[alt^=\"image-\"] /* select img elements whose alt starts with `image-`*/\n{\n\tcolor:red;\n}\n```\n\n\n### 3. Combinator selectors\nSelect element(s) in relation to a selector/element.\n\n1. Descendant selector (space) -\n\t- `A B`\n\t- all Bs inside A\n2. Child selector (>) -\n\t- `A > B`\n\t- all Bs having A as parent\n3. Successive sibling selector (~)\n\t- `A + B`\n\t- all sibling Bs after A\n4. Successor sibling selector (+) -\n\t- `A ~ B`.\n\t- the B sibling after A\n\nMAID: Successive ones are more specific. Future generation and siblings only. Just like normal trees.\n\n\n### 4. Pseudo-class selector\nmatch by UI state, like hover.  i.e. specifying style for a an element when it's in a given state.\n1. a`:link` - unvisited(unclicked) link\n2. a`:visited` - visited(clicked) link\n3. a`:hover` - (Its an event, hover the mouse over X)\n4. a`:active` - (Applies while an element is being activated by the user. e.g, the time span between the press and release of the mouse button)\n5. X`:last-child`\t(Applied to an X, if it is the last child, of an element)\n6. X`:first-child`\t(Applied to the an X, if it is the first child, of an element)\n7. X`:first-type-child` (Applied to the first X, of each parent)\n\n\n### 5. Pseudo element selectors\nselect part of an element, like first letter, first line etc\n1. ``::after` - apply just after the element. *Irrespective of the next sibling.*\n2. `::before` - apply just before the element. *Irrespective of the next sibling.*\n3. `::first-letter`\n4. `::first-line`\n5. `::selection` - the portion selected by the user.\n\n\n### Note\n1. To select all elements, use `*`. Examples:\n\t```css\n\t* { color: red; }\n\n\t*.name { color: red; }\n\t.name  { color: red; } /* equivalent */\n\n\t/* All children of p tags having class \"name\" */\n\tp > *.name { color: red; }\n\t```\n2. `!important` (not recommended) - this is a value flag.\n\t```css\n\tp {\tcolor: blue !important;}\n\t```\n3. There's nothing like pseudo ID, makes no sense as they are unique anyway.\n",
      "html": "<h1 id=\"2.-css-selectors\">2. CSS Selectors <a class=\"heading-anchor-permalink\" href=\"#2.-css-selectors\">#</a></h1>\n<p>Created Friday 08 May 2020</p>\n<p>CSS selectors are used specify (“select”) HTML elements we want to style.</p>\n<h3 id=\"types-of-selectors---overview\">Types of selectors - overview <a class=\"heading-anchor-permalink\" href=\"#types-of-selectors---overview\">#</a></h3>\n<p>There are 5 types of selectors:</p>\n<ol>\n<li>Simple selector - match by tagname, <code>id</code> or <code>class</code></li>\n<li>Attribute selectors - match by attribute and/or value</li>\n<li>Combinator selector - match by relation, like sibling, parent etc.</li>\n<li>Pseudo-class selector - match by UI state, like hover.</li>\n<li>Pseudo-elements selectors - styles part of an element</li>\n</ol>\n<p>Note: Don’t try to remember all the names, use as per requirement.</p>\n<h3 id=\"syntax-for-using-selectors\">Syntax for using selectors <a class=\"heading-anchor-permalink\" href=\"#syntax-for-using-selectors\">#</a></h3>\n<ul>\n<li>\n<p>Basic</p>\n<pre><code class=\"language-css\">selector_code\n{\n  prop1: value1;\n  prop2: value2;\n  prop3: value3;\n}\n</code></pre>\n<pre><code class=\"language-css\">p {}\n\np.class_name {}\n\np#id_name {}\n</code></pre>\n</li>\n<li>\n<p>Compound - no separator (no space and no comma). aka Logical AND.</p>\n<pre><code class=\"language-css\">/* select all h2 having class &quot;header-text&quot; and &quot;japanese-text&quot;*/\nh2.header-text.japanese-text {}\n/* of course, relevant h2 elements may have extra classes too, but the style will apply */\n\n/* select all p having class &quot;light-text&quot; and are being hovered upon */\np.light-text:hover {}\n</code></pre>\n</li>\n<li>\n<p>Selector list - comma separated (i.e. same style for multiple selectors). list items are unrelated.</p>\n<pre><code class=\"language-css\">p, h2:hover, a:visited, *.light-text {\n  color: red;\n}\n</code></pre>\n</li>\n<li>\n<p>Complex - combination of compounds. i.e. separated by descendant selectors etc.</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"1.-simple-selectors\">1. Simple selectors <a class=\"heading-anchor-permalink\" href=\"#1.-simple-selectors\">#</a></h3>\n<ol>\n<li>tag name§</li>\n<li>class(<strong>.</strong>) (somewhat specific - group of elements - irrespective of tag)</li>\n<li>id(<strong>#</strong>) - (we can use it only once - single)\nNote:\t```</li>\n</ol>\n<ul>\n<li>While using multiple classes in tags, they are <a href=\"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/add-borders-around-your-elements\">space</a> separated. ID’s are <a href=\"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/set-the-id-of-an-element\">supposed</a> to be unique.</li>\n<li>The order of class in the class <code>attribute</code> <a href=\"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/override-class-declarations-by-styling-id-attributes\">does not</a> affect the style. The order of declaration of classes in the CSS does.</li>\n</ul>\n<h3 id=\"2.-attribute-selector\">2. Attribute selector <a class=\"heading-anchor-permalink\" href=\"#2.-attribute-selector\">#</a></h3>\n<p>apply to all elements which have the attribute values set as the arg.</p>\n<ol>\n<li>only attribute ⇒\ttag[attri]`</li>\n<li>attribute with value ⇒ tag[attri=“value”]</li>\n<li>attribute with value like⇒ tag[attri~=“value”]. It’s like regex ⇒ ^(starting with), $(ending with), *</li>\n</ol>\n<pre><code class=\"language-css\">img[alt] /* select all img elements that have an alt attribute*/\n{\n\tcolor:green;\n}\n\nimg[alt=&quot;server one down&quot;] /* select img elements whose alt matches*/\n{\n\tcolor:red;\n}\n\nimg[alt^=&quot;image-&quot;] /* select img elements whose alt starts with `image-`*/\n{\n\tcolor:red;\n}\n</code></pre>\n<h3 id=\"3.-combinator-selectors\">3. Combinator selectors <a class=\"heading-anchor-permalink\" href=\"#3.-combinator-selectors\">#</a></h3>\n<p>Select element(s) in relation to a selector/element.</p>\n<ol>\n<li>Descendant selector (space) -\n<ul>\n<li><code>A B</code></li>\n<li>all Bs inside A</li>\n</ul>\n</li>\n<li>Child selector (&gt;) -\n<ul>\n<li><code>A &gt; B</code></li>\n<li>all Bs having A as parent</li>\n</ul>\n</li>\n<li>Successive sibling selector (~)\n<ul>\n<li><code>A + B</code></li>\n<li>all sibling Bs after A</li>\n</ul>\n</li>\n<li>Successor sibling selector (+) -\n<ul>\n<li><code>A ~ B</code>.</li>\n<li>the B sibling after A</li>\n</ul>\n</li>\n</ol>\n<p>MAID: Successive ones are more specific. Future generation and siblings only. Just like normal trees.</p>\n<h3 id=\"4.-pseudo-class-selector\">4. Pseudo-class selector <a class=\"heading-anchor-permalink\" href=\"#4.-pseudo-class-selector\">#</a></h3>\n<p>match by UI state, like hover.  i.e. specifying style for a an element when it’s in a given state.</p>\n<ol>\n<li>a<code>:link</code> - unvisited(unclicked) link</li>\n<li>a<code>:visited</code> - visited(clicked) link</li>\n<li>a<code>:hover</code> - (Its an event, hover the mouse over X)</li>\n<li>a<code>:active</code> - (Applies while an element is being activated by the user. e.g, the time span between the press and release of the mouse button)</li>\n<li>X<code>:last-child</code>\t(Applied to an X, if it is the last child, of an element)</li>\n<li>X<code>:first-child</code>\t(Applied to the an X, if it is the first child, of an element)</li>\n<li>X<code>:first-type-child</code> (Applied to the first X, of each parent)</li>\n</ol>\n<h3 id=\"5.-pseudo-element-selectors\">5. Pseudo element selectors <a class=\"heading-anchor-permalink\" href=\"#5.-pseudo-element-selectors\">#</a></h3>\n<p>select part of an element, like first letter, first line etc</p>\n<ol>\n<li>``::after` - apply just after the element. <em>Irrespective of the next sibling.</em></li>\n<li><code>::before</code> - apply just before the element. <em>Irrespective of the next sibling.</em></li>\n<li><code>::first-letter</code></li>\n<li><code>::first-line</code></li>\n<li><code>::selection</code> - the portion selected by the user.</li>\n</ol>\n<h3 id=\"note\">Note <a class=\"heading-anchor-permalink\" href=\"#note\">#</a></h3>\n<ol>\n<li>To select all elements, use <code>*</code>. Examples:<pre><code class=\"language-css\">* { color: red; }\n\n*.name { color: red; }\n.name  { color: red; } /* equivalent */\n\n/* All children of p tags having class &quot;name&quot; */\np &gt; *.name { color: red; }\n</code></pre>\n</li>\n<li><code>!important</code> (not recommended) - this is a value flag.<pre><code class=\"language-css\">p {\tcolor: blue !important;}\n</code></pre>\n</li>\n<li>There’s nothing like pseudo ID, makes no sense as they are unique anyway.</li>\n</ol>\n",
      "id": 50
    },
    {
      "path": "vault/2_CSS/1_CSS_Basics/3_Order_and_Inheritance_in_CSS.md",
      "url": "vault/2_CSS/1_CSS_Basics/3_Order_and_Inheritance_in_CSS.html",
      "content": "# 3. Order and Inheritance in CSS\nCreated Friday 08 May 2020\n\nReference:\n_<https://www.w3schools.com/cssref/css_selectors.asp>\n_<https://css-tricks.com/almanac/>\n\n- Explicit code is given the highest priority, because most CSS are from libraries.\n\nWhat seletors win out in the cascade depends on the following order:\n1. **Importance** (!important)\n2. Inline styles\n3. IDs\n4. Classes, attributes and pseudo-classes\n5. Elements and pseudo-elements\n\nObviously - Top down code** order** (top down code - This applies to link tag in HTML too, if using multiple css files)\n\n**Nutshell**: The tags which will probably cover the least area are the most important.\n\nWhat this means: If we have two styles which potentially apply to the same elements, the specific one is taken, irrespective of line order. If they have the same specificity, order breaks the tie. **Specificity is manual**, i.e \\* is the least specific.\nTry these resources:\n1. [Specificity ](https://specificity.keegan.st/)[Calculator](https://specificity.keegan.st/)\n\n---\n\n1. It's a good practice to keep the CSS file contents in the order of specificity.\n\n### Inheritance in CSS\n- Elements get inherit the CSS styles of their parents\n",
      "html": "<h1 id=\"3.-order-and-inheritance-in-css\">3. Order and Inheritance in CSS <a class=\"heading-anchor-permalink\" href=\"#3.-order-and-inheritance-in-css\">#</a></h1>\n<p>Created Friday 08 May 2020</p>\n<p>Reference:\n_<a href=\"https://www.w3schools.com/cssref/css_selectors.asp\">https://www.w3schools.com/cssref/css_selectors.asp</a>\n_<a href=\"https://css-tricks.com/almanac/\">https://css-tricks.com/almanac/</a></p>\n<ul>\n<li>Explicit code is given the highest priority, because most CSS are from libraries.</li>\n</ul>\n<p>What seletors win out in the cascade depends on the following order:</p>\n<ol>\n<li><strong>Importance</strong> (!important)</li>\n<li>Inline styles</li>\n<li>IDs</li>\n<li>Classes, attributes and pseudo-classes</li>\n<li>Elements and pseudo-elements</li>\n</ol>\n<p>Obviously - Top down code** order** (top down code - This applies to link tag in HTML too, if using multiple css files)</p>\n<p><strong>Nutshell</strong>: The tags which will probably cover the least area are the most important.</p>\n<p>What this means: If we have two styles which potentially apply to the same elements, the specific one is taken, irrespective of line order. If they have the same specificity, order breaks the tie. <strong>Specificity is manual</strong>, i.e * is the least specific.\nTry these resources:</p>\n<ol>\n<li><a href=\"https://specificity.keegan.st/\">Specificity </a><a href=\"https://specificity.keegan.st/\">Calculator</a></li>\n</ol>\n<hr>\n<ol>\n<li>It’s a good practice to keep the CSS file contents in the order of specificity.</li>\n</ol>\n<h3 id=\"inheritance-in-css\">Inheritance in CSS <a class=\"heading-anchor-permalink\" href=\"#inheritance-in-css\">#</a></h3>\n<ul>\n<li>Elements get inherit the CSS styles of their parents</li>\n</ul>\n",
      "id": 51
    },
    {
      "path": "vault/2_CSS/1_CSS_Basics/4_Critical_Render_Path.md",
      "url": "vault/2_CSS/1_CSS_Basics/4_Critical_Render_Path.html",
      "content": "# 4. Critical Render Path\nCreated Tuesday 16 June 2020\n\n- We always should know how things work underneath the hood to know how things happen.\n\nSuppose we have the following setup:\n![](../../../assets/4_Critical_Render_Path-image-1-bfbe6ce8.png)\nWe're using an external google-font style file.\nThe process:\n1. HTML is sent - It requests for the CSS we built.\n\n![](../../../assets/4_Critical_Render_Path-image-2-bfbe6ce8.png)\n![](../../../assets/4_Critical_Render_Path-image-3-bfbe6ce8.png)\n\n2. It then encounters the google-style sheet, and requests google.com.\n\n![](../../../assets/4_Critical_Render_Path-image-4-bfbe6ce8.png)\n\n- As this is being done, the first CSS file **could **be used - But this is not done, the items using CSS are not rendered until the CSS is there.\n- CSS is a **render blocking file**\n- We can avoid this by:\n  1.  Have our own font files\n  2.  Keeping the CSS file short - Minifying(removes all whitespaces, a one liner, used in js too)\n",
      "html": "<h1 id=\"4.-critical-render-path\">4. Critical Render Path <a class=\"heading-anchor-permalink\" href=\"#4.-critical-render-path\">#</a></h1>\n<p>Created Tuesday 16 June 2020</p>\n<ul>\n<li>We always should know how things work underneath the hood to know how things happen.</li>\n</ul>\n<p>Suppose we have the following setup:\n<img src=\"../../../assets/4_Critical_Render_Path-image-1-bfbe6ce8.png\" alt=\"\">\nWe’re using an external google-font style file.\nThe process:</p>\n<ol>\n<li>HTML is sent - It requests for the CSS we built.</li>\n</ol>\n<p><img src=\"../../../assets/4_Critical_Render_Path-image-2-bfbe6ce8.png\" alt=\"\">\n<img src=\"../../../assets/4_Critical_Render_Path-image-3-bfbe6ce8.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>It then encounters the google-style sheet, and requests <a href=\"http://google.com\">google.com</a>.</li>\n</ol>\n<p><img src=\"../../../assets/4_Critical_Render_Path-image-4-bfbe6ce8.png\" alt=\"\"></p>\n<ul>\n<li>As this is being done, the first CSS file **could **be used - But this is not done, the items using CSS are not rendered until the CSS is there.</li>\n<li>CSS is a <strong>render blocking file</strong></li>\n<li>We can avoid this by:\n<ol>\n<li>Have our own font files</li>\n<li>Keeping the CSS file short - Minifying(removes all whitespaces, a one liner, used in js too)</li>\n</ol>\n</li>\n</ul>\n",
      "id": 52
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/0_Miscellaneous.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/0_Miscellaneous.html",
      "content": "# 0. Miscellaneous\nCreated Monday 15 June 2020\n\nMisc properties:\n1. opacity: 0.3 ∈ \\[0, 1\\], 1 for the most opaque. This applies to the whole element(and its children).\n2. `cursor` - `default`, `grab`, `grabbing`, `pointer`, `progress`.\n3. To keep aspect ratio for images, set `image-width:100%`. Especially useful in case of flexbox.\n4. `user-select`: `none` disables selection of text, good for making pages non-edit like.",
      "html": "<h1 id=\"0.-miscellaneous\">0. Miscellaneous <a class=\"heading-anchor-permalink\" href=\"#0.-miscellaneous\">#</a></h1>\n<p>Created Monday 15 June 2020</p>\n<p>Misc properties:</p>\n<ol>\n<li>opacity: 0.3 ∈ [0, 1], 1 for the most opaque. This applies to the whole element(and its children).</li>\n<li><code>cursor</code> - <code>default</code>, <code>grab</code>, <code>grabbing</code>, <code>pointer</code>, <code>progress</code>.</li>\n<li>To keep aspect ratio for images, set <code>image-width:100%</code>. Especially useful in case of flexbox.</li>\n<li><code>user-select</code>: <code>none</code> disables selection of text, good for making pages non-edit like.</li>\n</ol>\n",
      "id": 53
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/1_Size.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/1_Size.html",
      "content": "# 1. Size\nCreated Monday 15 June 2020\n\n### Absolute units\nThis is a physical size like **px**, **mm**, **cm**, **inch**, **pt**(points 1/72 inch)\n\n### Relative units\nUnits relative to the parents property(e.g relative to parents font size)\n\nexamples:\n- %(the best),\n- em - relative to the parent font size.\n- rem - (root em), relative to the OS font size.\nem vs % : em changes if the font size is changed by the user. But not the zoom level or screen size, while percentage accomodates for zoom too.\nRemember __1em = 12pt = 16px = 100%__\n<https://kyleschaeffer.com/css-font-size-em-vs-px-vs-pt-vs-percent>\nSo there are 5 units:\n1. em (default size) or rem\n2. px - pixels\n3. % - percentage\n4. pt - points\n\n\n```css\np.size {\n\tfont-size: 20; /* pixel by default*/\n\tfont-size:20 px; /*space is an error*/\n\tfont-size:20px; /*correct*/\n\tfont-size:20em; /*20 times the default size of the page*/\n\tfont-size: 200%; /*This is the latest/*\n\n\t/* Note we don't have a spaces in between\n\tem is the default size. Other common size units are\n\t0. em(default size value)\n\ti. px(pixels)\n\tii. %(percentage)\n\tiii. pt(points)\n\t*/\n\n\t/* Note that a CSS is read top to bottom , hence the latest changes are at the last, i.e they are overwrittem.\n\tJust like any other programming language.\n\t */\n}\n```\n",
      "html": "<h1 id=\"1.-size\">1. Size <a class=\"heading-anchor-permalink\" href=\"#1.-size\">#</a></h1>\n<p>Created Monday 15 June 2020</p>\n<h3 id=\"absolute-units\">Absolute units <a class=\"heading-anchor-permalink\" href=\"#absolute-units\">#</a></h3>\n<p>This is a physical size like <strong>px</strong>, <strong>mm</strong>, <strong>cm</strong>, <strong>inch</strong>, <strong>pt</strong>(points 1/72 inch)</p>\n<h3 id=\"relative-units\">Relative units <a class=\"heading-anchor-permalink\" href=\"#relative-units\">#</a></h3>\n<p>Units relative to the parents property(e.g relative to parents font size)</p>\n<p>examples:</p>\n<ul>\n<li>%(the best),</li>\n<li>em - relative to the parent font size.</li>\n<li>rem - (root em), relative to the OS font size.\nem vs % : em changes if the font size is changed by the user. But not the zoom level or screen size, while percentage accomodates for zoom too.\nRemember <strong>1em = 12pt = 16px = 100%</strong>\n<a href=\"https://kyleschaeffer.com/css-font-size-em-vs-px-vs-pt-vs-percent\">https://kyleschaeffer.com/css-font-size-em-vs-px-vs-pt-vs-percent</a>\nSo there are 5 units:</li>\n</ul>\n<ol>\n<li>em (default size) or rem</li>\n<li>px - pixels</li>\n<li>% - percentage</li>\n<li>pt - points</li>\n</ol>\n<pre><code class=\"language-css\">p.size {\n\tfont-size: 20; /* pixel by default*/\n\tfont-size:20 px; /*space is an error*/\n\tfont-size:20px; /*correct*/\n\tfont-size:20em; /*20 times the default size of the page*/\n\tfont-size: 200%; /*This is the latest/*\n\n\t/* Note we don't have a spaces in between\n\tem is the default size. Other common size units are\n\t0. em(default size value)\n\ti. px(pixels)\n\tii. %(percentage)\n\tiii. pt(points)\n\t*/\n\n\t/* Note that a CSS is read top to bottom , hence the latest changes are at the last, i.e they are overwrittem.\n\tJust like any other programming language.\n\t */\n}\n</code></pre>\n",
      "id": 54
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/2_Colors.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/2_Colors.html",
      "content": "# 2. Colors\nCreated Monday 15 June 2020\n\nThere are three ways to define color:\n1. **rgb(r,g,b)** - where 0 ≤r, g, b ≤ 255.\n2. **#pqrstu** - 0≤ all values ≤ f\n3. **Names** - blue, green, fuchsia\n4. **hsl(hue, saturation, lightness)** - hue ∈ [0, 360), saturation ∈ [0, 100], lightness ∈ [0, 100]\n5. **hsla(hue, saturation, lightness, alpha)** - for transparency\n\nNotes:\n1. For grayscale - use the same color for all red, green and blue.\n\n![](../../../../assets/2_Colors-image-1-2b91d6c1.png)\n\n2. There are about 140 names supported by HTML/CSS\n3. **rgba(r,g,b, alpha) **is used 0≤α≤1 to allow transparency with alpha = **1 being the most opaque**. It's got nothing to do with the rgb values.\n4. Shortened hex(only some cases such as #AABBCC becomes #ABC)\n",
      "html": "<h1 id=\"2.-colors\">2. Colors <a class=\"heading-anchor-permalink\" href=\"#2.-colors\">#</a></h1>\n<p>Created Monday 15 June 2020</p>\n<p>There are three ways to define color:</p>\n<ol>\n<li><strong>rgb(r,g,b)</strong> - where 0 ≤r, g, b ≤ 255.</li>\n<li><strong>#pqrstu</strong> - 0≤ all values ≤ f</li>\n<li><strong>Names</strong> - blue, green, fuchsia</li>\n<li><strong>hsl(hue, saturation, lightness)</strong> - hue ∈ [0, 360), saturation ∈ [0, 100], lightness ∈ [0, 100]</li>\n<li><strong>hsla(hue, saturation, lightness, alpha)</strong> - for transparency</li>\n</ol>\n<p>Notes:</p>\n<ol>\n<li>For grayscale - use the same color for all red, green and blue.</li>\n</ol>\n<p><img src=\"../../../../assets/2_Colors-image-1-2b91d6c1.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>There are about 140 names supported by HTML/CSS</li>\n<li>**rgba(r,g,b, alpha) **is used 0≤α≤1 to allow transparency with alpha = <strong>1 being the most opaque</strong>. It’s got nothing to do with the rgb values.</li>\n<li>Shortened hex(only some cases such as #AABBCC becomes #ABC)</li>\n</ol>\n",
      "id": 55
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/3_background-image.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/3_background-image.html",
      "content": "# 3. background-image\nCreated Monday 15 June 2020\n\n### Syntax\n```css\nbody {\n  background-image: url(\"paper.gif\"); /* url('path-to-image') */\n}\n```\n\n- See to it that the background doesn't make the text unreadable\n\n### Variations\n1. Prevent repeating - background-image repeats an image both horizontally and vertically, to control this use:\n   ```css\n   body {\n   \tbackground-image: url(\"something\");\n   \tbackground-repeat: repeat-x; /* or repeat-y or no-repeat */*\n   }\n   ```\n2. Specify the position:\n   ```css\n   body {\n     background-image: url(something);\n     background-attachment: fixed; /*scroll, background does not change*/\n   }\n   ```\n3. Fill value - `background-size: cover | fill` etc.\n",
      "html": "<h1 id=\"3.-background-image\">3. background-image <a class=\"heading-anchor-permalink\" href=\"#3.-background-image\">#</a></h1>\n<p>Created Monday 15 June 2020</p>\n<h3 id=\"syntax\">Syntax <a class=\"heading-anchor-permalink\" href=\"#syntax\">#</a></h3>\n<pre><code class=\"language-css\">body {\n  background-image: url(&quot;paper.gif&quot;); /* url('path-to-image') */\n}\n</code></pre>\n<ul>\n<li>See to it that the background doesn’t make the text unreadable</li>\n</ul>\n<h3 id=\"variations\">Variations <a class=\"heading-anchor-permalink\" href=\"#variations\">#</a></h3>\n<ol>\n<li>Prevent repeating - background-image repeats an image both horizontally and vertically, to control this use:<pre><code class=\"language-css\">body {\n\tbackground-image: url(&quot;something&quot;);\n\tbackground-repeat: repeat-x; /* or repeat-y or no-repeat */*\n}\n</code></pre>\n</li>\n<li>Specify the position:<pre><code class=\"language-css\">body {\n  background-image: url(something);\n  background-attachment: fixed; /*scroll, background does not change*/\n}\n</code></pre>\n</li>\n<li>Fill value - <code>background-size: cover | fill</code> etc.</li>\n</ol>\n",
      "id": 56
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/4_Fonts.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/4_Fonts.html",
      "content": "# 4. Fonts\nCreated Tuesday 16 June 2020\n\n### which font\n- Syntax: `font-family: Menlo, Montserrat, 'Segoue UI', serif;`\n- the latter ones are fallbacks if a previous one isn't available.\n![](../../../../assets/4_Fonts-image-1-2b91d6c1.png)\nCSS font families:\n1. Generic family: serif or monospace or sans-serif\n2. font-family: a specific family viz apple, Arial, Times New Roman\n\nNote:\n1. For multi-worded families, use quotes (single or double both are OK).\n2. More than one fonts can be seperated by commas. Leftmost is used, if available.\n3. Sans-serif are considered much easier to read on screens\n4. Many fonts are available at sites, like Google Fonts. They provide CSS file links, to be used in the `<link href=\"\" />`.\n\n\n### Font UI properties\n1. `color`: color of the font.\n2. `font-size`: kpx; // shouldn't be used for headings, as we have h1 to h6 for them, decreasing.\n3. `font-weight`: normal or bold\n4. `font-style`: normal, italic or oblique\n5. `font-variant`: normal or small caps(makes everything uppercase but height is preserved)",
      "html": "<h1 id=\"4.-fonts\">4. Fonts <a class=\"heading-anchor-permalink\" href=\"#4.-fonts\">#</a></h1>\n<p>Created Tuesday 16 June 2020</p>\n<h3 id=\"which-font\">which font <a class=\"heading-anchor-permalink\" href=\"#which-font\">#</a></h3>\n<ul>\n<li>Syntax: <code>font-family: Menlo, Montserrat, 'Segoue UI', serif;</code></li>\n<li>the latter ones are fallbacks if a previous one isn’t available.\n<img src=\"../../../../assets/4_Fonts-image-1-2b91d6c1.png\" alt=\"\">\nCSS font families:</li>\n</ul>\n<ol>\n<li>Generic family: serif or monospace or sans-serif</li>\n<li>font-family: a specific family viz apple, Arial, Times New Roman</li>\n</ol>\n<p>Note:</p>\n<ol>\n<li>For multi-worded families, use quotes (single or double both are OK).</li>\n<li>More than one fonts can be seperated by commas. Leftmost is used, if available.</li>\n<li>Sans-serif are considered much easier to read on screens</li>\n<li>Many fonts are available at sites, like Google Fonts. They provide CSS file links, to be used in the <code>&lt;link href=&quot;&quot; /&gt;</code>.</li>\n</ol>\n<h3 id=\"font-ui-properties\">Font UI properties <a class=\"heading-anchor-permalink\" href=\"#font-ui-properties\">#</a></h3>\n<ol>\n<li><code>color</code>: color of the font.</li>\n<li><code>font-size</code>: kpx; // shouldn’t be used for headings, as we have h1 to h6 for them, decreasing.</li>\n<li><code>font-weight</code>: normal or bold</li>\n<li><code>font-style</code>: normal, italic or oblique</li>\n<li><code>font-variant</code>: normal or small caps(makes everything uppercase but height is preserved)</li>\n</ol>\n",
      "id": 57
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/5_Text_Formatting.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/5_Text_Formatting.html",
      "content": "# 5. Text Formatting\nCreated Tuesday 16 June 2020\n\nProperties:\n1. `color`, according to W3C, background-color must also be defined.\n2. `text-decoration`: **none**, **line-through**, **overline**, **underline. **Don't underline links.\n3. `text-align`: **left**, **center** or **right**\n4. `text-tranform`: **uppercase, lowercase, capitalize** - does affect the on screen text, very useful for keeping the code and the content different 5.` text-indent`: **50px; **Only for the first line of text.\n5. `vertical-align`: top, bottom, **middle**(not center)\n6. `direction`: **rtl**. Also needs unicode-bidi:bidi-override\n7. `word-spacing`: **k px; **//** default_spacing+=k**\n8. `letter-spacing`: **k px; **// default_spacing+=k\n9. `line-height`: **k px; **// default_spacing+=k\n10. `white-space`: nowrap; handles how whitespace is managed\n11. `text-shadow`: horizontal vertical color blur; // only shorthand notation accepted\n\n---\n\nText talk about the group. Font defines the individual(glyph)\n",
      "html": "<h1 id=\"5.-text-formatting\">5. Text Formatting <a class=\"heading-anchor-permalink\" href=\"#5.-text-formatting\">#</a></h1>\n<p>Created Tuesday 16 June 2020</p>\n<p>Properties:</p>\n<ol>\n<li><code>color</code>, according to W3C, background-color must also be defined.</li>\n<li><code>text-decoration</code>: <strong>none</strong>, <strong>line-through</strong>, <strong>overline</strong>, **underline. **Don’t underline links.</li>\n<li><code>text-align</code>: <strong>left</strong>, <strong>center</strong> or <strong>right</strong></li>\n<li><code>text-tranform</code>: <strong>uppercase, lowercase, capitalize</strong> - does affect the on screen text, very useful for keeping the code and the content different 5.<code>text-indent</code>: **50px; **Only for the first line of text.</li>\n<li><code>vertical-align</code>: top, bottom, <strong>middle</strong>(not center)</li>\n<li><code>direction</code>: <strong>rtl</strong>. Also needs unicode-bidi:bidi-override</li>\n<li><code>word-spacing</code>: <strong>k px; <strong>//</strong> default_spacing+=k</strong></li>\n<li><code>letter-spacing</code>: **k px; **// default_spacing+=k</li>\n<li><code>line-height</code>: **k px; **// default_spacing+=k</li>\n<li><code>white-space</code>: nowrap; handles how whitespace is managed</li>\n<li><code>text-shadow</code>: horizontal vertical color blur; // only shorthand notation accepted</li>\n</ol>\n<hr>\n<p>Text talk about the group. Font defines the individual(glyph)</p>\n",
      "id": 58
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/6_Icons.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/6_Icons.html",
      "content": "# 6. Icons\nCreated Tuesday 16 June 2020\n\n- How to add icons to a webpage? We use a font library like Font Awesome.\n- Tag needs to a <span> or an <i> for this to work. (FIXME: what?)\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>\n  </head>\n  <body>\n    <i class=\"fas fa-cloud\"></i>\n    <i class=\"fas fa-heart\"></i>\n    <i class=\"fas fa-car\"></i>\n    <i class=\"fas fa-file\"></i>\n    <i class=\"fas fa-bars\"></i>\n  </body>\n</html>\n```\n\nUseful icons:\n1. FontAwesome Icons: `<script src=\"<https://kit.fontawesome.com/a076d05399.js\"></script>`\n2. BootStrap Icons: `<link rel=\"stylesheet\" href=\"<https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">`\n3. Google Icons: `<link rel=\"stylesheet\" href=\"<https://fonts.googleapis.com/icon?family=Material+Icons\">`\n",
      "html": "<h1 id=\"6.-icons\">6. Icons <a class=\"heading-anchor-permalink\" href=\"#6.-icons\">#</a></h1>\n<p>Created Tuesday 16 June 2020</p>\n<ul>\n<li>How to add icons to a webpage? We use a font library like Font Awesome.</li>\n<li>Tag needs to a <span> or an <i> for this to work. (FIXME: what?)</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=&quot;https://kit.fontawesome.com/a076d05399.js&quot;&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;i class=&quot;fas fa-cloud&quot;&gt;&lt;/i&gt;\n    &lt;i class=&quot;fas fa-heart&quot;&gt;&lt;/i&gt;\n    &lt;i class=&quot;fas fa-car&quot;&gt;&lt;/i&gt;\n    &lt;i class=&quot;fas fa-file&quot;&gt;&lt;/i&gt;\n    &lt;i class=&quot;fas fa-bars&quot;&gt;&lt;/i&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Useful icons:</p>\n<ol>\n<li>FontAwesome Icons: <code>&lt;script src=&quot;&lt;https://kit.fontawesome.com/a076d05399.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>BootStrap Icons: <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;&gt;</code></li>\n<li>Google Icons: <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;https://fonts.googleapis.com/icon?family=Material+Icons&quot;&gt;</code></li>\n</ol>\n",
      "id": 59
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/7_Links.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/1_Data_based/7_Links.html",
      "content": "# 7. Links\nCreated Tuesday 16 June 2020\n\n- Links can be styled using `a` with some pseudoclasses:\n\t```css\n\ta:hover, a:active, a:visited {\n\t  background-color: red;\n\t}\n\t```\n* *Buttons* are nothing but padded elements. FIXME: there's more to buttons, see https://github.com/sanjar-notes/web_dev_fundamentals/issues/67\n\t```css\n\ta:link, a:visited {\n\t  background-color: #f44336;\n\t  color: white;\n\t  padding: 14px 25px;\n\t  text-align: center;\n\t  text-decoration: none;\n\t  display: inline-block;\n\t}\n\t```\n",
      "html": "<h1 id=\"7.-links\">7. Links <a class=\"heading-anchor-permalink\" href=\"#7.-links\">#</a></h1>\n<p>Created Tuesday 16 June 2020</p>\n<ul>\n<li>Links can be styled using <code>a</code> with some pseudoclasses:<pre><code class=\"language-css\">a:hover, a:active, a:visited {\n  background-color: red;\n}\n</code></pre>\n</li>\n</ul>\n<ul>\n<li><em>Buttons</em> are nothing but padded elements. FIXME: there’s more to buttons, see <a href=\"https://github.com/sanjar-notes/web_dev_fundamentals/issues/67\">https://github.com/sanjar-notes/web_dev_fundamentals/issues/67</a><pre><code class=\"language-css\">a:link, a:visited {\n  background-color: #f44336;\n  color: white;\n  padding: 14px 25px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n}\n</code></pre>\n</li>\n</ul>\n",
      "id": 60
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/4_List_styles.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/4_List_styles.html",
      "content": "# 4. List styles\nCreated Tuesday 16 June 2020\n\n1. `list-style-type`: `circle | square | upper-alpha | lower-alpha | upper-roman | lower-roman | lower-greek`. Default for `<ol>` are numbers.\n   - This is the CSS way\n   - HTML way is to use the `type=1 | i | a | A` attribute.\n1. `list-style-image`: url() - sets the image as list item marker. For custom bullet icons.\n1. `list-style-position`: outside or inside\n",
      "html": "<h1 id=\"4.-list-styles\">4. List styles <a class=\"heading-anchor-permalink\" href=\"#4.-list-styles\">#</a></h1>\n<p>Created Tuesday 16 June 2020</p>\n<ol>\n<li><code>list-style-type</code>: <code>circle | square | upper-alpha | lower-alpha | upper-roman | lower-roman | lower-greek</code>. Default for <code>&lt;ol&gt;</code> are numbers.\n<ul>\n<li>This is the CSS way</li>\n<li>HTML way is to use the <code>type=1 | i | a | A</code> attribute.</li>\n</ul>\n</li>\n<li><code>list-style-image</code>: url() - sets the image as list item marker. For custom bullet icons.</li>\n<li><code>list-style-position</code>: outside or inside</li>\n</ol>\n",
      "id": 61
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/5_CSS_tables.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/5_CSS_tables.html",
      "content": "# 5. CSS tables\nCreated Tuesday 16 June 2020\n\n\n* Specify borders\n* border-collapse: collapse; for the table element makes a single\n\t![](../../../assets/5_CSS_tables-image-1-de232e28.png)\n* For row separators its better to set up `th` and `td`, instead of `tr`. This way we don't need to manage the rows seperately and can shift cells if required. tr is only for keeping them together.\n* `:hover` pseudo class can be used to give focus for the cursor.\n* **striped table**, using nth-child(even) psuedo element\n* Responsive web table: the scroll bar appears only for the table - wrap it in a container and set **overflow-x: auto;**\n* We can set the column widths, using **table-layout**: auto, fixed or initial\n![](../../../assets/5_CSS_tables-image-2-de232e28.png)\n\nFIXME: add learnings from Sept 2022",
      "html": "<h1 id=\"5.-css-tables\">5. CSS tables <a class=\"heading-anchor-permalink\" href=\"#5.-css-tables\">#</a></h1>\n<p>Created Tuesday 16 June 2020</p>\n<ul>\n<li>Specify borders</li>\n<li>border-collapse: collapse; for the table element makes a single\n<img src=\"../../../assets/5_CSS_tables-image-1-de232e28.png\" alt=\"\"></li>\n<li>For row separators its better to set up <code>th</code> and <code>td</code>, instead of <code>tr</code>. This way we don’t need to manage the rows seperately and can shift cells if required. tr is only for keeping them together.</li>\n<li><code>:hover</code> pseudo class can be used to give focus for the cursor.</li>\n<li><strong>striped table</strong>, using nth-child(even) psuedo element</li>\n<li>Responsive web table: the scroll bar appears only for the table - wrap it in a container and set <strong>overflow-x: auto;</strong></li>\n<li>We can set the column widths, using <strong>table-layout</strong>: auto, fixed or initial\n<img src=\"../../../assets/5_CSS_tables-image-2-de232e28.png\" alt=\"\"></li>\n</ul>\n<p>FIXME: add learnings from Sept 2022</p>\n",
      "id": 62
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/0_index.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/0_index.html",
      "content": "# 6. CSS extras - IGN\nCreated Tuesday 16 June 2020\n\nTwo things constitute responsive UI:\n1. Website is responsive to window changes etc.\n2. Website works in the responsive way across devices.\n\n\nWhat is responsiveness - changing of layout and other lengths to accomodate changes in window size/device.\n\n",
      "html": "<h1 id=\"6.-css-extras---ign\">6. CSS extras - IGN <a class=\"heading-anchor-permalink\" href=\"#6.-css-extras---ign\">#</a></h1>\n<p>Created Tuesday 16 June 2020</p>\n<p>Two things constitute responsive UI:</p>\n<ol>\n<li>Website is responsive to window changes etc.</li>\n<li>Website works in the responsive way across devices.</li>\n</ol>\n<p>What is responsiveness - changing of layout and other lengths to accomodate changes in window size/device.</p>\n",
      "id": 63
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/1_Media_queries.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/1_Media_queries.html",
      "content": "# 1. Media queries\nCreated Tuesday 01 September 2020\n\nMedia queries are very useful for responsive devices.\nSyntax:\n<style>\n@media(condition)\n{\n/_ add valid CSS_/\np{}\nh1{}\n}\n</style>\n\nSome common conditions are:\n1. max-width:100px ⇒ 0 to 100px\n2. min-width:100px ⇒ 100px to ∞\n3. print ⇒ Hide some things when the page is printed\n",
      "html": "<h1 id=\"1.-media-queries\">1. Media queries <a class=\"heading-anchor-permalink\" href=\"#1.-media-queries\">#</a></h1>\n<p>Created Tuesday 01 September 2020</p>\n<p>Media queries are very useful for responsive devices.\nSyntax:</p>\n<style>\n@media(condition)\n{\n/_ add valid CSS_/\np{}\nh1{}\n}\n</style>\n<p>Some common conditions are:</p>\n<ol>\n<li>max-width:100px ⇒ 0 to 100px</li>\n<li>min-width:100px ⇒ 100px to ∞</li>\n<li>print ⇒ Hide some things when the page is printed</li>\n</ol>\n",
      "id": 64
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/2_auto_keyword.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/2_auto_keyword.html",
      "content": "# 2. auto keyword\nCreated Tuesday 01 September 2020\n\n\n* The **auto** keyword means that the property will be evaluated based on other constraints or the space taken by the content.\n* The box model is a constraint in CSS.\n* Tags have their own constraints.\n\ne.g <https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-principles/make-an-image-responsive>\n\timg\n\t{\n\t\tmax-width:100%; // width<=100%, i.e it will cover the whole page at any size\n\t\theight:auto; // depending on the page width\n\t}\n\t\n\n",
      "html": "<h1 id=\"2.-auto-keyword\">2. auto keyword <a class=\"heading-anchor-permalink\" href=\"#2.-auto-keyword\">#</a></h1>\n<p>Created Tuesday 01 September 2020</p>\n<ul>\n<li>The <strong>auto</strong> keyword means that the property will be evaluated based on other constraints or the space taken by the content.</li>\n<li>The box model is a constraint in CSS.</li>\n<li>Tags have their own constraints.</li>\n</ul>\n<p>e.g <a href=\"https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-principles/make-an-image-responsive\">https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-principles/make-an-image-responsive</a>\nimg\n{\nmax-width:100%; // width&lt;=100%, i.e it will cover the whole page at any size\nheight:auto; // depending on the page width\n}</p>\n",
      "id": 65
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/3_Avoid_pixelation.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/3_Avoid_pixelation.html",
      "content": "# 3. Avoid pixelation\nCreated Tuesday 01 September 2020\n\nSet width and height of a picture to half its original resolution.\n\n",
      "html": "<h1 id=\"3.-avoid-pixelation\">3. Avoid pixelation <a class=\"heading-anchor-permalink\" href=\"#3.-avoid-pixelation\">#</a></h1>\n<p>Created Tuesday 01 September 2020</p>\n<p>Set width and height of a picture to half its original resolution.</p>\n",
      "id": 66
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/4_Viewport_sizes.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/4_Viewport_sizes.html",
      "content": "# 4. Viewport sizes\nCreated Tuesday 01 September 2020\n\n- Percentages in size are relative to the parent container.\n- If we need to define size relative to the device's display at all times, use viewport sizes.\n- There are four of them:\n  1.  vw - view width\n  2.  vh - view height\n  3.  vmin - minimum of the height and width\n  4.  vmax - maximum of the height and width\n",
      "html": "<h1 id=\"4.-viewport-sizes\">4. Viewport sizes <a class=\"heading-anchor-permalink\" href=\"#4.-viewport-sizes\">#</a></h1>\n<p>Created Tuesday 01 September 2020</p>\n<ul>\n<li>Percentages in size are relative to the parent container.</li>\n<li>If we need to define size relative to the device’s display at all times, use viewport sizes.</li>\n<li>There are four of them:\n<ol>\n<li>vw - view width</li>\n<li>vh - view height</li>\n<li>vmin - minimum of the height and width</li>\n<li>vmax - maximum of the height and width</li>\n</ol>\n</li>\n</ul>\n",
      "id": 67
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/5_CSS_variables.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/5_CSS_variables.html",
      "content": "# 5. CSS variables\nCreated Saturday 29 August 2020\n\n- CSS variables are created by us and they can be used to store property values. This is helpful for automation.\n\n1. to declare, and initialize, syntax is\n\n   --variable_name:property_value;\n\n2. to use, just write:\n\n   var(--variable, fallback_value)\n\ne.g\n:root{\n--bgcolor: red;\n--fontcolor: blue;\n}\nbody {\n--bgp: red;\nbackground-color: var(--bgp);\n}\n\nNote:\n\n- Global declarations must be written inside the special **:root**\n- Variables [do](https://www.freecodecamp.org/learn/responsive-web-design/basic-css/inherit-css-variables) have scope in descendents.\n- Variables can be reassigned for an element(and consequently in all its elements).\n",
      "html": "<h1 id=\"5.-css-variables\">5. CSS variables <a class=\"heading-anchor-permalink\" href=\"#5.-css-variables\">#</a></h1>\n<p>Created Saturday 29 August 2020</p>\n<ul>\n<li>CSS variables are created by us and they can be used to store property values. This is helpful for automation.</li>\n</ul>\n<ol>\n<li>\n<p>to declare, and initialize, syntax is</p>\n<p>–variable_name:property_value;</p>\n</li>\n<li>\n<p>to use, just write:</p>\n<p>var(–variable, fallback_value)</p>\n</li>\n</ol>\n<p>e.g\n:root{\n–bgcolor: red;\n–fontcolor: blue;\n}\nbody {\n–bgp: red;\nbackground-color: var(–bgp);\n}</p>\n<p>Note:</p>\n<ul>\n<li>Global declarations must be written inside the special <strong>:root</strong></li>\n<li>Variables <a href=\"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/inherit-css-variables\">do</a> have scope in descendents.</li>\n<li>Variables can be reassigned for an element(and consequently in all its elements).</li>\n</ul>\n",
      "id": 68
    },
    {
      "path": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/6_CSS_calc_function.md",
      "url": "vault/2_CSS/2_Commonly_used_properties_-_IGN/6_CSS_extras_-_IGN/6_CSS_calc_function.html",
      "content": "# 6. CSS calc function\nCreated Wednesday 03 November 2021\n\n#### Why\nAllows calculations in CSS, for different length units.\n\n#### How\nSyntax:\nselector{\nfont-size: calc(32px + 10vm);\nwidth: calc(100px + var(--oldwidth));\n}\n\n- Inputs can be same too, but that's useless.\n- Multiplications can be done to.\n- CSS Variables can be used.\n\nNOTE: Addition and subtraction need whitespace between operators. 🛑️\n\n#### Applications of calc\n- Dynamically control stuff: font-sizes with `vw` (view width).\n",
      "html": "<h1 id=\"6.-css-calc-function\">6. CSS calc function <a class=\"heading-anchor-permalink\" href=\"#6.-css-calc-function\">#</a></h1>\n<p>Created Wednesday 03 November 2021</p>\n<h4 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h4>\n<p>Allows calculations in CSS, for different length units.</p>\n<h4 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h4>\n<p>Syntax:\nselector{\nfont-size: calc(32px + 10vm);\nwidth: calc(100px + var(–oldwidth));\n}</p>\n<ul>\n<li>Inputs can be same too, but that’s useless.</li>\n<li>Multiplications can be done to.</li>\n<li>CSS Variables can be used.</li>\n</ul>\n<p>NOTE: Addition and subtraction need whitespace between operators. 🛑️</p>\n<h4 id=\"applications-of-calc\">Applications of calc <a class=\"heading-anchor-permalink\" href=\"#applications-of-calc\">#</a></h4>\n<ul>\n<li>Dynamically control stuff: font-sizes with <code>vw</code> (view width).</li>\n</ul>\n",
      "id": 69
    },
    {
      "path": "vault/2_CSS/3_Box_Model/0_index.md",
      "url": "vault/2_CSS/3_Box_Model/0_index.html",
      "content": "# 3. Box Model\nCreated Sunday 25 April 2021\n\nFIXME fix the entire section",
      "html": "<h1 id=\"3.-box-model\">3. Box Model <a class=\"heading-anchor-permalink\" href=\"#3.-box-model\">#</a></h1>\n<p>Created Sunday 25 April 2021</p>\n<p>FIXME fix the entire section</p>\n",
      "id": 70
    },
    {
      "path": "vault/2_CSS/3_Box_Model/1_Box_model.md",
      "url": "vault/2_CSS/3_Box_Model/1_Box_model.html",
      "content": "# 1. Box model\nCreated Tuesday 16 June 2020\n\nEvery element is essentially a box in CSS\n![](../../../assets/1_Box_model-image-1-b158a57d.png)\n\n### padding part of width, height?\n- `width`, `height` are for content.\n- `padding`, `border` and `margin` are calculated seperately.\n  ![](../../../assets/1_Box_model-image-2-b158a57d.png)\n\n- If there was an eventListener, it would activate only within the border(inclusive).\n",
      "html": "<h1 id=\"1.-box-model\">1. Box model <a class=\"heading-anchor-permalink\" href=\"#1.-box-model\">#</a></h1>\n<p>Created Tuesday 16 June 2020</p>\n<p>Every element is essentially a box in CSS\n<img src=\"../../../assets/1_Box_model-image-1-b158a57d.png\" alt=\"\"></p>\n<h3 id=\"padding-part-of-width%2C-height%3F\">padding part of width, height? <a class=\"heading-anchor-permalink\" href=\"#padding-part-of-width%2C-height%3F\">#</a></h3>\n<ul>\n<li>\n<p><code>width</code>, <code>height</code> are for content.</p>\n</li>\n<li>\n<p><code>padding</code>, <code>border</code> and <code>margin</code> are calculated seperately.\n<img src=\"../../../assets/1_Box_model-image-2-b158a57d.png\" alt=\"\"></p>\n</li>\n<li>\n<p>If there was an eventListener, it would activate only within the border(inclusive).</p>\n</li>\n</ul>\n",
      "id": 71
    },
    {
      "path": "vault/2_CSS/3_Box_Model/2_margin_and_padding.md",
      "url": "vault/2_CSS/3_Box_Model/2_margin_and_padding.html",
      "content": "# 2. margin and padding\nCreated Tuesday 16 June 2020\n\n### `margin`\nMargin is the space outside the element boundary.\n\n* They are just like border - there are 4 of them\n* We can use shorthand notation\n* auto : makes the value as high as possible. Example: makes the element horizontally at the center of the page. If set for all, makes the tag center horizontally.\n* inherit: Inherits the parents value for the said margin(or all of them). Makes a cascade like pattern.\n- margin collapse: Refers to the practice of setting one of the elements margin to 0 and the other to the max. Should be done only for vertical margins.\n\n\n### `padding`\nThis defines the space between the boundary and the contents of the element.\n\n\n### when to use padding/margin?\nConsider a web app made up of components, including many reusable ones.\n\nThe core code for *reusable components shouldn't bother the space outside them*, so avoid using margin in them, use padding instead. See code (good):\n```html\n<div style=\"padding: 16px;\">\n\t...\n<div>\n```\n\n\nOn pages where components are integrated, i.e. reusablity of the page is assumed to be irrelevant, *use margin for inter-component spaces*. Example: A page has a 3 form fields one below the other. See code (good):\n```html\n<form>\n\t<input />\n\t<input style=\"margin-top: 12px;\" />\n\t<input style=\"margin-top: 12px;\" />\n\t<input style=\"margin-top: 12px;\" />\n<form>\n```\n\nSo its quite simple, don't make life harder for the future/other developers, mind your own space.",
      "html": "<h1 id=\"2.-margin-and-padding\">2. margin and padding <a class=\"heading-anchor-permalink\" href=\"#2.-margin-and-padding\">#</a></h1>\n<p>Created Tuesday 16 June 2020</p>\n<h3 id=\"margin\"><code>margin</code> <a class=\"heading-anchor-permalink\" href=\"#margin\">#</a></h3>\n<p>Margin is the space outside the element boundary.</p>\n<ul>\n<li>They are just like border - there are 4 of them</li>\n<li>We can use shorthand notation</li>\n<li>auto : makes the value as high as possible. Example: makes the element horizontally at the center of the page. If set for all, makes the tag center horizontally.</li>\n<li>inherit: Inherits the parents value for the said margin(or all of them). Makes a cascade like pattern.</li>\n</ul>\n<ul>\n<li>margin collapse: Refers to the practice of setting one of the elements margin to 0 and the other to the max. Should be done only for vertical margins.</li>\n</ul>\n<h3 id=\"padding\"><code>padding</code> <a class=\"heading-anchor-permalink\" href=\"#padding\">#</a></h3>\n<p>This defines the space between the boundary and the contents of the element.</p>\n<h3 id=\"when-to-use-padding%2Fmargin%3F\">when to use padding/margin? <a class=\"heading-anchor-permalink\" href=\"#when-to-use-padding%2Fmargin%3F\">#</a></h3>\n<p>Consider a web app made up of components, including many reusable ones.</p>\n<p>The core code for <em>reusable components shouldn’t bother the space outside them</em>, so avoid using margin in them, use padding instead. See code (good):</p>\n<pre><code class=\"language-html\">&lt;div style=&quot;padding: 16px;&quot;&gt;\n\t...\n&lt;div&gt;\n</code></pre>\n<p>On pages where components are integrated, i.e. reusablity of the page is assumed to be irrelevant, <em>use margin for inter-component spaces</em>. Example: A page has a 3 form fields one below the other. See code (good):</p>\n<pre><code class=\"language-html\">&lt;form&gt;\n\t&lt;input /&gt;\n\t&lt;input style=&quot;margin-top: 12px;&quot; /&gt;\n\t&lt;input style=&quot;margin-top: 12px;&quot; /&gt;\n\t&lt;input style=&quot;margin-top: 12px;&quot; /&gt;\n&lt;form&gt;\n</code></pre>\n<p>So its quite simple, don’t make life harder for the future/other developers, mind your own space.</p>\n",
      "id": 72
    },
    {
      "path": "vault/2_CSS/3_Box_Model/3_border.md",
      "url": "vault/2_CSS/3_Box_Model/3_border.html",
      "content": "# 3. border\nCreated Monday 15 June 2020\n\n### border\n- Short-hand(size type color). Example: `border: 1px solid black`\n- By default, the properties apply to all the 4 sides.\n- Properties\n\t1. `border-color`. This is inherited.\n\t2. `border-style: solid | dotted `\n\t3. `border-width: {unit} | thin | medium | thick`\n\t\t![](../../../assets/3_border-image-1-b158a57d.png)\nIndividual border (top or left or right or bottom) can be styled by using a 3 worded key. Example: `border-top-color`.\n\n### Rounded corners aka `border-radius`\n1. border-radius: radius of the circle.",
      "html": "<h1 id=\"3.-border\">3. border <a class=\"heading-anchor-permalink\" href=\"#3.-border\">#</a></h1>\n<p>Created Monday 15 June 2020</p>\n<h3 id=\"border\">border <a class=\"heading-anchor-permalink\" href=\"#border\">#</a></h3>\n<ul>\n<li>Short-hand(size type color). Example: <code>border: 1px solid black</code></li>\n<li>By default, the properties apply to all the 4 sides.</li>\n<li>Properties\n<ol>\n<li><code>border-color</code>. This is inherited.</li>\n<li><code>border-style: solid | dotted</code></li>\n<li><code>border-width: {unit} | thin | medium | thick</code>\n<img src=\"../../../assets/3_border-image-1-b158a57d.png\" alt=\"\">\nIndividual border (top or left or right or bottom) can be styled by using a 3 worded key. Example: <code>border-top-color</code>.</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"rounded-corners-aka-border-radius\">Rounded corners aka <code>border-radius</code> <a class=\"heading-anchor-permalink\" href=\"#rounded-corners-aka-border-radius\">#</a></h3>\n<ol>\n<li>border-radius: radius of the circle.</li>\n</ol>\n",
      "id": 73
    },
    {
      "path": "vault/2_CSS/3_Box_Model/4_height_and_width.md",
      "url": "vault/2_CSS/3_Box_Model/4_height_and_width.html",
      "content": "# 4. height and width\nCreated Tuesday 16 June 2020\n\n\n* height and width are for content (and not related or affected by padding, margin or border).\n* **box-sizing: border-box; **helps to make the border box okay. Content is distorted, the element size changes only if the padding is greater than either height or width.\n* limit the width and/or height of an element using **max-width **and the **max-height **property.\n* We can also set the minimum width and height, using **min-width **or **min-height**\n\nFIXME: handle min, fit, max, 100% and clear pareto based understanding.",
      "html": "<h1 id=\"4.-height-and-width\">4. height and width <a class=\"heading-anchor-permalink\" href=\"#4.-height-and-width\">#</a></h1>\n<p>Created Tuesday 16 June 2020</p>\n<ul>\n<li>height and width are for content (and not related or affected by padding, margin or border).</li>\n<li>**box-sizing: border-box; **helps to make the border box okay. Content is distorted, the element size changes only if the padding is greater than either height or width.</li>\n<li>limit the width and/or height of an element using **max-width **and the **max-height **property.</li>\n<li>We can also set the minimum width and height, using **min-width **or <strong>min-height</strong></li>\n</ul>\n<p>FIXME: handle min, fit, max, 100% and clear pareto based understanding.</p>\n",
      "id": 74
    },
    {
      "path": "vault/2_CSS/3_Box_Model/5_outline.md",
      "url": "vault/2_CSS/3_Box_Model/5_outline.html",
      "content": "# 5. outline\nCreated Tuesday 16 June 2020\n\n### About\n* This is a like a second border: Outside the **border**\n* It is just a way to make the content stand out.\n\n![](../../../assets/1_Box_model-image-1-b158a57d.png)\n\n* It has attributes same as that of border.\n* The color property has a value called: **invert**, this ensures visibility w.r.t to the surroundings.\n* invert is not available in border.\n* outline-offset sets the offset, between the border and the outline.\n\n\n### Debugging\nI have never used outline in apps. But I use it regularly to debug UIs.",
      "html": "<h1 id=\"5.-outline\">5. outline <a class=\"heading-anchor-permalink\" href=\"#5.-outline\">#</a></h1>\n<p>Created Tuesday 16 June 2020</p>\n<h3 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h3>\n<ul>\n<li>This is a like a second border: Outside the <strong>border</strong></li>\n<li>It is just a way to make the content stand out.</li>\n</ul>\n<p><img src=\"../../../assets/1_Box_model-image-1-b158a57d.png\" alt=\"\"></p>\n<ul>\n<li>It has attributes same as that of border.</li>\n<li>The color property has a value called: <strong>invert</strong>, this ensures visibility w.r.t to the surroundings.</li>\n<li>invert is not available in border.</li>\n<li>outline-offset sets the offset, between the border and the outline.</li>\n</ul>\n<h3 id=\"debugging\">Debugging <a class=\"heading-anchor-permalink\" href=\"#debugging\">#</a></h3>\n<p>I have never used outline in apps. But I use it regularly to debug UIs.</p>\n",
      "id": 75
    },
    {
      "path": "vault/2_CSS/3_Box_Model/6_display_and_visibility.md",
      "url": "vault/2_CSS/3_Box_Model/6_display_and_visibility.html",
      "content": "# 6. display and visibility\nCreated Tuesday 16 June 2020\n\n\n### `display`\nThere are 3 options: none, inline, block,\n* Most elements have a predfined, default value.\n* Can be used to remove elements by setting dislay:none without removing them.\n\n### `visibility`\n* visibility:none, just makes the element contents hidden, it still takes the screen real estate.\n\n\n### `hidden` attribute on tags\nFIXME: add this (may help: https://github.com/sanjar-notes/web_dev_fundamentals/issues/101), and clean up display and visiblity non hiding usage too.",
      "html": "<h1 id=\"6.-display-and-visibility\">6. display and visibility <a class=\"heading-anchor-permalink\" href=\"#6.-display-and-visibility\">#</a></h1>\n<p>Created Tuesday 16 June 2020</p>\n<h3 id=\"display\"><code>display</code> <a class=\"heading-anchor-permalink\" href=\"#display\">#</a></h3>\n<p>There are 3 options: none, inline, block,</p>\n<ul>\n<li>Most elements have a predfined, default value.</li>\n<li>Can be used to remove elements by setting dislay:none without removing them.</li>\n</ul>\n<h3 id=\"visibility\"><code>visibility</code> <a class=\"heading-anchor-permalink\" href=\"#visibility\">#</a></h3>\n<ul>\n<li>visibility:none, just makes the element contents hidden, it still takes the screen real estate.</li>\n</ul>\n<h3 id=\"hidden-attribute-on-tags\"><code>hidden</code> attribute on tags <a class=\"heading-anchor-permalink\" href=\"#hidden-attribute-on-tags\">#</a></h3>\n<p>FIXME: add this (may help: <a href=\"https://github.com/sanjar-notes/web_dev_fundamentals/issues/101\">https://github.com/sanjar-notes/web_dev_fundamentals/issues/101</a>), and clean up display and visiblity non hiding usage too.</p>\n",
      "id": 76
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/0_index.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/0_index.html",
      "content": "# 4. Layouts - flex, grid\nCreated Sunday 25 April 2021\n\n### Why\nLaying out children in an element was hard in CSS for a long time. \n`display: flex` and `display: grid` solved that problem.\n\nIn simple words - with this knowledge, one can control/set nested elements as 1D or a 2D block, and with automatic responsive behavior for the children being layed out.\n\n\n### Resources\n1. Flex - https://css-tricks.com/snippets/css/a-guide-to-flexbox/, simple and exhaustive\n2. Grid - https://css-tricks.com/snippets/css/complete-guide-grid/, simple and exhaustive\n3. Flex game - https://flexboxfroggy.com\n4. Grid game - https://cssgridgarden.com\n5. Important detail in [video by Rachel Andrew](https://youtu.be/yMEjLBKyvEg) (~90 min)",
      "html": "<h1 id=\"4.-layouts---flex%2C-grid\">4. Layouts - flex, grid <a class=\"heading-anchor-permalink\" href=\"#4.-layouts---flex%2C-grid\">#</a></h1>\n<p>Created Sunday 25 April 2021</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>Laying out children in an element was hard in CSS for a long time.\n<code>display: flex</code> and <code>display: grid</code> solved that problem.</p>\n<p>In simple words - with this knowledge, one can control/set nested elements as 1D or a 2D block, and with automatic responsive behavior for the children being layed out.</p>\n<h3 id=\"resources\">Resources <a class=\"heading-anchor-permalink\" href=\"#resources\">#</a></h3>\n<ol>\n<li>Flex - <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">https://css-tricks.com/snippets/css/a-guide-to-flexbox/</a>, simple and exhaustive</li>\n<li>Grid - <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">https://css-tricks.com/snippets/css/complete-guide-grid/</a>, simple and exhaustive</li>\n<li>Flex game - <a href=\"https://flexboxfroggy.com\">https://flexboxfroggy.com</a></li>\n<li>Grid game - <a href=\"https://cssgridgarden.com\">https://cssgridgarden.com</a></li>\n<li>Important detail in <a href=\"https://youtu.be/yMEjLBKyvEg\">video by Rachel Andrew</a> (~90 min)</li>\n</ol>\n",
      "id": 77
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/0_flex_syntax.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/0_flex_syntax.html",
      "content": "# 0. flex syntax\nCreated Tuesday 01 September 2020\n\nSteps:\n1. Set `display:flex` on the container.\n2. Set the main axis direction(row, column, row-reverse, column-reverse) - default is row.\n\t```css\n\t {\n\t  display: flex;\n\t  flex-direction: row-reverse;\n\t}\n\t```\n\n### About flexbox\n- It can [override](https://www.freecodecamp.org/learn/responsive-web-design/css-flexbox/use-display-flex-to-position-two-boxes) the blocked nature of div",
      "html": "<h1 id=\"0.-flex-syntax\">0. flex syntax <a class=\"heading-anchor-permalink\" href=\"#0.-flex-syntax\">#</a></h1>\n<p>Created Tuesday 01 September 2020</p>\n<p>Steps:</p>\n<ol>\n<li>Set <code>display:flex</code> on the container.</li>\n<li>Set the main axis direction(row, column, row-reverse, column-reverse) - default is row.<pre><code class=\"language-css\"> {\n  display: flex;\n  flex-direction: row-reverse;\n}\n</code></pre>\n</li>\n</ol>\n<h3 id=\"about-flexbox\">About flexbox <a class=\"heading-anchor-permalink\" href=\"#about-flexbox\">#</a></h3>\n<ul>\n<li>It can <a href=\"https://www.freecodecamp.org/learn/responsive-web-design/css-flexbox/use-display-flex-to-position-two-boxes\">override</a> the blocked nature of div</li>\n</ul>\n",
      "id": 78
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/0_index.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/0_index.html",
      "content": "# 1. Flexbox - 1D\nCreated Tuesday 16 June 2020\n\n#### Why flexbox?\nLay out child elements in a single row/column.\n\nHelps us keep everything at the correct place(in a row or in a column - 1D), without explicit settings.\n\n- Saves us a lot of time, and is responsive.\n- We'll not be using the older things like floats.\n\nTwo good are:\n1. [CSS Tricks - Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/\n2. [Flexbox froggy](https://flexboxfroggy.com/) - game to learn flexbox\n\n#### flexbox container (in row mode, the default)\n![](../../../../assets/0_index-image-1-f80503af.png)\n\n#### The axes and controls\nThe main axis and cross axis have nothing to do with horizontal/vertical.\nThey are set via the `flex-direction` property, default is row.\n\n- main axis is along the `flex-direction`. Control for main axis is via the `justify-content` property.\n- cross axis is perpendicular to main axis. Conrtol for cross axis is via the `align-items` property.\n\n#### There are two kinds of things to control in flex\n1. For the flex container - for positioning and laying out space to the flex items\n2. For the flex items - for setting their dimensions, optionally overriding container flex properties.\n\nResource for flex-box: [Learn Flexbox in 15 Minutes](https://youtu.be/fYq5PXgSsbE)\n",
      "html": "<h1 id=\"1.-flexbox---1d\">1. Flexbox - 1D <a class=\"heading-anchor-permalink\" href=\"#1.-flexbox---1d\">#</a></h1>\n<p>Created Tuesday 16 June 2020</p>\n<h4 id=\"why-flexbox%3F\">Why flexbox? <a class=\"heading-anchor-permalink\" href=\"#why-flexbox%3F\">#</a></h4>\n<p>Lay out child elements in a single row/column.</p>\n<p>Helps us keep everything at the correct place(in a row or in a column - 1D), without explicit settings.</p>\n<ul>\n<li>Saves us a lot of time, and is responsive.</li>\n<li>We’ll not be using the older things like floats.</li>\n</ul>\n<p>Two good are:</p>\n<ol>\n<li>[CSS Tricks - Flexbox](<a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">https://css-tricks.com/snippets/css/a-guide-to-flexbox/</a></li>\n<li><a href=\"https://flexboxfroggy.com/\">Flexbox froggy</a> - game to learn flexbox</li>\n</ol>\n<h4 id=\"flexbox-container-(in-row-mode%2C-the-default)\">flexbox container (in row mode, the default) <a class=\"heading-anchor-permalink\" href=\"#flexbox-container-(in-row-mode%2C-the-default)\">#</a></h4>\n<p><img src=\"../../../../assets/0_index-image-1-f80503af.png\" alt=\"\"></p>\n<h4 id=\"the-axes-and-controls\">The axes and controls <a class=\"heading-anchor-permalink\" href=\"#the-axes-and-controls\">#</a></h4>\n<p>The main axis and cross axis have nothing to do with horizontal/vertical.\nThey are set via the <code>flex-direction</code> property, default is row.</p>\n<ul>\n<li>main axis is along the <code>flex-direction</code>. Control for main axis is via the <code>justify-content</code> property.</li>\n<li>cross axis is perpendicular to main axis. Conrtol for cross axis is via the <code>align-items</code> property.</li>\n</ul>\n<h4 id=\"there-are-two-kinds-of-things-to-control-in-flex\">There are two kinds of things to control in flex <a class=\"heading-anchor-permalink\" href=\"#there-are-two-kinds-of-things-to-control-in-flex\">#</a></h4>\n<ol>\n<li>For the flex container - for positioning and laying out space to the flex items</li>\n<li>For the flex items - for setting their dimensions, optionally overriding container flex properties.</li>\n</ol>\n<p>Resource for flex-box: <a href=\"https://youtu.be/fYq5PXgSsbE\">Learn Flexbox in 15 Minutes</a></p>\n",
      "id": 79
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/1_Container/1_main_axis.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/1_Container/1_main_axis.html",
      "content": "# 1. main axis\nCreated Wednesday 02 September 2020\n\nMain axis = direction of flex.\n``justify-content`` controls components along the main axis.\n\nIt has 6 values (modes):\n1. center → all components stacked at the center, same space on both ends.\n2. flex-start → all components stacked at the start\n3. flex-end → all components stacked at the end\n4. space-between → All elements have the same space between them. No space at the two ends.\n5. space-around → Same as space between but, there's space/2 space at the ends too.\n6. space-evenly → Distributes the space evenly, with space at the ends too.\n\n\n#### Picture\n![](../../../../../assets/1_main_axis-image-1-db802417.png)\n\n",
      "html": "<h1 id=\"1.-main-axis\">1. main axis <a class=\"heading-anchor-permalink\" href=\"#1.-main-axis\">#</a></h1>\n<p>Created Wednesday 02 September 2020</p>\n<p>Main axis = direction of flex.\n<code>justify-content</code> controls components along the main axis.</p>\n<p>It has 6 values (modes):</p>\n<ol>\n<li>center → all components stacked at the center, same space on both ends.</li>\n<li>flex-start → all components stacked at the start</li>\n<li>flex-end → all components stacked at the end</li>\n<li>space-between → All elements have the same space between them. No space at the two ends.</li>\n<li>space-around → Same as space between but, there’s space/2 space at the ends too.</li>\n<li>space-evenly → Distributes the space evenly, with space at the ends too.</li>\n</ol>\n<h4 id=\"picture\">Picture <a class=\"heading-anchor-permalink\" href=\"#picture\">#</a></h4>\n<p><img src=\"../../../../../assets/1_main_axis-image-1-db802417.png\" alt=\"\"></p>\n",
      "id": 80
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/1_Container/2_cross_axis.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/1_Container/2_cross_axis.html",
      "content": "# 2. cross axis\nCreated Wednesday 02 September 2020\n\nCross axis = perpendicular to direction of flex (main axis)\n``align-items`` controls components along the cross axis.\n\nIt has 5 modes:\n1. center → all components stacked at the center, same space on both ends.\n2. flex-start → all components stacked at the start\n3. flex-end → all components stacked at the end\n4. stretch → All elements are streched fully along the cross axis. It is the default for align-items, if not specified.\n5. baseline → All components have the same baseline(line where letters sit). See [this](https://stackoverflow.com/q/34606879/11392807) for clarification.\n\n\n#### Picture\n![](../../../../../assets/2_cross_axis-image-1-db802417.png)\n\n",
      "html": "<h1 id=\"2.-cross-axis\">2. cross axis <a class=\"heading-anchor-permalink\" href=\"#2.-cross-axis\">#</a></h1>\n<p>Created Wednesday 02 September 2020</p>\n<p>Cross axis = perpendicular to direction of flex (main axis)\n<code>align-items</code> controls components along the cross axis.</p>\n<p>It has 5 modes:</p>\n<ol>\n<li>center → all components stacked at the center, same space on both ends.</li>\n<li>flex-start → all components stacked at the start</li>\n<li>flex-end → all components stacked at the end</li>\n<li>stretch → All elements are streched fully along the cross axis. It is the default for align-items, if not specified.</li>\n<li>baseline → All components have the same baseline(line where letters sit). See <a href=\"https://stackoverflow.com/q/34606879/11392807\">this</a> for clarification.</li>\n</ol>\n<h4 id=\"picture\">Picture <a class=\"heading-anchor-permalink\" href=\"#picture\">#</a></h4>\n<p><img src=\"../../../../../assets/2_cross_axis-image-1-db802417.png\" alt=\"\"></p>\n",
      "id": 81
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/1_Container/3_Wrapping.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/1_Container/3_Wrapping.html",
      "content": "# 3. Wrapping\nCreated Wednesday 02 September 2020\n\nThe ``flex-wrap`` property is used for wrapping [the](https://www.freecodecamp.org/learn/responsive-web-design/css-flexbox/use-the-flex-wrap-property-to-wrap-a-row-or-column) components.\nIt applies w.r.t the main axis only - as it is for reading, and therefore has no cross-axis. property.\n\nIt has 3 values (modes):\n1. no-wrap → The default\n\n![](../../../../../assets/3_Wrapping-image-1-db802417.png)\n\n2. wrap → Wrap w.r.t to the main axis\n\n![](../../../../../assets/3_Wrapping-image-2-db802417.png)\n\n3. wrap-reverse → Wrap to put in the opposite direction(top here, row main-axis)\n\n![](../../../../../assets/3_Wrapping-image-3-db802417.png)\n\n",
      "html": "<h1 id=\"3.-wrapping\">3. Wrapping <a class=\"heading-anchor-permalink\" href=\"#3.-wrapping\">#</a></h1>\n<p>Created Wednesday 02 September 2020</p>\n<p>The <code>flex-wrap</code> property is used for wrapping <a href=\"https://www.freecodecamp.org/learn/responsive-web-design/css-flexbox/use-the-flex-wrap-property-to-wrap-a-row-or-column\">the</a> components.\nIt applies w.r.t the main axis only - as it is for reading, and therefore has no cross-axis. property.</p>\n<p>It has 3 values (modes):</p>\n<ol>\n<li>no-wrap → The default</li>\n</ol>\n<p><img src=\"../../../../../assets/3_Wrapping-image-1-db802417.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>wrap → Wrap w.r.t to the main axis</li>\n</ol>\n<p><img src=\"../../../../../assets/3_Wrapping-image-2-db802417.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>wrap-reverse → Wrap to put in the opposite direction(top here, row main-axis)</li>\n</ol>\n<p><img src=\"../../../../../assets/3_Wrapping-image-3-db802417.png\" alt=\"\"></p>\n",
      "id": 82
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/1_flex-shrink.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/1_flex-shrink.html",
      "content": "# 1. flex-shrink\nCreated Wednesday 02 September 2020\n\nFIXME\n\nflex-shrink if set to 0 avoid shrinking on window squeez.\n1 - smaller\n2 - even smaller\n3 - smaller...\n\nUnderstand and write this later.\nFIXMEend\n\n// delete below this\n**flex-shrink** assigns items to\n\n- This assigns width to an item, based off other flexitem along the main axis.\n- Needs a value to function:\n  1.  0 - covers the entire flex container\n  2.  1 - Covers default area\n  3.  2 or n - covers nth times less area as the one with 1\n",
      "html": "<h1 id=\"1.-flex-shrink\">1. flex-shrink <a class=\"heading-anchor-permalink\" href=\"#1.-flex-shrink\">#</a></h1>\n<p>Created Wednesday 02 September 2020</p>\n<p>FIXME</p>\n<p>flex-shrink if set to 0 avoid shrinking on window squeez.\n1 - smaller\n2 - even smaller\n3 - smaller…</p>\n<p>Understand and write this later.\nFIXMEend</p>\n<p>// delete below this\n<strong>flex-shrink</strong> assigns items to</p>\n<ul>\n<li>This assigns width to an item, based off other flexitem along the main axis.</li>\n<li>Needs a value to function:\n<ol>\n<li>0 - covers the entire flex container</li>\n<li>1 - Covers default area</li>\n<li>2 or n - covers nth times less area as the one with 1</li>\n</ol>\n</li>\n</ul>\n",
      "id": 83
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/2_flex-grow.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/2_flex-grow.html",
      "content": "# 2. flex-grow\nCreated Wednesday 02 September 2020\n\n#### Why\nThis property distributes *left-over *space to the items.\n\n* Example - For main axis as row, width is changed.\n\n\nNOTE: it does reallocates remaining space, not the actual width. So not 2x, 3x. Rather +2x, +3x where x = space remaining/5.\n\n",
      "html": "<h1 id=\"2.-flex-grow\">2. flex-grow <a class=\"heading-anchor-permalink\" href=\"#2.-flex-grow\">#</a></h1>\n<p>Created Wednesday 02 September 2020</p>\n<h4 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h4>\n<p>This property distributes *left-over *space to the items.</p>\n<ul>\n<li>Example - For main axis as row, width is changed.</li>\n</ul>\n<p>NOTE: it does reallocates remaining space, not the actual width. So not 2x, 3x. Rather +2x, +3x where x = space remaining/5.</p>\n",
      "id": 84
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/3_flex-basis.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/3_flex-basis.html",
      "content": "# 3. flex-basis\nCreated Thursday 03 September 2020\n\n### Why\nSets a width before flex is applied.\n\nSets the initial size of item, like a ``width``. The flex behaviors apply to this as the basis.\n```css\np\n{\n  flex-basis:200px;\n}\n```\n\n",
      "html": "<h1 id=\"3.-flex-basis\">3. flex-basis <a class=\"heading-anchor-permalink\" href=\"#3.-flex-basis\">#</a></h1>\n<p>Created Thursday 03 September 2020</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>Sets a width before flex is applied.</p>\n<p>Sets the initial size of item, like a <code>width</code>. The flex behaviors apply to this as the basis.</p>\n<pre><code class=\"language-css\">p\n{\n  flex-basis:200px;\n}\n</code></pre>\n",
      "id": 85
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/4_order.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/4_order.html",
      "content": "# 4. order\nCreated Thursday 03 September 2020\n\n#### Why\n- The order property for a flex item, defines its order of appearance w.r.t the main axis\n- The value is the position, first is 1.\n- Order has to specified for all partcipating components.\n\n```css\ndiv.one\n{\n  order:2;\n}\n\ndiv.two\n{\n  order:1;\n}\n```\n\n- order is not good for forms etc. Tabs will go as per the HTML\n",
      "html": "<h1 id=\"4.-order\">4. order <a class=\"heading-anchor-permalink\" href=\"#4.-order\">#</a></h1>\n<p>Created Thursday 03 September 2020</p>\n<h4 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h4>\n<ul>\n<li>The order property for a flex item, defines its order of appearance w.r.t the main axis</li>\n<li>The value is the position, first is 1.</li>\n<li>Order has to specified for all partcipating components.</li>\n</ul>\n<pre><code class=\"language-css\">div.one\n{\n  order:2;\n}\n\ndiv.two\n{\n  order:1;\n}\n</code></pre>\n<ul>\n<li>order is not good for forms etc. Tabs will go as per the HTML</li>\n</ul>\n",
      "id": 86
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/5_align_self.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/5_align_self.html",
      "content": "# 5. align self\nCreated Saturday 23 October 2021\n\n### Why\nControl cross axis position for a flex-item.\n\n### How\n``align-item`` and set its values, same as cross axis 5 values.\n\nNote:\n*There is no justify-self in flex*, see [issue](https://github.com/sanjar-notes/web_dev_fundamentals/issues/83). Workaround for item at opposite side than others is to use `margin` on a side with `auto`.",
      "html": "<h1 id=\"5.-align-self\">5. align self <a class=\"heading-anchor-permalink\" href=\"#5.-align-self\">#</a></h1>\n<p>Created Saturday 23 October 2021</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>Control cross axis position for a flex-item.</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p><code>align-item</code> and set its values, same as cross axis 5 values.</p>\n<p>Note:\n<em>There is no justify-self in flex</em>, see <a href=\"https://github.com/sanjar-notes/web_dev_fundamentals/issues/83\">issue</a>. Workaround for item at opposite side than others is to use <code>margin</code> on a side with <code>auto</code>.</p>\n",
      "id": 87
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/6_All_in_one_flex_property.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items/6_All_in_one_flex_property.html",
      "content": "# 6. All in one flex property\nCreated Saturday 23 October 2021\n\n### Why\nShorthand for flex-item property\n\n### How\n```css\n{\n\tflex: 1 0 200px;\n\t/* flex-grow, flex-shrink=0, flex-basis=0 */\n}\n```\n\ngrow, shrink and basis in one line. Using property flex.\n\nNOTE: skip srhink, basis value - optional. Just keep the order.",
      "html": "<h1 id=\"6.-all-in-one-flex-property\">6. All in one flex property <a class=\"heading-anchor-permalink\" href=\"#6.-all-in-one-flex-property\">#</a></h1>\n<p>Created Saturday 23 October 2021</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>Shorthand for flex-item property</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<pre><code class=\"language-css\">{\n\tflex: 1 0 200px;\n\t/* flex-grow, flex-shrink=0, flex-basis=0 */\n}\n</code></pre>\n<p>grow, shrink and basis in one line. Using property flex.</p>\n<p>NOTE: skip srhink, basis value - optional. Just keep the order.</p>\n",
      "id": 88
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/0_index.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/0_index.html",
      "content": "# 2. Grid - 2D\nCreated Thursday 03 September 2020\n\nFIXME: grid-area and grid-area templates. spanned cells via both. \n\n### Why\nLay out child elements (items) like a grid - 2D.\n\n### Syntax\n- To use grid, set `display: grid` on the container\n- This will not change anything, by default.",
      "html": "<h1 id=\"2.-grid---2d\">2. Grid - 2D <a class=\"heading-anchor-permalink\" href=\"#2.-grid---2d\">#</a></h1>\n<p>Created Thursday 03 September 2020</p>\n<p>FIXME: grid-area and grid-area templates. spanned cells via both.</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>Lay out child elements (items) like a grid - 2D.</p>\n<h3 id=\"syntax\">Syntax <a class=\"heading-anchor-permalink\" href=\"#syntax\">#</a></h3>\n<ul>\n<li>To use grid, set <code>display: grid</code> on the container</li>\n<li>This will not change anything, by default.</li>\n</ul>\n",
      "id": 89
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/1_Container/1_grid-template.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/1_Container/1_grid-template.html",
      "content": "# 1. grid-template\nCreated Thursday 03 September 2020\n\n## Syntax and usage\n- Use these to set the row/column widths.\n- There are two:\n  1. `grid-template-columns`: colSize1 colSize2 colSize3 ...\n  2.  `grid-template-rows`: rowSize1 rowSize2 rowSize3 ...\n```css\n.container \n{\n\tdisplay: grid;\n\tgrid-template-columns: 50px 50px;\n\t/* The grid will have two columns of width 50px*/\n}\n```\n- The number of values specified are the number of rows/columns\n- Note: row and column are both plural\n\n\n## Units for row/col size\nThere are 4 units (values):\n1. fr - fraction of the available(remaining) space\n2. auto - takes the space as per content\n3. px or em\n4. % - percentage of the container dimension\n5. `min-content`\n6. `max-content`\n\n![](../../../../../assets/1_grid-template-image-1-7c9477dc.png)\n\n\n## With `repeat`\n### `repeat`\n- When specifying grid-template-columns or rows. We can use the repeat function.\n- syntax is **repeat(n, x, y, z...)**\n- It can be used multiple times, but not nested.\n\n```css\n.container\n{\n  grid-template-columns: repeat(2, 1fr, auto) 2fr;\n  /* same as 1fr auto 1fr auto 2fr */\n}\n```\n\n### `minmax`\nGives two values at the same time, minmax(smaller, greater)\n- This makes responsive design even better.\n\n###  `repeat(auto-fill)` \nDon't need to specify the number of repetitions.\n- allows us to fill as many grid items as possible.\n- Use it in combination with minmax to have a good effect.\n- When the maxium size is beyond the container, we have empty space.\n\ne.g This will change the push the other items down if size is less.\n```css\n.container \n{\n  grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));\n}\n```\n\n### `repeat(auto-fit)`\nvalue is similar to auto-fill but it does not keep any empty space.\n[Expands](https://www.freecodecamp.org/learn/responsive-web-design/css-grid/create-flexible-layouts-using-auto-fit) the items accordingly.",
      "html": "<h1 id=\"1.-grid-template\">1. grid-template <a class=\"heading-anchor-permalink\" href=\"#1.-grid-template\">#</a></h1>\n<p>Created Thursday 03 September 2020</p>\n<h2 id=\"syntax-and-usage\">Syntax and usage <a class=\"heading-anchor-permalink\" href=\"#syntax-and-usage\">#</a></h2>\n<ul>\n<li>Use these to set the row/column widths.</li>\n<li>There are two:\n<ol>\n<li><code>grid-template-columns</code>: colSize1 colSize2 colSize3 …</li>\n<li><code>grid-template-rows</code>: rowSize1 rowSize2 rowSize3 …</li>\n</ol>\n</li>\n</ul>\n<pre><code class=\"language-css\">.container \n{\n\tdisplay: grid;\n\tgrid-template-columns: 50px 50px;\n\t/* The grid will have two columns of width 50px*/\n}\n</code></pre>\n<ul>\n<li>The number of values specified are the number of rows/columns</li>\n<li>Note: row and column are both plural</li>\n</ul>\n<h2 id=\"units-for-row%2Fcol-size\">Units for row/col size <a class=\"heading-anchor-permalink\" href=\"#units-for-row%2Fcol-size\">#</a></h2>\n<p>There are 4 units (values):</p>\n<ol>\n<li>fr - fraction of the available(remaining) space</li>\n<li>auto - takes the space as per content</li>\n<li>px or em</li>\n<li>% - percentage of the container dimension</li>\n<li><code>min-content</code></li>\n<li><code>max-content</code></li>\n</ol>\n<p><img src=\"../../../../../assets/1_grid-template-image-1-7c9477dc.png\" alt=\"\"></p>\n<h2 id=\"with-repeat\">With <code>repeat</code> <a class=\"heading-anchor-permalink\" href=\"#with-repeat\">#</a></h2>\n<h3 id=\"repeat\"><code>repeat</code> <a class=\"heading-anchor-permalink\" href=\"#repeat\">#</a></h3>\n<ul>\n<li>When specifying grid-template-columns or rows. We can use the repeat function.</li>\n<li>syntax is <strong>repeat(n, x, y, z…)</strong></li>\n<li>It can be used multiple times, but not nested.</li>\n</ul>\n<pre><code class=\"language-css\">.container\n{\n  grid-template-columns: repeat(2, 1fr, auto) 2fr;\n  /* same as 1fr auto 1fr auto 2fr */\n}\n</code></pre>\n<h3 id=\"minmax\"><code>minmax</code> <a class=\"heading-anchor-permalink\" href=\"#minmax\">#</a></h3>\n<p>Gives two values at the same time, minmax(smaller, greater)</p>\n<ul>\n<li>This makes responsive design even better.</li>\n</ul>\n<h3 id=\"repeat(auto-fill)\"><code>repeat(auto-fill)</code> <a class=\"heading-anchor-permalink\" href=\"#repeat(auto-fill)\">#</a></h3>\n<p>Don’t need to specify the number of repetitions.</p>\n<ul>\n<li>allows us to fill as many grid items as possible.</li>\n<li>Use it in combination with minmax to have a good effect.</li>\n<li>When the maxium size is beyond the container, we have empty space.</li>\n</ul>\n<p>e.g This will change the push the other items down if size is less.</p>\n<pre><code class=\"language-css\">.container \n{\n  grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));\n}\n</code></pre>\n<h3 id=\"repeat(auto-fit)\"><code>repeat(auto-fit)</code> <a class=\"heading-anchor-permalink\" href=\"#repeat(auto-fit)\">#</a></h3>\n<p>value is similar to auto-fill but it does not keep any empty space.\n<a href=\"https://www.freecodecamp.org/learn/responsive-web-design/css-grid/create-flexible-layouts-using-auto-fit\">Expands</a> the items accordingly.</p>\n",
      "id": 90
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/1_Container/3_row_and_column_gap.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/1_Container/3_row_and_column_gap.html",
      "content": "# 3. row and column gap\nCreated Thursday 03 September 2020\n\nUse: specify the gap **between** rows and columns.\nJust set them in the grid container\n\nProperties and values (are sizes):\n1. `grid-column-gap`\n2. `grid-row-gap`\n3. Shorthand `grid-gap`, applies same to both row/column.\n\n![](../../../../../assets/3_row_and_column_gap-image-1-7c9477dc.png)\n\n",
      "html": "<h1 id=\"3.-row-and-column-gap\">3. row and column gap <a class=\"heading-anchor-permalink\" href=\"#3.-row-and-column-gap\">#</a></h1>\n<p>Created Thursday 03 September 2020</p>\n<p>Use: specify the gap <strong>between</strong> rows and columns.\nJust set them in the grid container</p>\n<p>Properties and values (are sizes):</p>\n<ol>\n<li><code>grid-column-gap</code></li>\n<li><code>grid-row-gap</code></li>\n<li>Shorthand <code>grid-gap</code>, applies same to both row/column.</li>\n</ol>\n<p><img src=\"../../../../../assets/3_row_and_column_gap-image-1-7c9477dc.png\" alt=\"\"></p>\n",
      "id": 91
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/1_Container/4_Justifying_and_aligning_items.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/1_Container/4_Justifying_and_aligning_items.html",
      "content": "# 4. Justifying and aligning items\nCreated Thursday 03 September 2020\n\nMAID: grid items, \"items\"\nTwo properties for container to justify/align their properties:\n1. justify-items\n2. align-items\n\n- Both take 3 values:\n  1.  stretch - the default value\n  2.  center\n  3.  start\n  4.  end\n- align-items takes one more value, **baseline**\n",
      "html": "<h1 id=\"4.-justifying-and-aligning-items\">4. Justifying and aligning items <a class=\"heading-anchor-permalink\" href=\"#4.-justifying-and-aligning-items\">#</a></h1>\n<p>Created Thursday 03 September 2020</p>\n<p>MAID: grid items, “items”\nTwo properties for container to justify/align their properties:</p>\n<ol>\n<li>justify-items</li>\n<li>align-items</li>\n</ol>\n<ul>\n<li>Both take 3 values:\n<ol>\n<li>stretch - the default value</li>\n<li>center</li>\n<li>start</li>\n<li>end</li>\n</ol>\n</li>\n<li>align-items takes one more value, <strong>baseline</strong></li>\n</ul>\n",
      "id": 92
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/1_Container/5_Naming_items.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/1_Container/5_Naming_items.html",
      "content": "# 5. Naming items\nCreated Thursday 03 September 2020\n\n* We can name item by using grid-template-areas\n* Empty names are designated using perid(.)\n* All other names are standard C++ variable names\n\nSyntax:\n```css\n.container\n{\n\tgrid-template-areas:\n\t  \"header header header\"\n\t  \"advert content content\"\n\t  \"footer footer footer\"; /* creates a 3x3 named grid */\n}\n\n.item\n{\n  grid-area: header;\n}\n```\n\n\n## Usage steps\nSteps:\n1. Select an existing selector\n2. Set **grid-area** to name of the template\n3. Write the styles\n\n\ne.g Here the first 3 cells were marked header\n![](../../../../../assets/5_Naming_items-image-1-7c9477dc.png)\n\n*****\n\nWe can use the areas even without naming them: Just specify the 4 lines enclosing them, separated by slashes. ACW from top. Example:\n```css\n.cell-to-be-named {\n  grid-area: 1 / col4-start / last-line / 6;\n}\n```\n\n",
      "html": "<h1 id=\"5.-naming-items\">5. Naming items <a class=\"heading-anchor-permalink\" href=\"#5.-naming-items\">#</a></h1>\n<p>Created Thursday 03 September 2020</p>\n<ul>\n<li>We can name item by using grid-template-areas</li>\n<li>Empty names are designated using perid(.)</li>\n<li>All other names are standard C++ variable names</li>\n</ul>\n<p>Syntax:</p>\n<pre><code class=\"language-css\">.container\n{\n\tgrid-template-areas:\n\t  &quot;header header header&quot;\n\t  &quot;advert content content&quot;\n\t  &quot;footer footer footer&quot;; /* creates a 3x3 named grid */\n}\n\n.item\n{\n  grid-area: header;\n}\n</code></pre>\n<h2 id=\"usage-steps\">Usage steps <a class=\"heading-anchor-permalink\" href=\"#usage-steps\">#</a></h2>\n<p>Steps:</p>\n<ol>\n<li>Select an existing selector</li>\n<li>Set <strong>grid-area</strong> to name of the template</li>\n<li>Write the styles</li>\n</ol>\n<p>e.g Here the first 3 cells were marked header\n<img src=\"../../../../../assets/5_Naming_items-image-1-7c9477dc.png\" alt=\"\"></p>\n<hr>\n<p>We can use the areas even without naming them: Just specify the 4 lines enclosing them, separated by slashes. ACW from top. Example:</p>\n<pre><code class=\"language-css\">.cell-to-be-named {\n  grid-area: 1 / col4-start / last-line / 6;\n}\n</code></pre>\n",
      "id": 93
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/2_Items/0_index.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/2_Items/0_index.html",
      "content": "# 2. Items\nCreated Thursday 03 September 2020\n\nProperties for grid items themselves\n\n",
      "html": "<h1 id=\"2.-items\">2. Items <a class=\"heading-anchor-permalink\" href=\"#2.-items\">#</a></h1>\n<p>Created Thursday 03 September 2020</p>\n<p>Properties for grid items themselves</p>\n",
      "id": 94
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/2_Items/1_Space_occupied.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/2_Items/1_Space_occupied.html",
      "content": "# 1. Space occupied\nCreated Thursday 03 September 2020\n\nFirst: Undertand how grid is represented\n\n- Like a matrix\n- 1 based indexing\n\n## ![](../../../../../assets/1_Space_occupied-image-1-add3024c.png)\n**Set the postions**\nThere are two options:\n1. grid-row: a/b; // occupies rows from line a to b\n2. grid-column:a/b; // occupies column from line a to b\n\n- the row and column are independent\n- If you feel confused, start with grid-row: n/n+1;\n\ne.g\n![](../../../../../assets/1_Space_occupied-image-2-add3024c.png)\n\n---\n\n- All other grid items are wrapped accordingly.\n",
      "html": "<h1 id=\"1.-space-occupied\">1. Space occupied <a class=\"heading-anchor-permalink\" href=\"#1.-space-occupied\">#</a></h1>\n<p>Created Thursday 03 September 2020</p>\n<p>First: Undertand how grid is represented</p>\n<ul>\n<li>Like a matrix</li>\n<li>1 based indexing</li>\n</ul>\n<h2 id=\"\"><img src=\"../../../../../assets/1_Space_occupied-image-1-add3024c.png\" alt=\"\"> <a class=\"heading-anchor-permalink\" href=\"#\">#</a></h2>\n<p><strong>Set the postions</strong>\nThere are two options:</p>\n<ol>\n<li>grid-row: a/b; // occupies rows from line a to b</li>\n<li>grid-column:a/b; // occupies column from line a to b</li>\n</ol>\n<ul>\n<li>the row and column are independent</li>\n<li>If you feel confused, start with grid-row: n/n+1;</li>\n</ul>\n<p>e.g\n<img src=\"../../../../../assets/1_Space_occupied-image-2-add3024c.png\" alt=\"\"></p>\n<hr>\n<ul>\n<li>All other grid items are wrapped accordingly.</li>\n</ul>\n",
      "id": 95
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/2_Items/2_grid_item_position.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/2_Items/2_grid_item_position.html",
      "content": "# 2. grid item position\nCreated Thursday 03 September 2020\n\n- The **justify-self** property specifies position of the cell in the horizontal direction.\n- The **align-self** property specifies position of the cell in the vertical direction.\n\nBoth have 4 options:\n1. stretch - the default value\n2. center - at center\n3. start - sets the position to the left or top\n4. end - sets the position to the right or bottom\n\n![](../../../../../assets/2_grid_item_position-image-1-add3024c.png)\n\n- The properties have the name self, because they are used for the items.\n",
      "html": "<h1 id=\"2.-grid-item-position\">2. grid item position <a class=\"heading-anchor-permalink\" href=\"#2.-grid-item-position\">#</a></h1>\n<p>Created Thursday 03 September 2020</p>\n<ul>\n<li>The <strong>justify-self</strong> property specifies position of the cell in the horizontal direction.</li>\n<li>The <strong>align-self</strong> property specifies position of the cell in the vertical direction.</li>\n</ul>\n<p>Both have 4 options:</p>\n<ol>\n<li>stretch - the default value</li>\n<li>center - at center</li>\n<li>start - sets the position to the left or top</li>\n<li>end - sets the position to the right or bottom</li>\n</ol>\n<p><img src=\"../../../../../assets/2_grid_item_position-image-1-add3024c.png\" alt=\"\"></p>\n<ul>\n<li>The properties have the name self, because they are used for the items.</li>\n</ul>\n",
      "id": 96
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/3_Flex_vs_Grid.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/3_Flex_vs_Grid.html",
      "content": "# 3. Flex vs Grid\nCreated Saturday 23 October 2021\n\n![](../../../../assets/3_Flex_vs_Grid-image-1-20bf43dd.png)\n\n- Flex: 1D controls (row or column, easy)\n- Grid: 2D controls\n- Prefer flex over grid if it's possible.",
      "html": "<h1 id=\"3.-flex-vs-grid\">3. Flex vs Grid <a class=\"heading-anchor-permalink\" href=\"#3.-flex-vs-grid\">#</a></h1>\n<p>Created Saturday 23 October 2021</p>\n<p><img src=\"../../../../assets/3_Flex_vs_Grid-image-1-20bf43dd.png\" alt=\"\"></p>\n<ul>\n<li>Flex: 1D controls (row or column, easy)</li>\n<li>Grid: 2D controls</li>\n<li>Prefer flex over grid if it’s possible.</li>\n</ul>\n",
      "id": 97
    },
    {
      "path": "vault/2_CSS/4_Layouts_-_flex,_grid/3_Floats.md",
      "url": "vault/2_CSS/4_Layouts_-_flex,_grid/3_Floats.html",
      "content": "# 3. Floats\nCreated Friday 03 December 2021\n\nwon't do\n- Nobody uses floats, and I haven't come across a scenario that required them.\n- `flex` is the new float, as per popular opinion.",
      "html": "<h1 id=\"3.-floats\">3. Floats <a class=\"heading-anchor-permalink\" href=\"#3.-floats\">#</a></h1>\n<p>Created Friday 03 December 2021</p>\n<p>won’t do</p>\n<ul>\n<li>Nobody uses floats, and I haven’t come across a scenario that required them.</li>\n<li><code>flex</code> is the new float, as per popular opinion.</li>\n</ul>\n",
      "id": 98
    },
    {
      "path": "vault/2_CSS/5_Positioning.md",
      "url": "vault/2_CSS/5_Positioning.html",
      "content": "# 5. Positioning\nCreated Sunday 25 April 2021\n\nAttribute: ``position``\nValues: 5 values available.\n\n1. `static` - the default, per document flow.\n2. `relative` - moves only if specified w.r.t the normal document flow. Not used generally.\n3. `absolute` - removed from document flow, set w.r.t the latest non-static ancestor. If nothing is found, set w.r.t body. Default is (left=0, top=0). `top`, `right`, `left` and `bottom` are needed to be set.\n4. `fixed` - fixed w.r.t the viewport, no matter what. `top`, `right`, `left` and `bottom` are needed to be set.\n5. `sticky` - behaves like `relative` (i.e. normal), until set `top`, `right`, `bottom` or `left` value becomes \"true\". Behaves like `fixed` from then on (if motion continues). If multiple sticky elements (on the same trail) are there, the newer activated one will replace the older one.\n\nExcept `position: static`, all other position types can specify `top`, `bottom`, `left` or `right` attributes with a length as value.\n\n* short for position type\n* These are used to define how a selection is position.\n* [All 5 positions, < 10 mins](https://www.youtube.com/watch?v=jx5jmI0UlXU)\n* [Sticky positioning < 8 min](https://www.youtube.com/watch?v=NzjU1GmKosQ)\n* [MDN position demo](https://developer.mozilla.org/en-US/docs/Web/CSS/position)",
      "html": "<h1 id=\"5.-positioning\">5. Positioning <a class=\"heading-anchor-permalink\" href=\"#5.-positioning\">#</a></h1>\n<p>Created Sunday 25 April 2021</p>\n<p>Attribute: <code>position</code>\nValues: 5 values available.</p>\n<ol>\n<li><code>static</code> - the default, per document flow.</li>\n<li><code>relative</code> - moves only if specified w.r.t the normal document flow. Not used generally.</li>\n<li><code>absolute</code> - removed from document flow, set w.r.t the latest non-static ancestor. If nothing is found, set w.r.t body. Default is (left=0, top=0). <code>top</code>, <code>right</code>, <code>left</code> and <code>bottom</code> are needed to be set.</li>\n<li><code>fixed</code> - fixed w.r.t the viewport, no matter what. <code>top</code>, <code>right</code>, <code>left</code> and <code>bottom</code> are needed to be set.</li>\n<li><code>sticky</code> - behaves like <code>relative</code> (i.e. normal), until set <code>top</code>, <code>right</code>, <code>bottom</code> or <code>left</code> value becomes “true”. Behaves like <code>fixed</code> from then on (if motion continues). If multiple sticky elements (on the same trail) are there, the newer activated one will replace the older one.</li>\n</ol>\n<p>Except <code>position: static</code>, all other position types can specify <code>top</code>, <code>bottom</code>, <code>left</code> or <code>right</code> attributes with a length as value.</p>\n<ul>\n<li>short for position type</li>\n<li>These are used to define how a selection is position.</li>\n<li><a href=\"https://www.youtube.com/watch?v=jx5jmI0UlXU\">All 5 positions, &lt; 10 mins</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=NzjU1GmKosQ\">Sticky positioning &lt; 8 min</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position\">MDN position demo</a></li>\n</ul>\n",
      "id": 99
    },
    {
      "path": "vault/2_CSS/6_Transition_and_Animations.md",
      "url": "vault/2_CSS/6_Transition_and_Animations.html",
      "content": "# 6. Transition and Animations\nCreated Sunday 25 April 2021\n\nFIXME populate section with content\n\n",
      "html": "<h1 id=\"6.-transition-and-animations\">6. Transition and Animations <a class=\"heading-anchor-permalink\" href=\"#6.-transition-and-animations\">#</a></h1>\n<p>Created Sunday 25 April 2021</p>\n<p>FIXME populate section with content</p>\n",
      "id": 100
    },
    {
      "path": "vault/2_CSS/7_Media_queries.md",
      "url": "vault/2_CSS/7_Media_queries.html",
      "content": "Need to write about them. I've only used size based ones with the min and max variation until now.",
      "html": "<p>Need to write about them. I’ve only used size based ones with the min and max variation until now.</p>\n",
      "id": 101
    },
    {
      "path": "vault/3_JavaScript/0_index.md",
      "url": "vault/3_JavaScript/0_index.html",
      "content": "# 3. JavaScript\nCreated Friday 25 December 2020\n\nResources:\n<https://javascript.info/> - Provides mostly everything you need about JS",
      "html": "<h1 id=\"3.-javascript\">3. JavaScript <a class=\"heading-anchor-permalink\" href=\"#3.-javascript\">#</a></h1>\n<p>Created Friday 25 December 2020</p>\n<p>Resources:\n<a href=\"https://javascript.info/\">https://javascript.info/</a> - Provides mostly everything you need about JS</p>\n",
      "id": 102
    },
    {
      "path": "vault/3_JavaScript/1_JS_Basics/0_index.md",
      "url": "vault/3_JavaScript/1_JS_Basics/0_index.html",
      "content": "# 1. JS Basics\nCreated Wednesday 08 July 2020\n\n![](../../../assets/0_index-image-1-3c35d827.png)\n(Top) - Share of the technologies generally used in web development.\n\n---\n\n- CSS feels difficult if done naively. Its somewhat arbitrary.\n- JS is for the app development.\n- Use JS to make apps and learn CSS and HTML while doing it.\n- This is the most practical path.",
      "html": "<h1 id=\"1.-js-basics\">1. JS Basics <a class=\"heading-anchor-permalink\" href=\"#1.-js-basics\">#</a></h1>\n<p>Created Wednesday 08 July 2020</p>\n<p><img src=\"../../../assets/0_index-image-1-3c35d827.png\" alt=\"\">\n(Top) - Share of the technologies generally used in web development.</p>\n<hr>\n<ul>\n<li>CSS feels difficult if done naively. Its somewhat arbitrary.</li>\n<li>JS is for the app development.</li>\n<li>Use JS to make apps and learn CSS and HTML while doing it.</li>\n<li>This is the most practical path.</li>\n</ul>\n",
      "id": 103
    },
    {
      "path": "vault/3_JavaScript/1_JS_Basics/1_JS_Setup.md",
      "url": "vault/3_JavaScript/1_JS_Basics/1_JS_Setup.html",
      "content": "# 1. JS Setup\nCreated Tuesday 14 July 2020\n\n#### **No-setup method**\n- Open developer tool aka DevTool, in a browser.\n- Write JS in the console\n\n#### **Dedicated setup(in the terminal)**\n- JavaScript needs the `node.js` interpreter to run outside the browser.\n- Steps for installing node\n\t1. Install [nvm](https://github.com/nvm-sh/nvm): easy to update/manage node versions. Similar to pyenv.\n\t2. Install `node` using `nvm` by running `nvm install insert_latest_version --lts`\n\n- `npm`(Node Package Manager) comes bundled with `node`\n- check version using `node -v`\n- As of Nov 2023, I use React, Express, React Native with Node v16 and they work without problems (so can install `16` if you're afraid of latest).\n\nNote:\n- Node is similar to the Python interpreter.\n- `node` is used for summoning the JavaScript REPL, at a CLI.\n- `npm` is used for installing node(javascript) packages. You don't need it for learning the JavaScript language.",
      "html": "<h1 id=\"1.-js-setup\">1. JS Setup <a class=\"heading-anchor-permalink\" href=\"#1.-js-setup\">#</a></h1>\n<p>Created Tuesday 14 July 2020</p>\n<h4 id=\"no-setup-method\"><strong>No-setup method</strong> <a class=\"heading-anchor-permalink\" href=\"#no-setup-method\">#</a></h4>\n<ul>\n<li>Open developer tool aka DevTool, in a browser.</li>\n<li>Write JS in the console</li>\n</ul>\n<h4 id=\"dedicated-setup(in-the-terminal)\"><strong>Dedicated setup(in the terminal)</strong> <a class=\"heading-anchor-permalink\" href=\"#dedicated-setup(in-the-terminal)\">#</a></h4>\n<ul>\n<li>\n<p>JavaScript needs the <code>node.js</code> interpreter to run outside the browser.</p>\n</li>\n<li>\n<p>Steps for installing node</p>\n<ol>\n<li>Install <a href=\"https://github.com/nvm-sh/nvm\">nvm</a>: easy to update/manage node versions. Similar to pyenv.</li>\n<li>Install <code>node</code> using <code>nvm</code> by running <code>nvm install insert_latest_version --lts</code></li>\n</ol>\n</li>\n<li>\n<p><code>npm</code>(Node Package Manager) comes bundled with <code>node</code></p>\n</li>\n<li>\n<p>check version using <code>node -v</code></p>\n</li>\n<li>\n<p>As of Nov 2023, I use React, Express, React Native with Node v16 and they work without problems (so can install <code>16</code> if you’re afraid of latest).</p>\n</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>Node is similar to the Python interpreter.</li>\n<li><code>node</code> is used for summoning the JavaScript REPL, at a CLI.</li>\n<li><code>npm</code> is used for installing node(javascript) packages. You don’t need it for learning the JavaScript language.</li>\n</ul>\n",
      "id": 104
    },
    {
      "path": "vault/3_JavaScript/1_JS_Basics/2_What_is_JavaScript.md",
      "url": "vault/3_JavaScript/1_JS_Basics/2_What_is_JavaScript.html",
      "content": "# 2. What is JavaScript\nCreated Wednesday 08 July 2020\n\n#### Info\n- It is a general purpose programming language.\n- Created by NetScape in 1995 to run in the browser.\n- It was(is?) a feature for the browser.\n- Initially, it was not standardised, just like HTML5, CSS3 for different browsers. This became a nightmare for developers.\n- It has now been standardized and is called ECMAScript. JavaScript and ECMAScript are used interchangeably.\n\n#### What can JavaScript do\n**In the browser**\n\n1. Create, delete or modify any part of a webpage.\n2. React to user input: clicks, pointer movements, key presses.\n3. Get and set cookies.\n4. Save data in the browser's \"local storage\".\n5. Manage requests over the network, but only with the current domain.\n\n**Outside the browser(with `node`)**\nAnything.\n\n1. Flying Drones\n2. Robotics\n\n![](../../../assets/2_What_is_JavaScript-image-1-3c35d827.png)\n\n- It can be used for quick development.\n\n#### [What Can't JS do(in the browser)](https://javascript.info/intro#what-can-t-in-browser-javascript-do)\n1. Cannot read/write arbitary files to disk, except via the browser's API, that too for upload/download.\n2. Different tabs/windows generally do not know about each other. This is called the “Same Origin Policy”. To work around that, both pages must agree for data exchange and contain a special JavaScript code that handles it. **JS can still open new tabs and windows.**\n3. No access to OS functions.\n4. Limited access to Camera/Microphone, provided explicitly by the user via the browser's API.\n\n- JavaScript's abilities in the browser are limited for the sake user safety. The aim is to prevent an evil webpage from accessing private information or harming the user's data.\n- No limits exist if JavaScript is used outside of the browser, e.g via `node`.\n- Modern browsers also allow plugin/extensions which may ask for extended permissions.\n\n#### Why use JavaScript\n- Single language for both front-end and back-end. Lesser things to learns, lesser tools.\n- Quite fast and stable.\n- Extremely good libraries and frameworks are available - React, Vue, Express\n- Easy to learn.\n- Portable.\n\n#### Languages \"over\" JavaScript\n- JS has been implemented in all browser, with most features.\n- JS is efficient, but the syntax is not liked by everyone.\n- JS is not suitable for complex apps.\n- So people created their own languages, which are transpiled to JS.\n- Examples:\n  1.  CofeeScript - adds \"syntactic sugar\", making code short and easy to write.\n  2.  TypeScript - adds \"strict data typing\" to make complex systems. By Microsoft.\n  3.  Dart - Used for mobile apps, but can transpile to JS. By Google.\n  4.  Brython - a Python transpiler. Supports pure Python development.\n  5.  Kotlin - modern, concise and safe language that can target the browser or `node`.\n\n#### What is `node`\nJavaScript was experimented with and was found to be quite fast. Consequently, the `node` interpreter was developed, for running JS as a general purpose programming language outside of the browser.\n",
      "html": "<h1 id=\"2.-what-is-javascript\">2. What is JavaScript <a class=\"heading-anchor-permalink\" href=\"#2.-what-is-javascript\">#</a></h1>\n<p>Created Wednesday 08 July 2020</p>\n<h4 id=\"info\">Info <a class=\"heading-anchor-permalink\" href=\"#info\">#</a></h4>\n<ul>\n<li>It is a general purpose programming language.</li>\n<li>Created by NetScape in 1995 to run in the browser.</li>\n<li>It was(is?) a feature for the browser.</li>\n<li>Initially, it was not standardised, just like HTML5, CSS3 for different browsers. This became a nightmare for developers.</li>\n<li>It has now been standardized and is called ECMAScript. JavaScript and ECMAScript are used interchangeably.</li>\n</ul>\n<h4 id=\"what-can-javascript-do\">What can JavaScript do <a class=\"heading-anchor-permalink\" href=\"#what-can-javascript-do\">#</a></h4>\n<p><strong>In the browser</strong></p>\n<ol>\n<li>Create, delete or modify any part of a webpage.</li>\n<li>React to user input: clicks, pointer movements, key presses.</li>\n<li>Get and set cookies.</li>\n<li>Save data in the browser’s “local storage”.</li>\n<li>Manage requests over the network, but only with the current domain.</li>\n</ol>\n<p><strong>Outside the browser(with <code>node</code>)</strong>\nAnything.</p>\n<ol>\n<li>Flying Drones</li>\n<li>Robotics</li>\n</ol>\n<p><img src=\"../../../assets/2_What_is_JavaScript-image-1-3c35d827.png\" alt=\"\"></p>\n<ul>\n<li>It can be used for quick development.</li>\n</ul>\n<h4 id=\"what-can%E2%80%99t-js-do(in-the-browser)\"><a href=\"https://javascript.info/intro#what-can-t-in-browser-javascript-do\">What Can’t JS do(in the browser)</a> <a class=\"heading-anchor-permalink\" href=\"#what-can%E2%80%99t-js-do(in-the-browser)\">#</a></h4>\n<ol>\n<li>Cannot read/write arbitary files to disk, except via the browser’s API, that too for upload/download.</li>\n<li>Different tabs/windows generally do not know about each other. This is called the “Same Origin Policy”. To work around that, both pages must agree for data exchange and contain a special JavaScript code that handles it. <strong>JS can still open new tabs and windows.</strong></li>\n<li>No access to OS functions.</li>\n<li>Limited access to Camera/Microphone, provided explicitly by the user via the browser’s API.</li>\n</ol>\n<ul>\n<li>JavaScript’s abilities in the browser are limited for the sake user safety. The aim is to prevent an evil webpage from accessing private information or harming the user’s data.</li>\n<li>No limits exist if JavaScript is used outside of the browser, e.g via <code>node</code>.</li>\n<li>Modern browsers also allow plugin/extensions which may ask for extended permissions.</li>\n</ul>\n<h4 id=\"why-use-javascript\">Why use JavaScript <a class=\"heading-anchor-permalink\" href=\"#why-use-javascript\">#</a></h4>\n<ul>\n<li>Single language for both front-end and back-end. Lesser things to learns, lesser tools.</li>\n<li>Quite fast and stable.</li>\n<li>Extremely good libraries and frameworks are available - React, Vue, Express</li>\n<li>Easy to learn.</li>\n<li>Portable.</li>\n</ul>\n<h4 id=\"languages-%E2%80%9Cover%E2%80%9D-javascript\">Languages “over” JavaScript <a class=\"heading-anchor-permalink\" href=\"#languages-%E2%80%9Cover%E2%80%9D-javascript\">#</a></h4>\n<ul>\n<li>JS has been implemented in all browser, with most features.</li>\n<li>JS is efficient, but the syntax is not liked by everyone.</li>\n<li>JS is not suitable for complex apps.</li>\n<li>So people created their own languages, which are transpiled to JS.</li>\n<li>Examples:\n<ol>\n<li>CofeeScript - adds “syntactic sugar”, making code short and easy to write.</li>\n<li>TypeScript - adds “strict data typing” to make complex systems. By Microsoft.</li>\n<li>Dart - Used for mobile apps, but can transpile to JS. By Google.</li>\n<li>Brython - a Python transpiler. Supports pure Python development.</li>\n<li>Kotlin - modern, concise and safe language that can target the browser or <code>node</code>.</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"what-is-node\">What is <code>node</code> <a class=\"heading-anchor-permalink\" href=\"#what-is-node\">#</a></h4>\n<p>JavaScript was experimented with and was found to be quite fast. Consequently, the <code>node</code> interpreter was developed, for running JS as a general purpose programming language outside of the browser.</p>\n",
      "id": 105
    },
    {
      "path": "vault/3_JavaScript/1_JS_Basics/3_Basic_JavaScript.md",
      "url": "vault/3_JavaScript/1_JS_Basics/3_Basic_JavaScript.html",
      "content": "# 3. Basic JavaScript\nCreated Wednesday 08 July 2020\n\n## Data types\n- JavaScript is dynamically typed.\n- There are 8 data types, divided into categories:\n\t- 7 primitives (immutable datum represented directly at the lowest level of the language)\n\t- 1 non primitive type - `object`\n- There are two composite types (both are technically `object`) though.\n\t- Array\n\t- Function - a callable object.\n\n| Popularity |   Name    |                 Used for                 |         Comment          |\n|:----------:|:---------:|:----------------------------------------:|:------------------------:|\n|     1      |  string   |         both strings, characters         |        Unicode OK        |\n|     2      |  number   |           integers and floats            |                          |\n|     3      |  boolean  |              boolean values              | true, false are keywords |\n|     4      |  object   |       Made of primitives, objects        |                          |\n|     5      | undefined | default value for uninitialized variable |       is an object       |\n|     6      |   null    |      sentinel value marking absence      |       is an object       |\n|     7      |  symbol   |          Store memory location           |                          |\n|     8      |  bigint   |     Number with arbitrary precision      |       added ES2020       |\n\n1. `number` - For both integers and floats.\n2. `bigint`\n3. `string` - both kinds of quotes are OK, you can even use backticks. Concatenation using `+`. Strings can be like numbers(and vice versa). e.g. '`2.3'*2 = 4.6`. ![Escape](../../../assets/3_Basic_JavaScript-image-1-3c35d827.png) character same as C++. Strings can span multiple lines.\n4. `boolean`(`true`/`false`)\n5. `Symbol`\n6. `undefined` - not been assigned(garbage values are avoided this way)\n7. `null`\n8. `object` - everything except the primitives is an `object`, including functions, arrays etc.\n\n- non-`object` types are called primitve data types.\n- Everything is an `object`, except primitives.\n- All primitives have `object` versions.\n\nNote:\n- An `object` in JS is simply a hashmap with key-value pairs. A key is always a `string`, and a value can be anything(primitives, functions, objects).\n- All primitives are immutable.\n\t- This is quite visible in case of strings.\n\t```js\n\tconst x = 'Sanjar';\n\tx[1] = '2'; // no error, but the operation doesn't happen\n\tx === 'Sanjar'; // true, no change\n\t```\n- `NaN` - result of number • nonNumber. It is a number.\n- `Infinity` - a `number`.\n\n### String\n- Single quotes and double quotes are equivalent.\n- Concatenate using `+`\n- Escape char and rules same as Python, C++, Java.\n- Numerical strings interact just like numbers, except concatenation. Like so:\n\n  '2' _ 3 // number 6\n  '2' _ '3.2' // number 6.4\n  '2' + '3' // string '23' - concatenation is concatenation\n\n- JS is loosely typed.\n\n## Variables\n- Declaration and intialization are separate concepts in JS. Declarations are a must.\n- There are 3 kinds of variables:\n  - **let** - simple variable(i.e. reassignable). Syntax: `let x = 0;`\n  - **const** - non reassignable variable(variable contents may be changed). Must be intialized with declaration. Same as C++'s `const`. Syntax `const k = 'stingy symbol table';`\n  - **var **- leaks out of block scope. Follows all other scoping rules. Syntax: `var k = 'var wars';`\n\n![](../../../assets/3_Basic_JavaScript-image-2-3c35d827.png)\n\n- All variables follow the same syntax - for declaration, initlialization, assignment, access. The syntax are:\n  - Declaration: `let x;`, `const p = 24;`, `var k = 'hi`';\n  - Initialization/assignment: `let x = 2;`, `p = 'sanjar`'\n  - Access(reading): Just write the variable name. `sum = x + y;`, `f(x)`.\n\nNote:\n1. Uninitialized variables store the value `undefined`😁️. Example: `let x; console.log(x) // undefined`\n2. Declarations can be chained. i.e `let x = 2, y = [1, 2], z = 3;`.\n3. Variables cannot be redeclared, except for `var`.\n4. **Avoid** using `var` in new codebases.\n5. Internally, _var,_ _let, const, function, class, function_ _are **all** [hoisted](https://stackoverflow.com/questions/31219420/are-variables-declared-with-let-or-const-hoisted/31222689#31222689). But only `var`, `function` and ``function_`are allocated memory(set to`undefined``).\n6. JavaScript has 4 scopes - local, enclosing, global, builtin. Same as python3. Discussed in detail\n7. All inner scopes can read/write to variables of outer scope. Just like C++.\n\n## Variable naming rules\n- Symbols → a-z, A-Z, 0-9, \\_, $\n- Rules:\n  - Name cannot start with a number\n  - Keywords cannot be used.\n- Basically, C++ rules with a dollar sign.\n- Note: You can use other language scripts like Cyrillic, Arabic etc. English is recommended.\n\n#### `var` vs `let`\n- The only difference is that var has a function scope, a more free scope. i.e it can leak out of top-level blocks, but not out of the function.\n\n  if(true)\n  var x = 2;\n  console.log(x); // prints 2, as x leaked out from the block, just like python3\n\n  // Run separately\n  if(true)\n  let x = 2; // x respects block scope, goes out of scope. Just like C++, Java\n  console.log(x); // Error x is undefined\n\n- So `var` has only two anomalies(w.r.t C++):\n  1.  It violates block scope, i.e leaks out to the nearest enclosing function scope.\n  2.  It can be redeclared.\n- `var` is identical to a python3 variable. Simple.💡️\n\n## Hoisting(JS feature)\n- Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (block or function).\n- Only declarations are hoisted, not initializations.\n- Gotchas about hoisting, there are 2:\n  - **Intialization** - During hoisting, memory is not allocated for `let`/`const`/`class` variables. `var`/`function`/`function*` are allocated memory(set to `undefined` or function body).\n  - **Temporal Dead Zone(`ReferenceError`)** - It refers to the _time_(_phase)_ between the declaration and intialization, for a variable. Accessing `let`/`const`/`class` variables before their declaration(in code) is an error `ReferenceError(variable not initalized)`. \n\t  - This is irrelevant for functions, since a pointer is saved and the JS engine will find and execute the function.\n\t  - It's relevant for variables, but only if you use before declaring, which almost nobody ever does. So, practically TDZ is irrelevant for variables too.\n\n**Note:** temporal dead zone does correlate with sections of the code, but it's actually a time period.\n\n- Common Question - What is the value of a `let` variable outside(after) the dead zone? `x` is set to `undefined`.\n- Note: Hoisting and scoping are unrelated.\n- Conclusion: Assume that people don't know about hoisitng. `let` and `const` were created for solving the problems with hoisting. Declare variables just like you would in C++, Python: nearest to first use.\n\n[Bad code](badCode.js)\n\n## Standard IO\n### Output\n- `console.log(variable)` - just like `print()` in Python3(newlines, virial). Works for both CLI and browser.\n- `alert(variable)`, for the browser. Alert is blocking: you have to click OK or press the Enter key.\n\n### Input\n- `prompt('message', defaultAnswer)` - same as `input()` in Python3. only for the browser.\n\n## Operators\n- All operators are the same(symbol and rules) as C++(bitwise, relational, increment/decrement(post and pre)), with some changes:\n  - Equality(string equivalent) - `==` and `!=`\n  - Equality(of value and type) - `===` and `!==`\n  - `**` does exponentiation of numbers.\n  - `>>>` - makes the number unsigned after the shift.\n- Shorthand operators are allowed.\n- Assignment expressions are allowed.\n\n## Code Structure\n- **Semicolons** - Using it at the end of a statement is preferred, because omitting it _can_ lead to error _sometimes_, if not all the time.\n- **Indendation** - JS is free-form.\n  - {} - code blocks\n  - () for **for**, **while **conditions.\n- **Comments**: same as C++, both multiline and inline.\n\n## Conditionals\n- _if_, _else_, _else if_, _ternary operator(?:;)_ - same as C++\n- *switch - *same as* C++*\n- JS does the concept of truthy values.\n\n## Loops\n- _for_, _while_, _do while - same as C++_\n- _continue_ and _break_ mean the same as C++.\n\n## Functions\n- No return/parameter type required.\n- Keyword `function` is used - like `def` in Python3\n- Name may be skipped for IIFE.\n- Default params are allowed in JS, rules same as C++.\n- Functions are always hoisted.\n- **return** ends the function(obviously). Function returns `undefined`, if return is absent.\n\n### Function types and syntax\n1.  Named function - just function.\n\t```js\n\tfunction foo(bar1, bar2)\n\t{\n\t// code\n\t}\n\t```\n2.  Anonymous functions - unhoisted. Use case - as a functor, an [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE)\n    ```js\n\tx.sort( function (a) { return Number(a); }) // functor as sorting criteria\n\t    // Don't call the functor, just specify it.\n\t\n\t    // IIFE - Immediately Invoked Function Expression\n\t    (\n\t    function(bar) { /_ code _/ }(option1)\n\t    )(option2)\n\t    // You have two option, use (option1) or (option2) depending on the situation.\n\t    // Enclosing () are a must - They prevent namespace pollution\n\t```\n3.  Lambda - passable anonymous functions. FIXME: can't have both.\n\t```js\n    let x = function() { // storing\n\t    return 2;\n    };\n\n    x(); // calling\n\t```\n4.  Inner functions - have their own content(scope). Not invocable outside parent function. Chain as many as you like.\n\t```js\n    function f()\n    {\n\t    function g() { /_code_/ }\n\t    \n\t    g() // invocation - OK\n\n        function k() { /* code */ } // so called 'sibling' function\n    }\n\n    g()// Error - g not defined\n\t```",
      "html": "<h1 id=\"3.-basic-javascript\">3. Basic JavaScript <a class=\"heading-anchor-permalink\" href=\"#3.-basic-javascript\">#</a></h1>\n<p>Created Wednesday 08 July 2020</p>\n<h2 id=\"data-types\">Data types <a class=\"heading-anchor-permalink\" href=\"#data-types\">#</a></h2>\n<ul>\n<li>JavaScript is dynamically typed.</li>\n<li>There are 8 data types, divided into categories:\n<ul>\n<li>7 primitives (immutable datum represented directly at the lowest level of the language)</li>\n<li>1 non primitive type - <code>object</code></li>\n</ul>\n</li>\n<li>There are two composite types (both are technically <code>object</code>) though.\n<ul>\n<li>Array</li>\n<li>Function - a callable object.</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Popularity</th>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Used for</th>\n<th style=\"text-align:center\">Comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">both strings, characters</td>\n<td style=\"text-align:center\">Unicode OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">number</td>\n<td style=\"text-align:center\">integers and floats</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">boolean values</td>\n<td style=\"text-align:center\">true, false are keywords</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">object</td>\n<td style=\"text-align:center\">Made of primitives, objects</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">undefined</td>\n<td style=\"text-align:center\">default value for uninitialized variable</td>\n<td style=\"text-align:center\">is an object</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">sentinel value marking absence</td>\n<td style=\"text-align:center\">is an object</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">symbol</td>\n<td style=\"text-align:center\">Store memory location</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">bigint</td>\n<td style=\"text-align:center\">Number with arbitrary precision</td>\n<td style=\"text-align:center\">added ES2020</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><code>number</code> - For both integers and floats.</li>\n<li><code>bigint</code></li>\n<li><code>string</code> - both kinds of quotes are OK, you can even use backticks. Concatenation using <code>+</code>. Strings can be like numbers(and vice versa). e.g. '<code>2.3'*2 = 4.6</code>. <img src=\"../../../assets/3_Basic_JavaScript-image-1-3c35d827.png\" alt=\"Escape\"> character same as C++. Strings can span multiple lines.</li>\n<li><code>boolean</code>(<code>true</code>/<code>false</code>)</li>\n<li><code>Symbol</code></li>\n<li><code>undefined</code> - not been assigned(garbage values are avoided this way)</li>\n<li><code>null</code></li>\n<li><code>object</code> - everything except the primitives is an <code>object</code>, including functions, arrays etc.</li>\n</ol>\n<ul>\n<li>non-<code>object</code> types are called primitve data types.</li>\n<li>Everything is an <code>object</code>, except primitives.</li>\n<li>All primitives have <code>object</code> versions.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>An <code>object</code> in JS is simply a hashmap with key-value pairs. A key is always a <code>string</code>, and a value can be anything(primitives, functions, objects).</li>\n<li>All primitives are immutable.\n<ul>\n<li>This is quite visible in case of strings.</li>\n</ul>\n<pre><code class=\"language-js\">const x = 'Sanjar';\nx[1] = '2'; // no error, but the operation doesn't happen\nx === 'Sanjar'; // true, no change\n</code></pre>\n</li>\n<li><code>NaN</code> - result of number • nonNumber. It is a number.</li>\n<li><code>Infinity</code> - a <code>number</code>.</li>\n</ul>\n<h3 id=\"string\">String <a class=\"heading-anchor-permalink\" href=\"#string\">#</a></h3>\n<ul>\n<li>\n<p>Single quotes and double quotes are equivalent.</p>\n</li>\n<li>\n<p>Concatenate using <code>+</code></p>\n</li>\n<li>\n<p>Escape char and rules same as Python, C++, Java.</p>\n</li>\n<li>\n<p>Numerical strings interact just like numbers, except concatenation. Like so:</p>\n<p>‘2’ _ 3 // number 6\n‘2’ _ ‘3.2’ // number 6.4\n‘2’ + ‘3’ // string ‘23’ - concatenation is concatenation</p>\n</li>\n<li>\n<p>JS is loosely typed.</p>\n</li>\n</ul>\n<h2 id=\"variables\">Variables <a class=\"heading-anchor-permalink\" href=\"#variables\">#</a></h2>\n<ul>\n<li>Declaration and intialization are separate concepts in JS. Declarations are a must.</li>\n<li>There are 3 kinds of variables:\n<ul>\n<li><strong>let</strong> - simple variable(i.e. reassignable). Syntax: <code>let x = 0;</code></li>\n<li><strong>const</strong> - non reassignable variable(variable contents may be changed). Must be intialized with declaration. Same as C++'s <code>const</code>. Syntax <code>const k = 'stingy symbol table';</code></li>\n<li>**var **- leaks out of block scope. Follows all other scoping rules. Syntax: <code>var k = 'var wars';</code></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"../../../assets/3_Basic_JavaScript-image-2-3c35d827.png\" alt=\"\"></p>\n<ul>\n<li>All variables follow the same syntax - for declaration, initlialization, assignment, access. The syntax are:\n<ul>\n<li>Declaration: <code>let x;</code>, <code>const p = 24;</code>, <code>var k = 'hi</code>';</li>\n<li>Initialization/assignment: <code>let x = 2;</code>, <code>p = 'sanjar</code>’</li>\n<li>Access(reading): Just write the variable name. <code>sum = x + y;</code>, <code>f(x)</code>.</li>\n</ul>\n</li>\n</ul>\n<p>Note:</p>\n<ol>\n<li>Uninitialized variables store the value <code>undefined</code>😁️. Example: <code>let x; console.log(x) // undefined</code></li>\n<li>Declarations can be chained. i.e <code>let x = 2, y = [1, 2], z = 3;</code>.</li>\n<li>Variables cannot be redeclared, except for <code>var</code>.</li>\n<li><strong>Avoid</strong> using <code>var</code> in new codebases.</li>\n<li>Internally, <em>var,</em> <em>let, const, function, class, function</em> _are <strong>all</strong> <a href=\"https://stackoverflow.com/questions/31219420/are-variables-declared-with-let-or-const-hoisted/31222689#31222689\">hoisted</a>. But only <code>var</code>, <code>function</code> and <code>function_`are allocated memory(set to`undefined</code>).</li>\n<li>JavaScript has 4 scopes - local, enclosing, global, builtin. Same as python3. Discussed in detail</li>\n<li>All inner scopes can read/write to variables of outer scope. Just like C++.</li>\n</ol>\n<h2 id=\"variable-naming-rules\">Variable naming rules <a class=\"heading-anchor-permalink\" href=\"#variable-naming-rules\">#</a></h2>\n<ul>\n<li>Symbols → a-z, A-Z, 0-9, _, $</li>\n<li>Rules:\n<ul>\n<li>Name cannot start with a number</li>\n<li>Keywords cannot be used.</li>\n</ul>\n</li>\n<li>Basically, C++ rules with a dollar sign.</li>\n<li>Note: You can use other language scripts like Cyrillic, Arabic etc. English is recommended.</li>\n</ul>\n<h4 id=\"var-vs-let\"><code>var</code> vs <code>let</code> <a class=\"heading-anchor-permalink\" href=\"#var-vs-let\">#</a></h4>\n<ul>\n<li>\n<p>The only difference is that var has a function scope, a more free scope. i.e it can leak out of top-level blocks, but not out of the function.</p>\n<p>if(true)\nvar x = 2;\nconsole.log(x); // prints 2, as x leaked out from the block, just like python3</p>\n<p>// Run separately\nif(true)\nlet x = 2; // x respects block scope, goes out of scope. Just like C++, Java\nconsole.log(x); // Error x is undefined</p>\n</li>\n<li>\n<p>So <code>var</code> has only two anomalies(w.r.t C++):</p>\n<ol>\n<li>It violates block scope, i.e leaks out to the nearest enclosing function scope.</li>\n<li>It can be redeclared.</li>\n</ol>\n</li>\n<li>\n<p><code>var</code> is identical to a python3 variable. Simple.💡️</p>\n</li>\n</ul>\n<h2 id=\"hoisting(js-feature)\">Hoisting(JS feature) <a class=\"heading-anchor-permalink\" href=\"#hoisting(js-feature)\">#</a></h2>\n<ul>\n<li>Hoisting is JavaScript’s default behavior of moving all declarations to the top of the current scope (block or function).</li>\n<li>Only declarations are hoisted, not initializations.</li>\n<li>Gotchas about hoisting, there are 2:\n<ul>\n<li><strong>Intialization</strong> - During hoisting, memory is not allocated for <code>let</code>/<code>const</code>/<code>class</code> variables. <code>var</code>/<code>function</code>/<code>function*</code> are allocated memory(set to <code>undefined</code> or function body).</li>\n<li><strong>Temporal Dead Zone(<code>ReferenceError</code>)</strong> - It refers to the <em>time</em>(<em>phase)</em> between the declaration and intialization, for a variable. Accessing <code>let</code>/<code>const</code>/<code>class</code> variables before their declaration(in code) is an error <code>ReferenceError(variable not initalized)</code>.\n<ul>\n<li>This is irrelevant for functions, since a pointer is saved and the JS engine will find and execute the function.</li>\n<li>It’s relevant for variables, but only if you use before declaring, which almost nobody ever does. So, practically TDZ is irrelevant for variables too.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>Note:</strong> temporal dead zone does correlate with sections of the code, but it’s actually a time period.</p>\n<ul>\n<li>Common Question - What is the value of a <code>let</code> variable outside(after) the dead zone? <code>x</code> is set to <code>undefined</code>.</li>\n<li>Note: Hoisting and scoping are unrelated.</li>\n<li>Conclusion: Assume that people don’t know about hoisitng. <code>let</code> and <code>const</code> were created for solving the problems with hoisting. Declare variables just like you would in C++, Python: nearest to first use.</li>\n</ul>\n<p><a href=\"badCode.js\">Bad code</a></p>\n<h2 id=\"standard-io\">Standard IO <a class=\"heading-anchor-permalink\" href=\"#standard-io\">#</a></h2>\n<h3 id=\"output\">Output <a class=\"heading-anchor-permalink\" href=\"#output\">#</a></h3>\n<ul>\n<li><code>console.log(variable)</code> - just like <code>print()</code> in Python3(newlines, virial). Works for both CLI and browser.</li>\n<li><code>alert(variable)</code>, for the browser. Alert is blocking: you have to click OK or press the Enter key.</li>\n</ul>\n<h3 id=\"input\">Input <a class=\"heading-anchor-permalink\" href=\"#input\">#</a></h3>\n<ul>\n<li><code>prompt('message', defaultAnswer)</code> - same as <code>input()</code> in Python3. only for the browser.</li>\n</ul>\n<h2 id=\"operators\">Operators <a class=\"heading-anchor-permalink\" href=\"#operators\">#</a></h2>\n<ul>\n<li>All operators are the same(symbol and rules) as C++(bitwise, relational, increment/decrement(post and pre)), with some changes:\n<ul>\n<li>Equality(string equivalent) - <code>==</code> and <code>!=</code></li>\n<li>Equality(of value and type) - <code>===</code> and <code>!==</code></li>\n<li><code>**</code> does exponentiation of numbers.</li>\n<li><code>&gt;&gt;&gt;</code> - makes the number unsigned after the shift.</li>\n</ul>\n</li>\n<li>Shorthand operators are allowed.</li>\n<li>Assignment expressions are allowed.</li>\n</ul>\n<h2 id=\"code-structure\">Code Structure <a class=\"heading-anchor-permalink\" href=\"#code-structure\">#</a></h2>\n<ul>\n<li><strong>Semicolons</strong> - Using it at the end of a statement is preferred, because omitting it <em>can</em> lead to error <em>sometimes</em>, if not all the time.</li>\n<li><strong>Indendation</strong> - JS is free-form.\n<ul>\n<li>{} - code blocks</li>\n<li>() for <strong>for</strong>, **while **conditions.</li>\n</ul>\n</li>\n<li><strong>Comments</strong>: same as C++, both multiline and inline.</li>\n</ul>\n<h2 id=\"conditionals\">Conditionals <a class=\"heading-anchor-permalink\" href=\"#conditionals\">#</a></h2>\n<ul>\n<li><em>if</em>, <em>else</em>, <em>else if</em>, <em>ternary operator(?:;)</em> - same as C++</li>\n<li><em>switch - <em>same as</em> C++</em></li>\n<li>JS does the concept of truthy values.</li>\n</ul>\n<h2 id=\"loops\">Loops <a class=\"heading-anchor-permalink\" href=\"#loops\">#</a></h2>\n<ul>\n<li><em>for</em>, <em>while</em>, <em>do while - same as C++</em></li>\n<li><em>continue</em> and <em>break</em> mean the same as C++.</li>\n</ul>\n<h2 id=\"functions\">Functions <a class=\"heading-anchor-permalink\" href=\"#functions\">#</a></h2>\n<ul>\n<li>No return/parameter type required.</li>\n<li>Keyword <code>function</code> is used - like <code>def</code> in Python3</li>\n<li>Name may be skipped for IIFE.</li>\n<li>Default params are allowed in JS, rules same as C++.</li>\n<li>Functions are always hoisted.</li>\n<li><strong>return</strong> ends the function(obviously). Function returns <code>undefined</code>, if return is absent.</li>\n</ul>\n<h3 id=\"function-types-and-syntax\">Function types and syntax <a class=\"heading-anchor-permalink\" href=\"#function-types-and-syntax\">#</a></h3>\n<ol>\n<li>Named function - just function.<pre><code class=\"language-js\">function foo(bar1, bar2)\n{\n// code\n}\n</code></pre>\n</li>\n<li>Anonymous functions - unhoisted. Use case - as a functor, an <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\">IIFE</a><pre><code class=\"language-js\">x.sort( function (a) { return Number(a); }) // functor as sorting criteria\n    // Don't call the functor, just specify it.\n\n    // IIFE - Immediately Invoked Function Expression\n    (\n    function(bar) { /_ code _/ }(option1)\n    )(option2)\n    // You have two option, use (option1) or (option2) depending on the situation.\n    // Enclosing () are a must - They prevent namespace pollution\n</code></pre>\n</li>\n<li>Lambda - passable anonymous functions. FIXME: can’t have both.<pre><code class=\"language-js\">let x = function() { // storing\n    return 2;\n};\n\nx(); // calling\n</code></pre>\n</li>\n<li>Inner functions - have their own content(scope). Not invocable outside parent function. Chain as many as you like.<pre><code class=\"language-js\">function f()\n{\n    function g() { /_code_/ }\n    \n    g() // invocation - OK\n\n    function k() { /* code */ } // so called 'sibling' function\n}\n\ng()// Error - g not defined\n</code></pre>\n</li>\n</ol>\n",
      "id": 106
    },
    {
      "path": "vault/3_JavaScript/1_JS_Basics/4_Using_JS.md",
      "url": "vault/3_JavaScript/1_JS_Basics/4_Using_JS.html",
      "content": "# 4. Using JS\nCreated Wednesday 08 July 2020\n\n## In the browser\n- Using the `<script>` `</script>` tag.\n\nThere are 2 ways to add JS code:\n1. Add it as content of the `script` tag.\n\t```html\n\t<!-- Method 1, direct -->\n\t<body>\n\t<script> var x = 2; </script>\n\t<body>\n\t```\n2. Add code from a `.js` file using `src` attribute. `script` is still a content tag.\n\t```html\n\t<!-- Method 2, src -->\n\t<body>\n\t<script src=\"path\"></script> <!-- Leave tag content empty -->\n\t<body>\n\t```\n\nNote:\n- Keep the `script` tag at the end of the `body` tag, and never in the head. Reason: Executing/downloading `script` content blocks the rendering process. *Or*, add the `defer` attribute to the `script` tag, place it anywhere now.\n\n## In the terminal\n- Write code in `.js` files.\n- Run them using `node file.js` in a terminal.\n\n#### REPL\n- Start the REPL using `node` command.\n\n#### Differences\n- In the browser, you may use objects like `window`, but this is an error in the terminal.\n- UI APIs like `document` are also absent.",
      "html": "<h1 id=\"4.-using-js\">4. Using JS <a class=\"heading-anchor-permalink\" href=\"#4.-using-js\">#</a></h1>\n<p>Created Wednesday 08 July 2020</p>\n<h2 id=\"in-the-browser\">In the browser <a class=\"heading-anchor-permalink\" href=\"#in-the-browser\">#</a></h2>\n<ul>\n<li>Using the <code>&lt;script&gt;</code> <code>&lt;/script&gt;</code> tag.</li>\n</ul>\n<p>There are 2 ways to add JS code:</p>\n<ol>\n<li>Add it as content of the <code>script</code> tag.<pre><code class=\"language-html\">&lt;!-- Method 1, direct --&gt;\n&lt;body&gt;\n&lt;script&gt; var x = 2; &lt;/script&gt;\n&lt;body&gt;\n</code></pre>\n</li>\n<li>Add code from a <code>.js</code> file using <code>src</code> attribute. <code>script</code> is still a content tag.<pre><code class=\"language-html\">&lt;!-- Method 2, src --&gt;\n&lt;body&gt;\n&lt;script src=&quot;path&quot;&gt;&lt;/script&gt; &lt;!-- Leave tag content empty --&gt;\n&lt;body&gt;\n</code></pre>\n</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>Keep the <code>script</code> tag at the end of the <code>body</code> tag, and never in the head. Reason: Executing/downloading <code>script</code> content blocks the rendering process. <em>Or</em>, add the <code>defer</code> attribute to the <code>script</code> tag, place it anywhere now.</li>\n</ul>\n<h2 id=\"in-the-terminal\">In the terminal <a class=\"heading-anchor-permalink\" href=\"#in-the-terminal\">#</a></h2>\n<ul>\n<li>Write code in <code>.js</code> files.</li>\n<li>Run them using <code>node file.js</code> in a terminal.</li>\n</ul>\n<h4 id=\"repl\">REPL <a class=\"heading-anchor-permalink\" href=\"#repl\">#</a></h4>\n<ul>\n<li>Start the REPL using <code>node</code> command.</li>\n</ul>\n<h4 id=\"differences\">Differences <a class=\"heading-anchor-permalink\" href=\"#differences\">#</a></h4>\n<ul>\n<li>In the browser, you may use objects like <code>window</code>, but this is an error in the terminal.</li>\n<li>UI APIs like <code>document</code> are also absent.</li>\n</ul>\n",
      "id": 107
    },
    {
      "path": "vault/3_JavaScript/1_JS_Basics/5_Basic_Data_Structures.md",
      "url": "vault/3_JavaScript/1_JS_Basics/5_Basic_Data_Structures.html",
      "content": "# 5. Basic Data Structures\nCreated Thursday 09 July 2020\n\n## Array\n- Array is dynamic.\n- Syntax\n\n```js\nlet list = [1, \"two\" , [3,4] ]; // mixing and nesting is OK\n```\n\n- Arrays are objects, and are assigned as references.\n- Array may be pooled. However, this doesn't affect the code.\n- Array API\n\n| Action                        | Code                                             | Return Value     | Comment                                                                                           |\n|:----------------------------- |:------------------------------------------------ |:---------------- |:------------------------------------------------------------------------------------------------- |\n| Access Element                | A[0], or A.at(0) (supports negative indexes)     | element          | Same as C++                                                                                       |\n| Get length                    | A.length                                         | length(number)   | This property is readable/writable: it can change array size.                                     |\n| Check if element in array     | `A.includes(x)`                                  | Boolean          |                                                                                                   |\n| Append                        | A.push(newVal)                                   | new length       |                                                                                                   |\n| Remove tail                   | A.pop()                                          | removed element  | returns removed element. Error if array is empty.                                                 |\n| splice(changes memory)        | A.splice(goal_index, \\#deletions, val1, val2...) | deleted array    | Delete \\#deletion elements and add val1, val2 etc at goal index(inclusive).                       |\n| Remove at index               | A.splice(destination_index, 1)                   | element          | Removes ith element                                                                               |\n| Remove head                   | A.splice(0, 1)                                   | element          |                                                                                                   |\n| Resize Array                  | A.length = new_length;                           | length(number)   |                                                                                                   |\n| slice(extract subarray)       | A.slice(start, length=A.length)                  | extracted array  | No change in array, just like substr in C++                                                       |\n| Clear(current reference only) | A = []                                           | void             | No change at memory location.                                                                     |\n| Deep copy                     | `structuredClone(A)`                             | array            | Shipped to browsers 2022                                                                          |\n| Fake deep copy (change shell) | B = \\[...A]                                      |                  | New memory allocated, same behavior for array literal rvalue.                                     |\n| reverse array                 | A.reverse()                                      |                  | Inplace and reference as return value.                                                            |\n| Expand/Decrease array size    | A.length = new_length                            |                  | Change is in-place.                                                                               |\n| Linear Search                 | A.indexOf(key)                                   | number (integer) | Returns -1 if key not found. Returns leftmost key index (if duplicates).                          |\n| Reverse Linear Search         | A.lastIndexOf(key)                               | Extended ops     |                                                                                                   |\n| sort                          | A.sort(criteriaFunction=LexCompare)              | sorted array     | function (a, b) { return numericDifference}; Return negative (swap yes), 0 or positive (no swap). |\n| join array of strings         | A.join(sep='')                                   | string           |                                                                                                   |\n\n- Array can have empty values. Workaround: `Array(10).fill(null)`\n- The [spread operator](4._Advanced_Arrays.md) is indispensible. It is used almost everywhere.\n\n## Object\n- Objects - It is a set of key-value pairs.\n- `Object` is a keyword.\n- Syntax:\n```js\nvar user = {\n  name: \"John\",\n  age:34,\n  hobby: \"Socccer\",\n  isMarried: false, // , does not matter\n  shout: function(){ console.log(this.name);}, // method, can use 'this'.\n  };\n\n  user.favoriteFood = \"spinach\"; // add a member to an object\n  user['favoriteFood'] = \"spinach\"; // same as above\n```\n- `undefined` - unitialized value, or accessed non-existent key in object. Example: \n\t```js\n\tconst x = { name: 'Alice' }; // x['Bob']\n\t```\n- `null` - Represents the state of being empty(consider like a null pointer). `null` and {}(empty object) are different.\n- Properties can be accessed by `objectA.property_name` or `objectA[property_name]`.\n- Check key membership - `x.hasOwnProperty('fieldName')`\n- `this` is not accessible if the method is run after isolation.\n- Objects are not index sub-scriptable. Unless the key used is deliberately a number.\n\n\n## String\n- `string` is a primitive type.\n- Strings are dynamically sized, immutable in JS.\n- String API - no in-place ops.\n\n| Action                     | Code                           | Return Value     | Comment                                                             |\n|:-------------------------- |:------------------------------ |:---------------- |:------------------------------------------------------------------- |\n| Access Element             | s.charAt(index)                | string           | [] works too. But fails for edge cases - 'hello'\\[true] is an error |\n| string exists within       | `s.includes(x)`                | Boolean          |                                                                     |\n| Get length                 | s.length                       | length(number)   | This property is readable/writable: it can change array size.       |\n| Concatenation              | a+b                            | string           | Works with non-string                                               |\n| Char --> ASCII number      | s.charCodeAt(index)            | number           |                                                                     |\n| ASCII --> character        | String.fromCharCode(65)        | string           | Need to use String class                                            |\n| Substring                  | s.substr(start, len=A.length)  | removed element  | start, length based extraction                                      |\n| Slice                      | s.slice(start, end=end)        | extracted array  | \\[start, end) based extraction                                      |\n| UpperCase                  | s.toLocaleUpperCase(lang='en') |                  | same as toUpperCase() for EN. Similar syntax for lowercase.         |\n| Reverse string             | s.split(`).reverse().join(`)   |                  | Inplace and reference as return value.                              |\n| Expand/Decrease array size | A.length = new_length          |                  | Change is in-place.                                                 |\n|                            |                                |                  |                                                                     |\n|                            |                                | Extended ops     |                                                                     |\n| Prefix membership          | s.startsWith(key_string)       | boolean          | Same as Python3                                                     |\n| Suffic membership          | s.endsWith                     | boolean          | Same as Python3                                                     |\n| Split                      | s.spit(delim=undefined)        | array of strings | No splitting without delimiter                                      |\n| Trim whitespace            | s.trim()                       | array            | No arguments. trimLeft, trimRight are available.                    |\n\n\n## Resources:\n- [TIme Complexity of popular ops](https://dev.to/lukocastillo/time-complexity-big-0-for-javascript-array-methods-and-examples-mlg)\n",
      "html": "<h1 id=\"5.-basic-data-structures\">5. Basic Data Structures <a class=\"heading-anchor-permalink\" href=\"#5.-basic-data-structures\">#</a></h1>\n<p>Created Thursday 09 July 2020</p>\n<h2 id=\"array\">Array <a class=\"heading-anchor-permalink\" href=\"#array\">#</a></h2>\n<ul>\n<li>Array is dynamic.</li>\n<li>Syntax</li>\n</ul>\n<pre><code class=\"language-js\">let list = [1, &quot;two&quot; , [3,4] ]; // mixing and nesting is OK\n</code></pre>\n<ul>\n<li>Arrays are objects, and are assigned as references.</li>\n<li>Array may be pooled. However, this doesn’t affect the code.</li>\n<li>Array API</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Action</th>\n<th style=\"text-align:left\">Code</th>\n<th style=\"text-align:left\">Return Value</th>\n<th style=\"text-align:left\">Comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Access Element</td>\n<td style=\"text-align:left\">A[0], or <a href=\"http://A.at\">A.at</a>(0) (supports negative indexes)</td>\n<td style=\"text-align:left\">element</td>\n<td style=\"text-align:left\">Same as C++</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Get length</td>\n<td style=\"text-align:left\">A.length</td>\n<td style=\"text-align:left\">length(number)</td>\n<td style=\"text-align:left\">This property is readable/writable: it can change array size.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Check if element in array</td>\n<td style=\"text-align:left\"><code>A.includes(x)</code></td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Append</td>\n<td style=\"text-align:left\">A.push(newVal)</td>\n<td style=\"text-align:left\">new length</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Remove tail</td>\n<td style=\"text-align:left\">A.pop()</td>\n<td style=\"text-align:left\">removed element</td>\n<td style=\"text-align:left\">returns removed element. Error if array is empty.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">splice(changes memory)</td>\n<td style=\"text-align:left\">A.splice(goal_index, #deletions, val1, val2…)</td>\n<td style=\"text-align:left\">deleted array</td>\n<td style=\"text-align:left\">Delete #deletion elements and add val1, val2 etc at goal index(inclusive).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Remove at index</td>\n<td style=\"text-align:left\">A.splice(destination_index, 1)</td>\n<td style=\"text-align:left\">element</td>\n<td style=\"text-align:left\">Removes ith element</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Remove head</td>\n<td style=\"text-align:left\">A.splice(0, 1)</td>\n<td style=\"text-align:left\">element</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Resize Array</td>\n<td style=\"text-align:left\">A.length = new_length;</td>\n<td style=\"text-align:left\">length(number)</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">slice(extract subarray)</td>\n<td style=\"text-align:left\">A.slice(start, length=A.length)</td>\n<td style=\"text-align:left\">extracted array</td>\n<td style=\"text-align:left\">No change in array, just like substr in C++</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Clear(current reference only)</td>\n<td style=\"text-align:left\">A = []</td>\n<td style=\"text-align:left\">void</td>\n<td style=\"text-align:left\">No change at memory location.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Deep copy</td>\n<td style=\"text-align:left\"><code>structuredClone(A)</code></td>\n<td style=\"text-align:left\">array</td>\n<td style=\"text-align:left\">Shipped to browsers 2022</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Fake deep copy (change shell)</td>\n<td style=\"text-align:left\">B = […A]</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">New memory allocated, same behavior for array literal rvalue.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">reverse array</td>\n<td style=\"text-align:left\">A.reverse()</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">Inplace and reference as return value.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Expand/Decrease array size</td>\n<td style=\"text-align:left\">A.length = new_length</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">Change is in-place.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Linear Search</td>\n<td style=\"text-align:left\">A.indexOf(key)</td>\n<td style=\"text-align:left\">number (integer)</td>\n<td style=\"text-align:left\">Returns -1 if key not found. Returns leftmost key index (if duplicates).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Reverse Linear Search</td>\n<td style=\"text-align:left\">A.lastIndexOf(key)</td>\n<td style=\"text-align:left\">Extended ops</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sort</td>\n<td style=\"text-align:left\">A.sort(criteriaFunction=LexCompare)</td>\n<td style=\"text-align:left\">sorted array</td>\n<td style=\"text-align:left\">function (a, b) { return numericDifference}; Return negative (swap yes), 0 or positive (no swap).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">join array of strings</td>\n<td style=\"text-align:left\">A.join(sep=’’)</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Array can have empty values. Workaround: <code>Array(10).fill(null)</code></li>\n<li>The <a href=\"4._Advanced_Arrays.html\">spread operator</a> is indispensible. It is used almost everywhere.</li>\n</ul>\n<h2 id=\"object\">Object <a class=\"heading-anchor-permalink\" href=\"#object\">#</a></h2>\n<ul>\n<li>Objects - It is a set of key-value pairs.</li>\n<li><code>Object</code> is a keyword.</li>\n<li>Syntax:</li>\n</ul>\n<pre><code class=\"language-js\">var user = {\n  name: &quot;John&quot;,\n  age:34,\n  hobby: &quot;Socccer&quot;,\n  isMarried: false, // , does not matter\n  shout: function(){ console.log(this.name);}, // method, can use 'this'.\n  };\n\n  user.favoriteFood = &quot;spinach&quot;; // add a member to an object\n  user['favoriteFood'] = &quot;spinach&quot;; // same as above\n</code></pre>\n<ul>\n<li><code>undefined</code> - unitialized value, or accessed non-existent key in object. Example:<pre><code class=\"language-js\">const x = { name: 'Alice' }; // x['Bob']\n</code></pre>\n</li>\n<li><code>null</code> - Represents the state of being empty(consider like a null pointer). <code>null</code> and {}(empty object) are different.</li>\n<li>Properties can be accessed by <code>objectA.property_name</code> or <code>objectA[property_name]</code>.</li>\n<li>Check key membership - <code>x.hasOwnProperty('fieldName')</code></li>\n<li><code>this</code> is not accessible if the method is run after isolation.</li>\n<li>Objects are not index sub-scriptable. Unless the key used is deliberately a number.</li>\n</ul>\n<h2 id=\"string\">String <a class=\"heading-anchor-permalink\" href=\"#string\">#</a></h2>\n<ul>\n<li><code>string</code> is a primitive type.</li>\n<li>Strings are dynamically sized, immutable in JS.</li>\n<li>String API - no in-place ops.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Action</th>\n<th style=\"text-align:left\">Code</th>\n<th style=\"text-align:left\">Return Value</th>\n<th style=\"text-align:left\">Comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Access Element</td>\n<td style=\"text-align:left\">s.charAt(index)</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">[] works too. But fails for edge cases - ‘hello’[true] is an error</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string exists within</td>\n<td style=\"text-align:left\"><code>s.includes(x)</code></td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Get length</td>\n<td style=\"text-align:left\">s.length</td>\n<td style=\"text-align:left\">length(number)</td>\n<td style=\"text-align:left\">This property is readable/writable: it can change array size.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Concatenation</td>\n<td style=\"text-align:left\">a+b</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">Works with non-string</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Char --&gt; ASCII number</td>\n<td style=\"text-align:left\">s.charCodeAt(index)</td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ASCII --&gt; character</td>\n<td style=\"text-align:left\">String.fromCharCode(65)</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">Need to use String class</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Substring</td>\n<td style=\"text-align:left\">s.substr(start, len=A.length)</td>\n<td style=\"text-align:left\">removed element</td>\n<td style=\"text-align:left\">start, length based extraction</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Slice</td>\n<td style=\"text-align:left\">s.slice(start, end=end)</td>\n<td style=\"text-align:left\">extracted array</td>\n<td style=\"text-align:left\">[start, end) based extraction</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UpperCase</td>\n<td style=\"text-align:left\">s.toLocaleUpperCase(lang=‘en’)</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">same as toUpperCase() for EN. Similar syntax for lowercase.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Reverse string</td>\n<td style=\"text-align:left\">s.split(<code>).reverse().join(</code>)</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">Inplace and reference as return value.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Expand/Decrease array size</td>\n<td style=\"text-align:left\">A.length = new_length</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">Change is in-place.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">Extended ops</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Prefix membership</td>\n<td style=\"text-align:left\">s.startsWith(key_string)</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">Same as Python3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Suffic membership</td>\n<td style=\"text-align:left\">s.endsWith</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">Same as Python3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Split</td>\n<td style=\"text-align:left\">s.spit(delim=undefined)</td>\n<td style=\"text-align:left\">array of strings</td>\n<td style=\"text-align:left\">No splitting without delimiter</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Trim whitespace</td>\n<td style=\"text-align:left\">s.trim()</td>\n<td style=\"text-align:left\">array</td>\n<td style=\"text-align:left\">No arguments. trimLeft, trimRight are available.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"resources%3A\">Resources: <a class=\"heading-anchor-permalink\" href=\"#resources%3A\">#</a></h2>\n<ul>\n<li><a href=\"https://dev.to/lukocastillo/time-complexity-big-0-for-javascript-array-methods-and-examples-mlg\">TIme Complexity of popular ops</a></li>\n</ul>\n",
      "id": 108
    },
    {
      "path": "vault/3_JavaScript/2_DOM_Manipulation/0_index.md",
      "url": "vault/3_JavaScript/2_DOM_Manipulation/0_index.html",
      "content": "# 2. DOM Manipulation\nCreated Friday 10 July 2020\n\n- Up until now, we've been writing HTML, CSS and using JS to control effects on the page, but not really.\n- Using JS we can change everything from HTML elements, attributes to CSS effects on the page. This is truly a power.\n\n### Browser powers of JS\n- change any HTML element, attribute in a page.\n- change any CSS styles on a page.\n- remove existing HTML elements and attributes\n- add new HTML elements and attributes\n- JavaScript can create/edit/delete HTML *events *for any element in a page\n\n## JS being the primary web lang\nWe could do some of the change to a website even without JS, just by using new HTML and CSS files.\ne.g\n- Option A\n\tLoad the index.html ![](../../../assets/0_index-image-1-a09ebfc7.png)\n\tNeed about.html, get it ![](../../../assets/0_index-image-2-a09ebfc7.png)\n\t\n\tget about.html ![](../../../assets/0_index-image-3-a09ebfc7.png)\n\tBut this increases the latency(4x transit time) and therefore hampers user experience.\n- Option B\n\tWe just keep the instructions to change the html page, by just sending the JS. This reduces the data flow. No extra CSS or JS files are required.\n\t\n\tWe can build fast and interactive sites (fast, so app?) this way. This is the key idea behind single page apps (React, Vue, Angular apps) - only an initial HTML file (aka shell) is sent. It has links for JS. The JS then creates all the DOM, and fetches any required CSS.\n\t![](../../../assets/0_index-image-4-a09ebfc7.png)\n\n## Next\nTo do all this, we need understand two things:\n1. DOM\n2. JS engine\n",
      "html": "<h1 id=\"2.-dom-manipulation\">2. DOM Manipulation <a class=\"heading-anchor-permalink\" href=\"#2.-dom-manipulation\">#</a></h1>\n<p>Created Friday 10 July 2020</p>\n<ul>\n<li>Up until now, we’ve been writing HTML, CSS and using JS to control effects on the page, but not really.</li>\n<li>Using JS we can change everything from HTML elements, attributes to CSS effects on the page. This is truly a power.</li>\n</ul>\n<h3 id=\"browser-powers-of-js\">Browser powers of JS <a class=\"heading-anchor-permalink\" href=\"#browser-powers-of-js\">#</a></h3>\n<ul>\n<li>change any HTML element, attribute in a page.</li>\n<li>change any CSS styles on a page.</li>\n<li>remove existing HTML elements and attributes</li>\n<li>add new HTML elements and attributes</li>\n<li>JavaScript can create/edit/delete HTML *events *for any element in a page</li>\n</ul>\n<h2 id=\"js-being-the-primary-web-lang\">JS being the primary web lang <a class=\"heading-anchor-permalink\" href=\"#js-being-the-primary-web-lang\">#</a></h2>\n<p>We could do some of the change to a website even without JS, just by using new HTML and CSS files.\ne.g</p>\n<ul>\n<li>\n<p>Option A\nLoad the index.html <img src=\"../../../assets/0_index-image-1-a09ebfc7.png\" alt=\"\">\nNeed about.html, get it <img src=\"../../../assets/0_index-image-2-a09ebfc7.png\" alt=\"\"></p>\n<p>get about.html <img src=\"../../../assets/0_index-image-3-a09ebfc7.png\" alt=\"\">\nBut this increases the latency(4x transit time) and therefore hampers user experience.</p>\n</li>\n<li>\n<p>Option B\nWe just keep the instructions to change the html page, by just sending the JS. This reduces the data flow. No extra CSS or JS files are required.</p>\n<p>We can build fast and interactive sites (fast, so app?) this way. This is the key idea behind single page apps (React, Vue, Angular apps) - only an initial HTML file (aka shell) is sent. It has links for JS. The JS then creates all the DOM, and fetches any required CSS.\n<img src=\"../../../assets/0_index-image-4-a09ebfc7.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"next\">Next <a class=\"heading-anchor-permalink\" href=\"#next\">#</a></h2>\n<p>To do all this, we need understand two things:</p>\n<ol>\n<li>DOM</li>\n<li>JS engine</li>\n</ol>\n",
      "id": 109
    },
    {
      "path": "vault/3_JavaScript/2_DOM_Manipulation/1_DOM_and_JS_Engine.md",
      "url": "vault/3_JavaScript/2_DOM_Manipulation/1_DOM_and_JS_Engine.html",
      "content": "# 1. DOM and JS Engine\nCreated Saturday 11 July 2020\n\n## The DOM (Document Object Model)\nWe assumed, until now that HTML is _just_ rendered by the browser. Now, before rendering, there needs to be some concrete representation of the HTML in memory. This representation is called the **Document Object Model**(DOM). It is created by the browser as soon as the HTML is received.\n\n- It is simply a tree structure (document) that represents the skeleton(structure) of the webpage.\n- If we can edit the document, we can effectively change the whole page.\n- Strictlys speaking, it has got nothing to do with CSS or JS, even if they are present. Small [caveat](https://bitsofco.de/what-exactly-is-the-dom/) regarding JS though.\n\n![](../../../assets/1_DOM_and_JS_Engine-image-1-a09ebfc7.png)\n**The HTML DOM is a standard for how to get, change, add, or delete HTML elements.**\n\n---\n\n- The whole page is stored(in memory) as an object named **document**\n- It does not look like an object because Chrome recognized it's a special object, but it is still a JS object.\n\t![](../../../assets/1_DOM_and_JS_Engine-image-2-a09ebfc7.png)\n\n```js\ndocument.write('Hello'); // document the write method\n```\n\n**Think of the **document** object as the skeleton of the screen that we see(with our eyes).**\nNote: DOM and document are used interchangeably.\n[DOM vs CSS vs reality](https://bitsofco.de/what-exactly-is-the-dom/#:~:text=This%20is%20because%20the%20DOM,styles%20applied%20to%20the%20element.)\n\n\n## The JS Engine\n- We assumed that JS is just loaded and run in the browser, but how?\n- Every browser has an interpreter to run JS code.\n- Some popular ones (and apps using them) are\n  1.  V8 - Chrome and Node.js\n  2.  ChakraCore - IE and Microsoft Edge\n  3.  SpiderMonkey - Firefox and other stuff. GNOME3 shell.\n  4.  Nitros - Safari\n- These engines execute the JavaScript line by line.\n\n## `window` and `document` objects\n- The document has a parent object called the `window` - represents the current tab.\n- The `window` object also has the `alert()`, `prompt()` functions including the `document` object itself.\n\t![](../../../assets/1_DOM_and_JS_Engine-image-3-a09ebfc7.png)\n- `window` is the default object if unspecified, i.e f() ↔ window.f()\n\nNote: window cannot be written to for UI stuff usually, because it is just the action part.\n```js\nwindow.write(  '<p>abcd</p>'); // error\ndocument.write('<p>abcd</p>'); // Okay\n```",
      "html": "<h1 id=\"1.-dom-and-js-engine\">1. DOM and JS Engine <a class=\"heading-anchor-permalink\" href=\"#1.-dom-and-js-engine\">#</a></h1>\n<p>Created Saturday 11 July 2020</p>\n<h2 id=\"the-dom-(document-object-model)\">The DOM (Document Object Model) <a class=\"heading-anchor-permalink\" href=\"#the-dom-(document-object-model)\">#</a></h2>\n<p>We assumed, until now that HTML is <em>just</em> rendered by the browser. Now, before rendering, there needs to be some concrete representation of the HTML in memory. This representation is called the <strong>Document Object Model</strong>(DOM). It is created by the browser as soon as the HTML is received.</p>\n<ul>\n<li>It is simply a tree structure (document) that represents the skeleton(structure) of the webpage.</li>\n<li>If we can edit the document, we can effectively change the whole page.</li>\n<li>Strictlys speaking, it has got nothing to do with CSS or JS, even if they are present. Small <a href=\"https://bitsofco.de/what-exactly-is-the-dom/\">caveat</a> regarding JS though.</li>\n</ul>\n<p><img src=\"../../../assets/1_DOM_and_JS_Engine-image-1-a09ebfc7.png\" alt=\"\">\n<strong>The HTML DOM is a standard for how to get, change, add, or delete HTML elements.</strong></p>\n<hr>\n<ul>\n<li>The whole page is stored(in memory) as an object named <strong>document</strong></li>\n<li>It does not look like an object because Chrome recognized it’s a special object, but it is still a JS object.\n<img src=\"../../../assets/1_DOM_and_JS_Engine-image-2-a09ebfc7.png\" alt=\"\"></li>\n</ul>\n<pre><code class=\"language-js\">document.write('Hello'); // document the write method\n</code></pre>\n<p><strong>Think of the <strong>document</strong> object as the skeleton of the screen that we see(with our eyes).</strong>\nNote: DOM and document are used interchangeably.\n<a href=\"https://bitsofco.de/what-exactly-is-the-dom/#:~:text=This%20is%20because%20the%20DOM,styles%20applied%20to%20the%20element.\">DOM vs CSS vs reality</a></p>\n<h2 id=\"the-js-engine\">The JS Engine <a class=\"heading-anchor-permalink\" href=\"#the-js-engine\">#</a></h2>\n<ul>\n<li>We assumed that JS is just loaded and run in the browser, but how?</li>\n<li>Every browser has an interpreter to run JS code.</li>\n<li>Some popular ones (and apps using them) are\n<ol>\n<li>V8 - Chrome and Node.js</li>\n<li>ChakraCore - IE and Microsoft Edge</li>\n<li>SpiderMonkey - Firefox and other stuff. GNOME3 shell.</li>\n<li>Nitros - Safari</li>\n</ol>\n</li>\n<li>These engines execute the JavaScript line by line.</li>\n</ul>\n<h2 id=\"window-and-document-objects\"><code>window</code> and <code>document</code> objects <a class=\"heading-anchor-permalink\" href=\"#window-and-document-objects\">#</a></h2>\n<ul>\n<li>The document has a parent object called the <code>window</code> - represents the current tab.</li>\n<li>The <code>window</code> object also has the <code>alert()</code>, <code>prompt()</code> functions including the <code>document</code> object itself.\n<img src=\"../../../assets/1_DOM_and_JS_Engine-image-3-a09ebfc7.png\" alt=\"\"></li>\n<li><code>window</code> is the default object if unspecified, i.e f() ↔ window.f()</li>\n</ul>\n<p>Note: window cannot be written to for UI stuff usually, because it is just the action part.</p>\n<pre><code class=\"language-js\">window.write(  '&lt;p&gt;abcd&lt;/p&gt;'); // error\ndocument.write('&lt;p&gt;abcd&lt;/p&gt;'); // Okay\n</code></pre>\n",
      "id": 110
    },
    {
      "path": "vault/3_JavaScript/2_DOM_Manipulation/2_DOM_Selectors.md",
      "url": "vault/3_JavaScript/2_DOM_Manipulation/2_DOM_Selectors.html",
      "content": "# 2. DOM Selectors\nCreated Saturday 11 July 2020\n\n## Element Selectors\nTo get the element object(call it eObj)\n- We can select elements and attributes in the DOM(document object) using functions called DOM selectors. The most common ones are:\n1. `getElementsByTagName('arg')` - returns a list of element objects with the 'arg' tag. e.g all `<p>`, all <img>s\n2. `getElementsByClassName('arg')` - returns a list of element objects with class 'arg'.\n3. `getElementById('arg')` - returns the element object with 'arg' as id. **singular(no s)**\n\n- If we need one or all element objects like CSS selector - they are much powerful and preferred over getElements:\n1. `document.querySelector('selector')` - returns the first element which matches the 'selector'.\n2. `document.querySelectorAll('selector')` - returns the list of all elements which match the 'selector'.\n\nNote: \n- Elements can be searched inside any node, not just `document`. Thus, doing `eObj.querySelector('')` is allowed and will search inside `eObj`.\n\n## Attribute Selectors\nAssuming we've got the eObj, and now want the attributes\n- For editing/reading attributes:\n1. `elementObj.getAttribute('attribute');` //prints the attribute value\n\n![](../../../assets/2_DOM_Selectors-image-1-a09ebfc7.png)\n\n2. `elementObj.setAttribute('attribute', 'newvalue');` // change the attribute\n\n![](../../../assets/2_DOM_Selectors-image-2-a09ebfc7.png)\n\n3. We can access and change inline style attributes directly by doing `elementObj.style.backgroundColor = 'red'`. But it is _discouraged_ as it violates the principle of separation of concerns.\n\n![](../../../assets/2_DOM_Selectors-image-3-a09ebfc7.png) is equivalent to ![](../../../assets/2_DOM_Selectors-image-4-a09ebfc7.png)\nNote: .style [won't](https://css-tricks.com/an-introduction-and-guide-to-the-css-object-model-cssom/) be able to acesss external CSS.\n\n4. Because an element can have multiple classes, we have special **properties** for it:\n   1. `eObj.className = 'newname';` if there's only one class\n   2. `eObj.classList; returns a *read only list* of classnames. It has 3 useful functions\n      1. `eObj.classList.add('new_class');`\n      2. `eObj.classList.remove('remove_class');`\n      3. `eObj.classList.toggle('class name');` toggles the presence of a class.\n\n## Content Selectors - Change content in the tag or input\n1. `eObj.innerHTML = 'New content';` ignores unused tags, `<code></code>` is invisible. Susceptible to scripting attacks\n2. `eObj.textContent = 'New verbatim text';` `<code></code>` will appear verbatim here.\n3. `eObj.value;` // for input tags like text, file etc\n\n## Relative selectors\n1. `eObj.parentElement` - the parent element\n2. `eObj.children` - a list of the children elements\n3. `eObj.firstElementChild`\n4. `eObj.nextElementSibling` and `eObj.previousElementSibling`\n5. `eObj.contains(eObj2)` - check if node `eObj` contains `eObj2`\n",
      "html": "<h1 id=\"2.-dom-selectors\">2. DOM Selectors <a class=\"heading-anchor-permalink\" href=\"#2.-dom-selectors\">#</a></h1>\n<p>Created Saturday 11 July 2020</p>\n<h2 id=\"element-selectors\">Element Selectors <a class=\"heading-anchor-permalink\" href=\"#element-selectors\">#</a></h2>\n<p>To get the element object(call it eObj)</p>\n<ul>\n<li>We can select elements and attributes in the DOM(document object) using functions called DOM selectors. The most common ones are:</li>\n</ul>\n<ol>\n<li><code>getElementsByTagName('arg')</code> - returns a list of element objects with the ‘arg’ tag. e.g all <code>&lt;p&gt;</code>, all <img>s</li>\n<li><code>getElementsByClassName('arg')</code> - returns a list of element objects with class ‘arg’.</li>\n<li><code>getElementById('arg')</code> - returns the element object with ‘arg’ as id. <strong>singular(no s)</strong></li>\n</ol>\n<ul>\n<li>If we need one or all element objects like CSS selector - they are much powerful and preferred over getElements:</li>\n</ul>\n<ol>\n<li><code>document.querySelector('selector')</code> - returns the first element which matches the ‘selector’.</li>\n<li><code>document.querySelectorAll('selector')</code> - returns the list of all elements which match the ‘selector’.</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>Elements can be searched inside any node, not just <code>document</code>. Thus, doing <code>eObj.querySelector('')</code> is allowed and will search inside <code>eObj</code>.</li>\n</ul>\n<h2 id=\"attribute-selectors\">Attribute Selectors <a class=\"heading-anchor-permalink\" href=\"#attribute-selectors\">#</a></h2>\n<p>Assuming we’ve got the eObj, and now want the attributes</p>\n<ul>\n<li>For editing/reading attributes:</li>\n</ul>\n<ol>\n<li><code>elementObj.getAttribute('attribute');</code> //prints the attribute value</li>\n</ol>\n<p><img src=\"../../../assets/2_DOM_Selectors-image-1-a09ebfc7.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li><code>elementObj.setAttribute('attribute', 'newvalue');</code> // change the attribute</li>\n</ol>\n<p><img src=\"../../../assets/2_DOM_Selectors-image-2-a09ebfc7.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>We can access and change inline style attributes directly by doing <code>elementObj.style.backgroundColor = 'red'</code>. But it is <em>discouraged</em> as it violates the principle of separation of concerns.</li>\n</ol>\n<p><img src=\"../../../assets/2_DOM_Selectors-image-3-a09ebfc7.png\" alt=\"\"> is equivalent to <img src=\"../../../assets/2_DOM_Selectors-image-4-a09ebfc7.png\" alt=\"\">\nNote: .style <a href=\"https://css-tricks.com/an-introduction-and-guide-to-the-css-object-model-cssom/\">won’t</a> be able to acesss external CSS.</p>\n<ol start=\"4\">\n<li>Because an element can have multiple classes, we have special <strong>properties</strong> for it:\n<ol>\n<li><code>eObj.className = 'newname';</code> if there’s only one class</li>\n<li>`eObj.classList; returns a <em>read only list</em> of classnames. It has 3 useful functions\n<ol>\n<li><code>eObj.classList.add('new_class');</code></li>\n<li><code>eObj.classList.remove('remove_class');</code></li>\n<li><code>eObj.classList.toggle('class name');</code> toggles the presence of a class.</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"content-selectors---change-content-in-the-tag-or-input\">Content Selectors - Change content in the tag or input <a class=\"heading-anchor-permalink\" href=\"#content-selectors---change-content-in-the-tag-or-input\">#</a></h2>\n<ol>\n<li><code>eObj.innerHTML = 'New content';</code> ignores unused tags, <code>&lt;code&gt;&lt;/code&gt;</code> is invisible. Susceptible to scripting attacks</li>\n<li><code>eObj.textContent = 'New verbatim text';</code> <code>&lt;code&gt;&lt;/code&gt;</code> will appear verbatim here.</li>\n<li><code>eObj.value;</code> // for input tags like text, file etc</li>\n</ol>\n<h2 id=\"relative-selectors\">Relative selectors <a class=\"heading-anchor-permalink\" href=\"#relative-selectors\">#</a></h2>\n<ol>\n<li><code>eObj.parentElement</code> - the parent element</li>\n<li><code>eObj.children</code> - a list of the children elements</li>\n<li><code>eObj.firstElementChild</code></li>\n<li><code>eObj.nextElementSibling</code> and <code>eObj.previousElementSibling</code></li>\n<li><code>eObj.contains(eObj2)</code> - check if node <code>eObj</code> contains <code>eObj2</code></li>\n</ol>\n",
      "id": 111
    },
    {
      "path": "vault/3_JavaScript/2_DOM_Manipulation/3_DOM_events.md",
      "url": "vault/3_JavaScript/2_DOM_Manipulation/3_DOM_events.html",
      "content": "# 3. DOM events\nCreated Sunday 12 July 2020\n\n- JS can be used to listen to events and do something. Events include hovering, clicking, writing, key-press, copy, paste etc.\n- How to listen to events - attach an event listener(to some element).\n\n## Add event listener - using HTML and JS\nMany UI event handlers are available as attributes. The attribute value can be JS code.\n```html\n<script src=\"path-to-js\"></script>\n<button onsubmit=\"clickHandler(event)\">Click me</button>\n\n<button onsubmit=\"console.log('Hello')\">Click me</button> <!-- this is fine too-->\n```\n\n```js\n// attached JS file\nfunction clickHandlerFunc (event) {}\n```\n\nNote: It's weird to pass the param in HTML `(event)` but it's needed and works.\n\n\n## Add event listener - using JS only\n```js\n// way 2 - from JS alone\nconst uiNode = document.querySelector('...')\nfunction clickHandlerFunc () {}\nuiNode.addEventListener('click', clickHandlerFunc); \n// click is the event, the function will run when the event happens\n\n// f recieves the \"event\" object automatically as first argument\n// this object has the `target` (element that got triggered), and other keys and functions\n```\n\n![](../../../assets/3_DOM_events-image-1-a09ebfc7.png)\n\n## Some more events\n1. `'click'`\n2. `'keypress'`, event.which = 13 for enter(ASCII code)\n3. `'mouseover'`\n4. `'mouseout'`\n5. `'input'` - triggered when value of the element changes\n\nNote:\n- The attribute versions (if using HTML and JS for event handling) usually have an `on` prefix.\n- MAID - all eventListeners are in an **event-while** loop structure separate from the remaining code(which we assume has already run, because code is much **faster** than physical events)\n- This is the reason why **caching** elements is so important, for relevant stuff, this makes it so easy and efficient.\n\n### `event` param\nThe callback function can have a parameter which is set by JS once the event occurs. Some important attributes of this `event` parameter are:\n1. `tagName` - returns tag name in all caps, a string.\n2. `target` - returns the host object\n3. `preventDefault`. Browsers usually a default behavior when an event occurs. Even if we our own event handler, the browser behavior will still take place. Sometimes, it's important to cancel the browser behavior. This can be done easily by calling `event.preventDefault()` before running any custom code in our function. \n\t- Usage example - prevent navigation on form submit:\n\t```html\n\t<!-- script attaching code here-->\n\t\n\t<form onsubmit=\"formHandler(event)\"></form>\n\t```\n\t```js\n\tfunction formHandler(event){\n\t\tevent.preventDefault(); // prevents default \"navigation\" behavior of the browser\n\n\t\t// custom code\n\t}\n\t```\n\t- Usage example - prevent bubbling of click event:\n\t```js\n\tfunction myClickHandlerOnComplexNode(event) {\n\t\tevent.stopPropagation(); // prevent imprecise register and cascade effects\n\n\t\t// custom code\n\t}\n\t```",
      "html": "<h1 id=\"3.-dom-events\">3. DOM events <a class=\"heading-anchor-permalink\" href=\"#3.-dom-events\">#</a></h1>\n<p>Created Sunday 12 July 2020</p>\n<ul>\n<li>JS can be used to listen to events and do something. Events include hovering, clicking, writing, key-press, copy, paste etc.</li>\n<li>How to listen to events - attach an event listener(to some element).</li>\n</ul>\n<h2 id=\"add-event-listener---using-html-and-js\">Add event listener - using HTML and JS <a class=\"heading-anchor-permalink\" href=\"#add-event-listener---using-html-and-js\">#</a></h2>\n<p>Many UI event handlers are available as attributes. The attribute value can be JS code.</p>\n<pre><code class=\"language-html\">&lt;script src=&quot;path-to-js&quot;&gt;&lt;/script&gt;\n&lt;button onsubmit=&quot;clickHandler(event)&quot;&gt;Click me&lt;/button&gt;\n\n&lt;button onsubmit=&quot;console.log('Hello')&quot;&gt;Click me&lt;/button&gt; &lt;!-- this is fine too--&gt;\n</code></pre>\n<pre><code class=\"language-js\">// attached JS file\nfunction clickHandlerFunc (event) {}\n</code></pre>\n<p>Note: It’s weird to pass the param in HTML <code>(event)</code> but it’s needed and works.</p>\n<h2 id=\"add-event-listener---using-js-only\">Add event listener - using JS only <a class=\"heading-anchor-permalink\" href=\"#add-event-listener---using-js-only\">#</a></h2>\n<pre><code class=\"language-js\">// way 2 - from JS alone\nconst uiNode = document.querySelector('...')\nfunction clickHandlerFunc () {}\nuiNode.addEventListener('click', clickHandlerFunc); \n// click is the event, the function will run when the event happens\n\n// f recieves the &quot;event&quot; object automatically as first argument\n// this object has the `target` (element that got triggered), and other keys and functions\n</code></pre>\n<p><img src=\"../../../assets/3_DOM_events-image-1-a09ebfc7.png\" alt=\"\"></p>\n<h2 id=\"some-more-events\">Some more events <a class=\"heading-anchor-permalink\" href=\"#some-more-events\">#</a></h2>\n<ol>\n<li><code>'click'</code></li>\n<li><code>'keypress'</code>, event.which = 13 for enter(ASCII code)</li>\n<li><code>'mouseover'</code></li>\n<li><code>'mouseout'</code></li>\n<li><code>'input'</code> - triggered when value of the element changes</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>The attribute versions (if using HTML and JS for event handling) usually have an <code>on</code> prefix.</li>\n<li>MAID - all eventListeners are in an <strong>event-while</strong> loop structure separate from the remaining code(which we assume has already run, because code is much <strong>faster</strong> than physical events)</li>\n<li>This is the reason why <strong>caching</strong> elements is so important, for relevant stuff, this makes it so easy and efficient.</li>\n</ul>\n<h3 id=\"event-param\"><code>event</code> param <a class=\"heading-anchor-permalink\" href=\"#event-param\">#</a></h3>\n<p>The callback function can have a parameter which is set by JS once the event occurs. Some important attributes of this <code>event</code> parameter are:</p>\n<ol>\n<li><code>tagName</code> - returns tag name in all caps, a string.</li>\n<li><code>target</code> - returns the host object</li>\n<li><code>preventDefault</code>. Browsers usually a default behavior when an event occurs. Even if we our own event handler, the browser behavior will still take place. Sometimes, it’s important to cancel the browser behavior. This can be done easily by calling <code>event.preventDefault()</code> before running any custom code in our function.\n<ul>\n<li>Usage example - prevent navigation on form submit:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!-- script attaching code here--&gt;\n\n&lt;form onsubmit=&quot;formHandler(event)&quot;&gt;&lt;/form&gt;\n</code></pre>\n<pre><code class=\"language-js\">function formHandler(event){\n\tevent.preventDefault(); // prevents default &quot;navigation&quot; behavior of the browser\n\n\t// custom code\n}\n</code></pre>\n<ul>\n<li>Usage example - prevent bubbling of click event:</li>\n</ul>\n<pre><code class=\"language-js\">function myClickHandlerOnComplexNode(event) {\n\tevent.stopPropagation(); // prevent imprecise register and cascade effects\n\n\t// custom code\n}\n</code></pre>\n</li>\n</ol>\n",
      "id": 112
    },
    {
      "path": "vault/3_JavaScript/2_DOM_Manipulation/4_Creating_new_HTML_elements.md",
      "url": "vault/3_JavaScript/2_DOM_Manipulation/4_Creating_new_HTML_elements.html",
      "content": "# 4. Creating new HTML elements\nCreated Sunday 12 July 2020\n\nWe have a shopping list and want to add a new item to the list.\nSteps to create an element.\n\n1. Create the element object using document.createElement('tag');\n2. Add the content using document.createTextNode(newitem);\n3. Set the attributes, classes using set attribute.\n4. Attach the eObj to the required element using par.appendChild(eObj);\n\n\nNote: Objects can be deleted using eObj.**remove()**;",
      "html": "<h1 id=\"4.-creating-new-html-elements\">4. Creating new HTML elements <a class=\"heading-anchor-permalink\" href=\"#4.-creating-new-html-elements\">#</a></h1>\n<p>Created Sunday 12 July 2020</p>\n<p>We have a shopping list and want to add a new item to the list.\nSteps to create an element.</p>\n<ol>\n<li>Create the element object using document.createElement(‘tag’);</li>\n<li>Add the content using document.createTextNode(newitem);</li>\n<li>Set the attributes, classes using set attribute.</li>\n<li>Attach the eObj to the required element using par.appendChild(eObj);</li>\n</ol>\n<p>Note: Objects can be deleted using eObj.<strong>remove()</strong>;</p>\n",
      "id": 113
    },
    {
      "path": "vault/3_JavaScript/2_DOM_Manipulation/6_jQuery_-_trivia.md",
      "url": "vault/3_JavaScript/2_DOM_Manipulation/6_jQuery_-_trivia.html",
      "content": "# 6. jQuery - trivia\nCreated Monday 13 July 2020\n\n- What is jQuery - a DOM manipulation library.\n- Why jQuery\n  1.  Eliminates cross-browser incompatibilities.\n  2.  It facilitates the separation of HTML and JS.\n  3.  Extensibility - methods and elements can be reused.\n  4.  Brevity - new kinds of events and other properties are available.\n- How does it look?\n  1.  jQuery is added inside a script tag.\n\n![](../../../assets/6_jQuery_-_trivia-image-1-a09ebfc7.png)\nExplanation: This is equivalent to setting the eventListener to the p tag.\n\n2. For running jQuery, we need to attach the library.\n\n![](../../../assets/6_jQuery_-_trivia-image-2-a09ebfc7.png)\n\n- What's the issue with jQuery:\n  1.  It made the code very imperative - the developer had to account for every action and the consequences, which includes the user's actions. For big websites, this becomes a huge mess.\n\n![](../../../assets/6_jQuery_-_trivia-image-3-a09ebfc7.png)\n**The pyramid of Doom**\n\n---\n\n- In a nutshell, we had HTML, CSS and JS. Then we had jQuery. As time progressed, people have made new things and much better libraries which have made working with JS much easier.\n- Today - there are very few new projects which use jQuery.\n- Developers who know only jQuery are not in high demand, and job postings are decreasing.\n\n### What replaced jQuery?\n- We'll use a better, open source library called React.js - It is very popular and efficient(computationally awa from a development perspective).\n- It is declarative.\n- TBH, it's not that React was meant to be a replacement for jQuery. It's just that JS first apps (JS manages the UI) became popular, and they of course had tools for DOM manipulation.\n- In fact, nobody is using even the DOM API anymore. Code for apps written using React, Vue or Angular (JS SPA frameworks), don't have DOM API code and it's usually discouraged in such apps.",
      "html": "<h1 id=\"6.-jquery---trivia\">6. jQuery - trivia <a class=\"heading-anchor-permalink\" href=\"#6.-jquery---trivia\">#</a></h1>\n<p>Created Monday 13 July 2020</p>\n<ul>\n<li>What is jQuery - a DOM manipulation library.</li>\n<li>Why jQuery\n<ol>\n<li>Eliminates cross-browser incompatibilities.</li>\n<li>It facilitates the separation of HTML and JS.</li>\n<li>Extensibility - methods and elements can be reused.</li>\n<li>Brevity - new kinds of events and other properties are available.</li>\n</ol>\n</li>\n<li>How does it look?\n<ol>\n<li>jQuery is added inside a script tag.</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"../../../assets/6_jQuery_-_trivia-image-1-a09ebfc7.png\" alt=\"\">\nExplanation: This is equivalent to setting the eventListener to the p tag.</p>\n<ol start=\"2\">\n<li>For running jQuery, we need to attach the library.</li>\n</ol>\n<p><img src=\"../../../assets/6_jQuery_-_trivia-image-2-a09ebfc7.png\" alt=\"\"></p>\n<ul>\n<li>What’s the issue with jQuery:\n<ol>\n<li>It made the code very imperative - the developer had to account for every action and the consequences, which includes the user’s actions. For big websites, this becomes a huge mess.</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"../../../assets/6_jQuery_-_trivia-image-3-a09ebfc7.png\" alt=\"\">\n<strong>The pyramid of Doom</strong></p>\n<hr>\n<ul>\n<li>In a nutshell, we had HTML, CSS and JS. Then we had jQuery. As time progressed, people have made new things and much better libraries which have made working with JS much easier.</li>\n<li>Today - there are very few new projects which use jQuery.</li>\n<li>Developers who know only jQuery are not in high demand, and job postings are decreasing.</li>\n</ul>\n<h3 id=\"what-replaced-jquery%3F\">What replaced jQuery? <a class=\"heading-anchor-permalink\" href=\"#what-replaced-jquery%3F\">#</a></h3>\n<ul>\n<li>We’ll use a better, open source library called React.js - It is very popular and efficient(computationally awa from a development perspective).</li>\n<li>It is declarative.</li>\n<li>TBH, it’s not that React was meant to be a replacement for jQuery. It’s just that JS first apps (JS manages the UI) became popular, and they of course had tools for DOM manipulation.</li>\n<li>In fact, nobody is using even the DOM API anymore. Code for apps written using React, Vue or Angular (JS SPA frameworks), don’t have DOM API code and it’s usually discouraged in such apps.</li>\n</ul>\n",
      "id": 114
    },
    {
      "path": "vault/3_JavaScript/2_DOM_Manipulation/7_Developer_Fundamental_5.md",
      "url": "vault/3_JavaScript/2_DOM_Manipulation/7_Developer_Fundamental_5.html",
      "content": "# 7. Developer Fundamental 5\nCreated Monday 13 July 2020\n\nFIXME - this page has wrong information, correct it.\n\n- [Critical Rendering Path](https://bitsofco.de/understanding-the-critical-rendering-path/)\n- DOM made the whole process of handling everything on the webpage very easy.\n- But it has a few problems:\n  1.  Reflow - The DOM tree needs to be remade, all elements have to be traversed again.\n  2.  Repaint - The visual elements like outline, color etc are changed in the CSSOM tree.\n- Note: Reflow is [expensive](https://areknawo.com/dom-performance-case-study/#commento-login-box-container) as compared to Repaint.\n- We want to minimize DOM manipulation and events.\n\nReact.js helps in [achieving](https://www.youtube.com/watch?v=mLMfx8BEt8g&ab_channel=FullstackAcademy) these goals.\n",
      "html": "<h1 id=\"7.-developer-fundamental-5\">7. Developer Fundamental 5 <a class=\"heading-anchor-permalink\" href=\"#7.-developer-fundamental-5\">#</a></h1>\n<p>Created Monday 13 July 2020</p>\n<p>FIXME - this page has wrong information, correct it.</p>\n<ul>\n<li><a href=\"https://bitsofco.de/understanding-the-critical-rendering-path/\">Critical Rendering Path</a></li>\n<li>DOM made the whole process of handling everything on the webpage very easy.</li>\n<li>But it has a few problems:\n<ol>\n<li>Reflow - The DOM tree needs to be remade, all elements have to be traversed again.</li>\n<li>Repaint - The visual elements like outline, color etc are changed in the CSSOM tree.</li>\n</ol>\n</li>\n<li>Note: Reflow is <a href=\"https://areknawo.com/dom-performance-case-study/#commento-login-box-container\">expensive</a> as compared to Repaint.</li>\n<li>We want to minimize DOM manipulation and events.</li>\n</ul>\n<p>React.js helps in <a href=\"https://www.youtube.com/watch?v=mLMfx8BEt8g&amp;ab_channel=FullstackAcademy\">achieving</a> these goals.</p>\n",
      "id": 115
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/0_index.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/0_index.html",
      "content": "# 3. Advanced JS\nCreated Tuesday 14 July 2020\n\n- We can have nested functions\n- Nested functions are hoisted\n",
      "html": "<h1 id=\"3.-advanced-js\">3. Advanced JS <a class=\"heading-anchor-permalink\" href=\"#3.-advanced-js\">#</a></h1>\n<p>Created Tuesday 14 July 2020</p>\n<ul>\n<li>We can have nested functions</li>\n<li>Nested functions are hoisted</li>\n</ul>\n",
      "id": 116
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/10_How_Does_JS_works.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/10_How_Does_JS_works.html",
      "content": "# 10. How Does JS works\nCreated Saturday 18 July 2020\n\n- We don't need to know how JS is implemented, but we do need to know how it works.\n\nSample Interview questions:\n\n- How does JS actually work?\n- Explain asynchronous vs synchronous.\n- JS is single threaded that can be non-blocking, explain.\n\n---\n\nThere are two basic mechanisms in a computer:\n1. **Memory Heap** - Memory is limited, so we need a garbage collector - To avoid memory leaks(unused memory) - This is why global variables are discouraged.\n2. **Call stack** - This is used to control the program flow, including recursion. Including function removal after execution.\n\n![](../../../assets/10_How_Does_JS_works-image-1-f26e87b7.png)\n\n- Stack overflow - There's no space to include new activation records.\n\n---\n\n- What does single threaded mean? - JS has only one call stack. It is simple to implement as compared to multi-threaded. No deadlocks can occur.\n- Synchronous - Code is run line by line.\n- Synchronous can be problematic if a function takes too much time, e.g API calls, content load etc. This is also referred to as **blocking**.\n\n---\n\nAsynchronous helps us tackle potentially blocking LOC.\nHow to program asynchronously?\n1. Using a timeout for the blocking sections of the code.\n\t![](../../../assets/10_How_Does_JS_works-image-2-f26e87b7.png) > ![](../../../assets/10_How_Does_JS_works-image-3-f26e87b7.png)![](../../../assets/10_How_Does_JS_works-image-4-f26e87b7.png)\n\n---\n\nJavaScript Run-Time Environment\n\n- In addition to the JS engine, we have Web APIs(like DOM, AJAX etc), a callback queue and an event loop. All this is referred to as the environment.\n\t![](../../../assets/10_How_Does_JS_works-image-5-f26e87b7.png)\n\n- timeout is provided by the browser.\n\nHow did the code run:\n1. console.log('1') got executed by the call stack.\n2. The next line was a timeout, so Timeout API waited for 2 second, we were then ready to run the code.\n3. The timeout code was sent to the Callback-queue(which is a queue of processes ready to run)\n4. The event loop actually keeps on checking if the call stack is empty, and if it pops a process from the callback queue to the call stack.\n5. During these 2 second, the call stack ran the code below line by line.\n\n- Event listeners are persistent functions in the callback queue.\n\n---\n\nPractial examples of asynchronous:\n1. **Synchronous** - We call a teacher and wait for the teacher to pick up and answer, but do noting while their phone is ringing. **Asynchronous** - We text the teacher and keep doing our work. The teacher responds when they are free.\n2. Reading files, network requests.",
      "html": "<h1 id=\"10.-how-does-js-works\">10. How Does JS works <a class=\"heading-anchor-permalink\" href=\"#10.-how-does-js-works\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<ul>\n<li>We don’t need to know how JS is implemented, but we do need to know how it works.</li>\n</ul>\n<p>Sample Interview questions:</p>\n<ul>\n<li>How does JS actually work?</li>\n<li>Explain asynchronous vs synchronous.</li>\n<li>JS is single threaded that can be non-blocking, explain.</li>\n</ul>\n<hr>\n<p>There are two basic mechanisms in a computer:</p>\n<ol>\n<li><strong>Memory Heap</strong> - Memory is limited, so we need a garbage collector - To avoid memory leaks(unused memory) - This is why global variables are discouraged.</li>\n<li><strong>Call stack</strong> - This is used to control the program flow, including recursion. Including function removal after execution.</li>\n</ol>\n<p><img src=\"../../../assets/10_How_Does_JS_works-image-1-f26e87b7.png\" alt=\"\"></p>\n<ul>\n<li>Stack overflow - There’s no space to include new activation records.</li>\n</ul>\n<hr>\n<ul>\n<li>What does single threaded mean? - JS has only one call stack. It is simple to implement as compared to multi-threaded. No deadlocks can occur.</li>\n<li>Synchronous - Code is run line by line.</li>\n<li>Synchronous can be problematic if a function takes too much time, e.g API calls, content load etc. This is also referred to as <strong>blocking</strong>.</li>\n</ul>\n<hr>\n<p>Asynchronous helps us tackle potentially blocking LOC.\nHow to program asynchronously?</p>\n<ol>\n<li>Using a timeout for the blocking sections of the code.\n<img src=\"../../../assets/10_How_Does_JS_works-image-2-f26e87b7.png\" alt=\"\"> &gt; <img src=\"../../../assets/10_How_Does_JS_works-image-3-f26e87b7.png\" alt=\"\"><img src=\"../../../assets/10_How_Does_JS_works-image-4-f26e87b7.png\" alt=\"\"></li>\n</ol>\n<hr>\n<p>JavaScript Run-Time Environment</p>\n<ul>\n<li>\n<p>In addition to the JS engine, we have Web APIs(like DOM, AJAX etc), a callback queue and an event loop. All this is referred to as the environment.\n<img src=\"../../../assets/10_How_Does_JS_works-image-5-f26e87b7.png\" alt=\"\"></p>\n</li>\n<li>\n<p>timeout is provided by the browser.</p>\n</li>\n</ul>\n<p>How did the code run:</p>\n<ol>\n<li>console.log(‘1’) got executed by the call stack.</li>\n<li>The next line was a timeout, so Timeout API waited for 2 second, we were then ready to run the code.</li>\n<li>The timeout code was sent to the Callback-queue(which is a queue of processes ready to run)</li>\n<li>The event loop actually keeps on checking if the call stack is empty, and if it pops a process from the callback queue to the call stack.</li>\n<li>During these 2 second, the call stack ran the code below line by line.</li>\n</ol>\n<ul>\n<li>Event listeners are persistent functions in the callback queue.</li>\n</ul>\n<hr>\n<p>Practial examples of asynchronous:</p>\n<ol>\n<li><strong>Synchronous</strong> - We call a teacher and wait for the teacher to pick up and answer, but do noting while their phone is ringing. <strong>Asynchronous</strong> - We text the teacher and keep doing our work. The teacher responds when they are free.</li>\n<li>Reading files, network requests.</li>\n</ol>\n",
      "id": 117
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/11_Modules_in_JS.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/11_Modules_in_JS.html",
      "content": "# 11. Modules in JS\nCreated Saturday 18 July 2020\n\n## Why\nFor/To:\n* Avoid namespace pollution\n* Reuse of code\n* Encapsulation\n* Abstraction\n\n\n## What is a module\nA module is just a bit of code encapsulated in a file, and exported to another file.\n\n## How\n### 1. ES6 modules (this came later)\n* Let us first see where are we now:\n1. We had inline scripts in HTML - Reusability, pollution of the global namespace\n2. We had script tags src - Order has to be decided beforehand(dependency resolution), we have to keep the script tags in all HTML files, global namespace is polluted.\n3. Using IIFE, we have no pollution, but order is not important.\n4. Browserify, before deployment, this app bundled all of the JS files into a single massive file called bundle.js. This way, we wouldn't have to worry about the namespace etc.\n5. In ES6 using Webpack, we can use export and import - Makes code easy to maintain.\n```js\n\t// js1\nexport const add = (a, b) => a+b;\n//OR\nexport default function add(a, b){\n\treturn a+b;\n}\n\n//js2\nimport {add} from './add'; // if normal 'export'\n//OR\nimport add from './add'; // if 'export default'\n\nimport { add as k } from \"./add\"\n\nimport * as bundled from \"./add\"\n```\n\n### 2. Common JS modules (simplest)\nThe ES6 syntax has not been implemented in CommonJS (the standard for modules that Node follows). An **old** syntax is followed by Node.\n* Source: A variable is exported by assigning it to `module.exports`.\n* Destination: `require(path)` just returns the exported variable.\nThat's all.\n```js\n// Export - source\nmodule.exports = 23;\n\n// import\nconsole.log(require(path)); // 23\nlet a = require(path);\nconsole.log(a); // 230\n```\nUseful tip: If multiple things are passed, or if we need a tuple, an object may be exported.\n```js\n// Export - Source file\nconst largeNumber = 5;\nmodule.exports = {\n\tlargeNumber: largeNumber;\n} // everything to be exported is sent as an object\n\n\n// Import - Destination file\nconst { largeNumbers } = require(\"source_file_path\");\nconst a = largeNumbers;\na // can be used\n```\nUseful: [CommonJS - what, why and how](https://medium.com/@cgcrutch18/commonjs-what-why-and-how-64ed9f31aa46)\n\n## If CommonJS is what JS used, how does React use ES6 syntax?\n* Browsers don't understand CommonJS, as they're not Node.\n* Consequently, apps written in Node.js's JavaScript needs to be transpiled to vanilla JS.\n* This is where compilers like [Babel](2_ES5_and_ES6.md) come in: they can receieve input in any way.\n* And ES6 is set as input, and is compiled to CommonJS.\n\n\nEvidence: create-react-app installs [babel-plugin-transform-modules-commonjs](https://babeljs.io/docs/en/babel-plugin-transform-modules-commonjs).\n![](../../../assets/11_Modules_in_JS-image-1-f26e87b7.png)\n\n",
      "html": "<h1 id=\"11.-modules-in-js\">11. Modules in JS <a class=\"heading-anchor-permalink\" href=\"#11.-modules-in-js\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>For/To:</p>\n<ul>\n<li>Avoid namespace pollution</li>\n<li>Reuse of code</li>\n<li>Encapsulation</li>\n<li>Abstraction</li>\n</ul>\n<h2 id=\"what-is-a-module\">What is a module <a class=\"heading-anchor-permalink\" href=\"#what-is-a-module\">#</a></h2>\n<p>A module is just a bit of code encapsulated in a file, and exported to another file.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<h3 id=\"1.-es6-modules-(this-came-later)\">1. ES6 modules (this came later) <a class=\"heading-anchor-permalink\" href=\"#1.-es6-modules-(this-came-later)\">#</a></h3>\n<ul>\n<li>Let us first see where are we now:</li>\n</ul>\n<ol>\n<li>We had inline scripts in HTML - Reusability, pollution of the global namespace</li>\n<li>We had script tags src - Order has to be decided beforehand(dependency resolution), we have to keep the script tags in all HTML files, global namespace is polluted.</li>\n<li>Using IIFE, we have no pollution, but order is not important.</li>\n<li>Browserify, before deployment, this app bundled all of the JS files into a single massive file called bundle.js. This way, we wouldn’t have to worry about the namespace etc.</li>\n<li>In ES6 using Webpack, we can use export and import - Makes code easy to maintain.</li>\n</ol>\n<pre><code class=\"language-js\">\t// js1\nexport const add = (a, b) =&gt; a+b;\n//OR\nexport default function add(a, b){\n\treturn a+b;\n}\n\n//js2\nimport {add} from './add'; // if normal 'export'\n//OR\nimport add from './add'; // if 'export default'\n\nimport { add as k } from &quot;./add&quot;\n\nimport * as bundled from &quot;./add&quot;\n</code></pre>\n<h3 id=\"2.-common-js-modules-(simplest)\">2. Common JS modules (simplest) <a class=\"heading-anchor-permalink\" href=\"#2.-common-js-modules-(simplest)\">#</a></h3>\n<p>The ES6 syntax has not been implemented in CommonJS (the standard for modules that Node follows). An <strong>old</strong> syntax is followed by Node.</p>\n<ul>\n<li>Source: A variable is exported by assigning it to <code>module.exports</code>.</li>\n<li>Destination: <code>require(path)</code> just returns the exported variable.\nThat’s all.</li>\n</ul>\n<pre><code class=\"language-js\">// Export - source\nmodule.exports = 23;\n\n// import\nconsole.log(require(path)); // 23\nlet a = require(path);\nconsole.log(a); // 230\n</code></pre>\n<p>Useful tip: If multiple things are passed, or if we need a tuple, an object may be exported.</p>\n<pre><code class=\"language-js\">// Export - Source file\nconst largeNumber = 5;\nmodule.exports = {\n\tlargeNumber: largeNumber;\n} // everything to be exported is sent as an object\n\n\n// Import - Destination file\nconst { largeNumbers } = require(&quot;source_file_path&quot;);\nconst a = largeNumbers;\na // can be used\n</code></pre>\n<p>Useful: <a href=\"https://medium.com/@cgcrutch18/commonjs-what-why-and-how-64ed9f31aa46\">CommonJS - what, why and how</a></p>\n<h2 id=\"if-commonjs-is-what-js-used%2C-how-does-react-use-es6-syntax%3F\">If CommonJS is what JS used, how does React use ES6 syntax? <a class=\"heading-anchor-permalink\" href=\"#if-commonjs-is-what-js-used%2C-how-does-react-use-es6-syntax%3F\">#</a></h2>\n<ul>\n<li>Browsers don’t understand CommonJS, as they’re not Node.</li>\n<li>Consequently, apps written in Node.js’s JavaScript needs to be transpiled to vanilla JS.</li>\n<li>This is where compilers like <a href=\"2_ES5_and_ES6.html\">Babel</a> come in: they can receieve input in any way.</li>\n<li>And ES6 is set as input, and is compiled to CommonJS.</li>\n</ul>\n<p>Evidence: create-react-app installs <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-modules-commonjs\">babel-plugin-transform-modules-commonjs</a>.\n<img src=\"../../../assets/11_Modules_in_JS-image-1-f26e87b7.png\" alt=\"\"></p>\n",
      "id": 118
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/0_index.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/0_index.html",
      "content": "# 12. Asynchronous JavaScript\nCreated Monday 15 November 2021\n\n#### Why\nFor computations that take variable time, like network requests, reading files etc.\n\n#### How\nJavaScript is single threaded and non-blocking.\nThis means that all asynchronous activity must happen in the task queue.\n\n#### What\nThere are three ways to program asynchronous tasks:\n1. Callbacks - runs a function when the async task is done/rejected.\n2. Promises - this is an object with a state and a value (assigned on completion of task).\n3. Async await syntax - syntax sugar to avoid **then** function chains. Makes code _look_ fully sequential.\n",
      "html": "<h1 id=\"12.-asynchronous-javascript\">12. Asynchronous JavaScript <a class=\"heading-anchor-permalink\" href=\"#12.-asynchronous-javascript\">#</a></h1>\n<p>Created Monday 15 November 2021</p>\n<h4 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h4>\n<p>For computations that take variable time, like network requests, reading files etc.</p>\n<h4 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h4>\n<p>JavaScript is single threaded and non-blocking.\nThis means that all asynchronous activity must happen in the task queue.</p>\n<h4 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h4>\n<p>There are three ways to program asynchronous tasks:</p>\n<ol>\n<li>Callbacks - runs a function when the async task is done/rejected.</li>\n<li>Promises - this is an object with a state and a value (assigned on completion of task).</li>\n<li>Async await syntax - syntax sugar to avoid <strong>then</strong> function chains. Makes code <em>look</em> fully sequential.</li>\n</ol>\n",
      "id": 119
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/1_Event_loop.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/1_Event_loop.html",
      "content": "# 1. Event Loop\nCreated Sunday 27 February 2021\ngst",
      "html": "<h1 id=\"1.-event-loop\">1. Event Loop <a class=\"heading-anchor-permalink\" href=\"#1.-event-loop\">#</a></h1>\n<p>Created Sunday 27 February 2021\ngst</p>\n",
      "id": 120
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/2_Callbacks.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/2_Callbacks.html",
      "content": "# 1. Callbacks\nCreated Monday 15 November \n\n#### Definiton of a callback\nWhen a function takes in another function as argument and runs it when a certain condition is met.\nThis function passed as argument is called a *callback function*.\n\n#### Problems with using callback functions\n1. Code becomes ugly and unmanageable. Like a Pyramid, of \"doom\".\n```js\nmovePlayer(100, 'Left', function() {\n\tmovePlayer(400, 'Left', function() {\n\t\tmovePlayer(10, 'Right', function() {\n\t\t\tmovePlayer(330, ‘'Left', function() {\n\t\t\t});\n\t\t});\n\t});\n});\n```\n2. Error handling is also very difficult, as more indented ``try-catch`` blocks will be needed, for each callback.\n\n#### Conclusion\nCallbacks are good for short tasks, but not for long asynchronous tasks.\n\n",
      "html": "<h1 id=\"1.-callbacks\">1. Callbacks <a class=\"heading-anchor-permalink\" href=\"#1.-callbacks\">#</a></h1>\n<p>Created Monday 15 November</p>\n<h4 id=\"definiton-of-a-callback\">Definiton of a callback <a class=\"heading-anchor-permalink\" href=\"#definiton-of-a-callback\">#</a></h4>\n<p>When a function takes in another function as argument and runs it when a certain condition is met.\nThis function passed as argument is called a <em>callback function</em>.</p>\n<h4 id=\"problems-with-using-callback-functions\">Problems with using callback functions <a class=\"heading-anchor-permalink\" href=\"#problems-with-using-callback-functions\">#</a></h4>\n<ol>\n<li>Code becomes ugly and unmanageable. Like a Pyramid, of “doom”.</li>\n</ol>\n<pre><code class=\"language-js\">movePlayer(100, 'Left', function() {\n\tmovePlayer(400, 'Left', function() {\n\t\tmovePlayer(10, 'Right', function() {\n\t\t\tmovePlayer(330, ‘'Left', function() {\n\t\t\t});\n\t\t});\n\t});\n});\n</code></pre>\n<ol start=\"2\">\n<li>Error handling is also very difficult, as more indented <code>try-catch</code> blocks will be needed, for each callback.</li>\n</ol>\n<h4 id=\"conclusion\">Conclusion <a class=\"heading-anchor-permalink\" href=\"#conclusion\">#</a></h4>\n<p>Callbacks are good for short tasks, but not for long asynchronous tasks.</p>\n",
      "id": 121
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/3_Promises.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/3_Promises.html",
      "content": "# 2. Promises\nCreated Monday 15 November 2021\n\n#### Why\nThey serve the same purpose as asynchronous tasks via callback, but make code manageable.\n\n#### How\n",
      "html": "<h1 id=\"2.-promises\">2. Promises <a class=\"heading-anchor-permalink\" href=\"#2.-promises\">#</a></h1>\n<p>Created Monday 15 November 2021</p>\n<h4 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h4>\n<p>They serve the same purpose as asynchronous tasks via callback, but make code manageable.</p>\n<h4 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h4>\n",
      "id": 122
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/4_Async_await.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/4_Async_await.html",
      "content": "# 3. Async await syntax sugar\nCreated Monday 15 November 2021\n",
      "html": "<h1 id=\"3.-async-await-syntax-sugar\">3. Async await syntax sugar <a class=\"heading-anchor-permalink\" href=\"#3.-async-await-syntax-sugar\">#</a></h1>\n<p>Created Monday 15 November 2021</p>\n",
      "id": 123
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/5_Comparing_async_coding_constructs.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/12_Asynchronous_JavaScript/5_Comparing_async_coding_constructs.html",
      "content": "# 12. Asynchronous JavaScript\nCreated Monday 15 November 2021\n\n#### Why\nFor computations that take variable time, like network requests, reading files etc.\n\n#### How\nJavaScript is single threaded and non-blocking.\nThis means that all asynchronous activity must happen in the task queue.\n\n#### What\nThere are three ways to program asynchronous tasks:\n1. Callbacks - runs a function when the async task is done/rejected.\n2. Promises - this is an object with a state and a value (assigned on completion of task).\n3. Async await syntax - syntax sugar to avoid **then** function chains. Makes code _look_ fully sequential.\n",
      "html": "<h1 id=\"12.-asynchronous-javascript\">12. Asynchronous JavaScript <a class=\"heading-anchor-permalink\" href=\"#12.-asynchronous-javascript\">#</a></h1>\n<p>Created Monday 15 November 2021</p>\n<h4 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h4>\n<p>For computations that take variable time, like network requests, reading files etc.</p>\n<h4 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h4>\n<p>JavaScript is single threaded and non-blocking.\nThis means that all asynchronous activity must happen in the task queue.</p>\n<h4 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h4>\n<p>There are three ways to program asynchronous tasks:</p>\n<ol>\n<li>Callbacks - runs a function when the async task is done/rejected.</li>\n<li>Promises - this is an object with a state and a value (assigned on completion of task).</li>\n<li>Async await syntax - syntax sugar to avoid <strong>then</strong> function chains. Makes code <em>look</em> fully sequential.</li>\n</ol>\n",
      "id": 124
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/13_Exception_handling.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/13_Exception_handling.html",
      "content": "# 13. Exception handling\nCreated Friday 11 March 2022\n\n## Why\nTo handle exceptions and error, and provide a streamlined flow which segregates code functionality from the exceptional handling code.\n\n## How\nJavaScript has a 3 block structure for exception handling. There are 3 possible syntax constructs:\n1. `try`...`catch`\n2. `try`...`finally`\n3. `try`...`catch`...`finally`\n\n### The role of blocks\n- `try` - has the functionality code which may lead to errors/exceptions/\n- `catch` - this block is executed when an exception is raised in `try`. The block can optionally have an argument that takes the value of the raised exception. `if`...`else` (conditional) code may be used for more granular control of actions according to the type of exception raised, using `instanceof` function. Example of conditonal `catch` block:\n\t```js\n\ttry {\n\t\tmyroutine(); // may throw three types of exceptions\n\t} \n\tcatch (e) {\n\t  if (e instanceof TypeError) {\n\t    // statements to handle TypeError exceptions\n\t  } else if (e instanceof RangeError) {\n\t    // statements to handle RangeError exceptions\n\t  } else if (e instanceof EvalError) {\n\t    // statements to handle EvalError exceptions\n\t  } else {\n\t    // statements to handle any unspecified exceptions\n\t    logMyErrors(e); // pass exception object to error handler\n\t  }\n\t}\n\t```\n- `finally` - this block is always run, irrespective of whether an exception was raised or not.\n  \n### Return value priority\n  If something is returned from the block (s), the whole value evaluates is equal to return value from:\n  1. `finally` - highest priority, even if the `catch` itself has more exceptions.\n  2. `catch` - If an exception was raised and there's no `finally` (or it does not return anything).\n  3. `try` - if there are no exceptions, or if `catch`/`finally` return nothing, or are not defined.\n\n### Nesting of try blocks\n`try` blocks may be nested inside each other. \n- If a `try` block does not have a `catch` but raises an error, then the `catch` of the enclosing `try` block handles the exception.\n\n\nThis is not used much, except in code that uses the `async`-`await` syntax.\n\nSource: [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch)",
      "html": "<h1 id=\"13.-exception-handling\">13. Exception handling <a class=\"heading-anchor-permalink\" href=\"#13.-exception-handling\">#</a></h1>\n<p>Created Friday 11 March 2022</p>\n<h2 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h2>\n<p>To handle exceptions and error, and provide a streamlined flow which segregates code functionality from the exceptional handling code.</p>\n<h2 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h2>\n<p>JavaScript has a 3 block structure for exception handling. There are 3 possible syntax constructs:</p>\n<ol>\n<li><code>try</code>…<code>catch</code></li>\n<li><code>try</code>…<code>finally</code></li>\n<li><code>try</code>…<code>catch</code>…<code>finally</code></li>\n</ol>\n<h3 id=\"the-role-of-blocks\">The role of blocks <a class=\"heading-anchor-permalink\" href=\"#the-role-of-blocks\">#</a></h3>\n<ul>\n<li><code>try</code> - has the functionality code which may lead to errors/exceptions/</li>\n<li><code>catch</code> - this block is executed when an exception is raised in <code>try</code>. The block can optionally have an argument that takes the value of the raised exception. <code>if</code>…<code>else</code> (conditional) code may be used for more granular control of actions according to the type of exception raised, using <code>instanceof</code> function. Example of conditonal <code>catch</code> block:<pre><code class=\"language-js\">try {\n\tmyroutine(); // may throw three types of exceptions\n} \ncatch (e) {\n  if (e instanceof TypeError) {\n    // statements to handle TypeError exceptions\n  } else if (e instanceof RangeError) {\n    // statements to handle RangeError exceptions\n  } else if (e instanceof EvalError) {\n    // statements to handle EvalError exceptions\n  } else {\n    // statements to handle any unspecified exceptions\n    logMyErrors(e); // pass exception object to error handler\n  }\n}\n</code></pre>\n</li>\n<li><code>finally</code> - this block is always run, irrespective of whether an exception was raised or not.</li>\n</ul>\n<h3 id=\"return-value-priority\">Return value priority <a class=\"heading-anchor-permalink\" href=\"#return-value-priority\">#</a></h3>\n<p>If something is returned from the block (s), the whole value evaluates is equal to return value from:</p>\n<ol>\n<li><code>finally</code> - highest priority, even if the <code>catch</code> itself has more exceptions.</li>\n<li><code>catch</code> - If an exception was raised and there’s no <code>finally</code> (or it does not return anything).</li>\n<li><code>try</code> - if there are no exceptions, or if <code>catch</code>/<code>finally</code> return nothing, or are not defined.</li>\n</ol>\n<h3 id=\"nesting-of-try-blocks\">Nesting of try blocks <a class=\"heading-anchor-permalink\" href=\"#nesting-of-try-blocks\">#</a></h3>\n<p><code>try</code> blocks may be nested inside each other.</p>\n<ul>\n<li>If a <code>try</code> block does not have a <code>catch</code> but raises an error, then the <code>catch</code> of the enclosing <code>try</code> block handles the exception.</li>\n</ul>\n<p>This is not used much, except in code that uses the <code>async</code>-<code>await</code> syntax.</p>\n<p>Source: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\">MDN</a></p>\n",
      "id": 125
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/1_Scope.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/1_Scope.html",
      "content": "# 1. Scope\nCreated Tuesday 14 July 2020\n\n#### Scopes in JS\nThere are 4 scopes in JS, in order of lookup(during use):\n1. **L**ocal scope - block scope, function scope.\n2. **E**nclosing scope - inner function's scope.\n3. **G**lobal scope - variables/functions at the script level, i.e outside of any class/function. This scope is unique.\n4. **B**uilt-in - stuff loaded by the intepreter, like console.log() etc. You can hack it.\n\n![](../../../assets/1_Scope-image-1-f26e87b7.png)\nNote:\n\n* **``Root Scope``** - global scope of the browser.\n\n![](../../../assets/1_Scope-image-2-f26e87b7.png)\n\n* Exactly like python3(LEGB), except that writing to outer variable is not restricted.\n\n\n#### Popular global objects(for the browser)\n* ``window`` - browser object. Controls the whole window - manipulate owned tabs, close the browser. This is unique.\n* ``document`` - current webpage object. Used for DOM manipulation. Each page has a document object.\n\n\nNote: Node.js has neither, simply because both window and webpage are irrelevant to an standalone intepreter.\n\n",
      "html": "<h1 id=\"1.-scope\">1. Scope <a class=\"heading-anchor-permalink\" href=\"#1.-scope\">#</a></h1>\n<p>Created Tuesday 14 July 2020</p>\n<h4 id=\"scopes-in-js\">Scopes in JS <a class=\"heading-anchor-permalink\" href=\"#scopes-in-js\">#</a></h4>\n<p>There are 4 scopes in JS, in order of lookup(during use):</p>\n<ol>\n<li><strong>L</strong>ocal scope - block scope, function scope.</li>\n<li><strong>E</strong>nclosing scope - inner function’s scope.</li>\n<li><strong>G</strong>lobal scope - variables/functions at the script level, i.e outside of any class/function. This scope is unique.</li>\n<li><strong>B</strong>uilt-in - stuff loaded by the intepreter, like console.log() etc. You can hack it.</li>\n</ol>\n<p><img src=\"../../../assets/1_Scope-image-1-f26e87b7.png\" alt=\"\">\nNote:</p>\n<ul>\n<li><strong><code>Root Scope</code></strong> - global scope of the browser.</li>\n</ul>\n<p><img src=\"../../../assets/1_Scope-image-2-f26e87b7.png\" alt=\"\"></p>\n<ul>\n<li>Exactly like python3(LEGB), except that writing to outer variable is not restricted.</li>\n</ul>\n<h4 id=\"popular-global-objects(for-the-browser)\">Popular global objects(for the browser) <a class=\"heading-anchor-permalink\" href=\"#popular-global-objects(for-the-browser)\">#</a></h4>\n<ul>\n<li><code>window</code> - browser object. Controls the whole window - manipulate owned tabs, close the browser. This is unique.</li>\n<li><code>document</code> - current webpage object. Used for DOM manipulation. Each page has a document object.</li>\n</ul>\n<p>Note: Node.js has neither, simply because both window and webpage are irrelevant to an standalone intepreter.</p>\n",
      "id": 126
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/2_ES5_and_ES6/0_index.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/2_ES5_and_ES6/0_index.html",
      "content": "# 2. ES5 and ES6\nCreated Tuesday 14 July 2020\n\n#### About the JS ecosystem\n**\"There is nothing static about being a web-developer, everything is improving\".**\n\n- HTML, CSS are JS evolving very rapidly.\n- Even browsers are being updated.\n- New libraries are made, existing ones are being improved.\n- Now formally called ECMAScript, it interchangeably used with JavaScript.\n- ES5 and ES6 introduced new features which make coding very easy and fun.\n\n#### ECMAScript standards and compatibility\n- **Not all browsers support ES5 and ES6 right now, is it practical to learn and use the standard right now?**\n- Yes, some new features of ESx are not currently supported by all browsers. But we can still use them, we'll use a **compiler** to obtain the most supported version of ECMAScript from the latest ESx code. A popular compiler is **Babel**, it works with the latest ESx. **Don't worry about the version.**\n- There are two important operations when handling two versions:\n  1.  Polyfilling - Representing new _functionality_ in old code. No syntax changes should be present between new and old. Only functionality changes.\n  2.  Transpiling - There are new _syntax_ changes, and the current code needs to be represented in old syntax. Functionality does not matter here.\n- Babel does both transpiling and polyfilling.\n\n![](../../../../assets/0_index-image-1-66d11922.png) ![](../../../../assets/0_index-image-2-66d11922.png)\n\n- The new standards have made the code clean and concise.\n\n#### Features of ES5 and ES6\nThere are 3 kinds of features introduced by ES5 and ES6:\n1. [Necessities](A_Necessities.md) - critical problems with JS\n2. [Shorthands and object features](B_Shorthands_and_object_features.md) - make code concise and dynamic.\n3. [Exclusive features](C_JS_exclusive_features.md) - new features exclusive to JS\n",
      "html": "<h1 id=\"2.-es5-and-es6\">2. ES5 and ES6 <a class=\"heading-anchor-permalink\" href=\"#2.-es5-and-es6\">#</a></h1>\n<p>Created Tuesday 14 July 2020</p>\n<h4 id=\"about-the-js-ecosystem\">About the JS ecosystem <a class=\"heading-anchor-permalink\" href=\"#about-the-js-ecosystem\">#</a></h4>\n<p><strong>&quot;There is nothing static about being a web-developer, everything is improving&quot;.</strong></p>\n<ul>\n<li>HTML, CSS are JS evolving very rapidly.</li>\n<li>Even browsers are being updated.</li>\n<li>New libraries are made, existing ones are being improved.</li>\n<li>Now formally called ECMAScript, it interchangeably used with JavaScript.</li>\n<li>ES5 and ES6 introduced new features which make coding very easy and fun.</li>\n</ul>\n<h4 id=\"ecmascript-standards-and-compatibility\">ECMAScript standards and compatibility <a class=\"heading-anchor-permalink\" href=\"#ecmascript-standards-and-compatibility\">#</a></h4>\n<ul>\n<li><strong>Not all browsers support ES5 and ES6 right now, is it practical to learn and use the standard right now?</strong></li>\n<li>Yes, some new features of ESx are not currently supported by all browsers. But we can still use them, we’ll use a <strong>compiler</strong> to obtain the most supported version of ECMAScript from the latest ESx code. A popular compiler is <strong>Babel</strong>, it works with the latest ESx. <strong>Don’t worry about the version.</strong></li>\n<li>There are two important operations when handling two versions:\n<ol>\n<li>Polyfilling - Representing new <em>functionality</em> in old code. No syntax changes should be present between new and old. Only functionality changes.</li>\n<li>Transpiling - There are new <em>syntax</em> changes, and the current code needs to be represented in old syntax. Functionality does not matter here.</li>\n</ol>\n</li>\n<li>Babel does both transpiling and polyfilling.</li>\n</ul>\n<p><img src=\"../../../../assets/0_index-image-1-66d11922.png\" alt=\"\"> <img src=\"../../../../assets/0_index-image-2-66d11922.png\" alt=\"\"></p>\n<ul>\n<li>The new standards have made the code clean and concise.</li>\n</ul>\n<h4 id=\"features-of-es5-and-es6\">Features of ES5 and ES6 <a class=\"heading-anchor-permalink\" href=\"#features-of-es5-and-es6\">#</a></h4>\n<p>There are 3 kinds of features introduced by ES5 and ES6:</p>\n<ol>\n<li><a href=\"A_Necessities.html\">Necessities</a> - critical problems with JS</li>\n<li><a href=\"B_Shorthands_and_object_features.html\">Shorthands and object features</a> - make code concise and dynamic.</li>\n<li><a href=\"C_JS_exclusive_features.html\">Exclusive features</a> - new features exclusive to JS</li>\n</ol>\n",
      "id": 127
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/2_ES5_and_ES6/A_Necessities.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/2_ES5_and_ES6/A_Necessities.html",
      "content": "# A. Necessities\nCreated Thursday 25 March 2021\n\nThese were necessary features common in other programming languages:\n1. let and const - solve hositing and scope problems.\n2. arrow functions - solve context binding\n3. Template literals - easy string builder, ability to add DSL.\n\n#### 1. let and const\n- Both were introduced in ES6.\n- Purpose: Very basic feature. Makes JS sensible.\n- Both follow the same scoping rules - LEGB.\n- Neither can be redeclared, just like C++, Java.\n- Use `const` if you want to restrict reassignment.\n- Use of `var` is discouraged.\n\n#### 2. Arrow functions\n- _Looks_ similar to lamdas(storable functions).\n- Purpose: Function(state) Binding. Concise code.\n- The de-facto standard for anonymous functions.\n- Syntax(can be used in conjunction):\n  - For single argument: `p => {};`\n  - For single expression as return value: `(p1, p2) => 2*3;`. Returns expression value.\n  - For multiliners: `(p1, p2, p3) => { /* code*/ }`. Simple function function.\n  - For other combination of cases - use all in conjunction.\n\n```js\nconst f = num => num\\*2; // single argument, single expression\nf() // call\n\n// Multiline body - no return\nconst f = () =>\n{\nconsole.log('Hello');\nconsole.log('World'); // returns undefined\n}\n\n//Multiline - with return\nconst f = (a, b) => {\na\\*2 = b;\nreturn a+b;\n}; //\n\n(()=>console.log(2))(); // Arrow function as IIFE\n```\n\n- Important gotcha - arrow functions are not just a syntactic sugar for normal functions, they do more. See [details](this_and_arrow_functions.md).\n\nNote:\n- You do need a () for zero params.\n- Avoid normal functions for \"throwaway or one-liner functions\".\n- Arrow function is short for \"arrow function expressions\". So these are actually expressions. Expressions don't have declarations, ergo, arrow functions are not hoisted.\n\n#### 3. Template Literals\n- Extremely powerful tool.\n- Purpose - string building, concise code, DSL injection is easier.\n- Template string is a use case of this feature.\n- General syntax:\n  - Enclose the whole string in backticks.\n  - Write literal part verbatim.\n  - Use `${ JS_code }` to enclose the code parts.\n\n![](../../../../assets/A_Necessities-image-1-66d11922.png)\n![](../../../../assets/A_Necessities-image-2-66d11922.png)\n\n- Supports multiline strings.\n- Use:\n  1.  As template string\n\t```js\n\tlet pname = 'Sanjar', emotion = 'Happy';\n\tlet message = `${pname} is ${emotion}.`;\n\n\tconsole.log(`I am ${pname}`); // prints -> I am Sanjar\n\t```\n2. For carrying JS code.\n   `${ console.log(2); }` // prints 2 on string evaluation\n\n   `${ (() => { console.log('Autodestruct sequence intiated'); })() } ` // pretty hacky and dangerous\n\n3. DSL injection(Domain Specific Language)\n\n   p.innerHTML(`<h1> DSL injected </h1>`);\n\n- How it works:\n  - `${}`(code) parts are executed normally.\n  - Result, i.e. expression/return value of the code is placed as strings in the template literal.\n  - The string is ready, to be printed or stored.\n",
      "html": "<h1 id=\"a.-necessities\">A. Necessities <a class=\"heading-anchor-permalink\" href=\"#a.-necessities\">#</a></h1>\n<p>Created Thursday 25 March 2021</p>\n<p>These were necessary features common in other programming languages:</p>\n<ol>\n<li>let and const - solve hositing and scope problems.</li>\n<li>arrow functions - solve context binding</li>\n<li>Template literals - easy string builder, ability to add DSL.</li>\n</ol>\n<h4 id=\"1.-let-and-const\">1. let and const <a class=\"heading-anchor-permalink\" href=\"#1.-let-and-const\">#</a></h4>\n<ul>\n<li>Both were introduced in ES6.</li>\n<li>Purpose: Very basic feature. Makes JS sensible.</li>\n<li>Both follow the same scoping rules - LEGB.</li>\n<li>Neither can be redeclared, just like C++, Java.</li>\n<li>Use <code>const</code> if you want to restrict reassignment.</li>\n<li>Use of <code>var</code> is discouraged.</li>\n</ul>\n<h4 id=\"2.-arrow-functions\">2. Arrow functions <a class=\"heading-anchor-permalink\" href=\"#2.-arrow-functions\">#</a></h4>\n<ul>\n<li><em>Looks</em> similar to lamdas(storable functions).</li>\n<li>Purpose: Function(state) Binding. Concise code.</li>\n<li>The de-facto standard for anonymous functions.</li>\n<li>Syntax(can be used in conjunction):\n<ul>\n<li>For single argument: <code>p =&gt; {};</code></li>\n<li>For single expression as return value: <code>(p1, p2) =&gt; 2*3;</code>. Returns expression value.</li>\n<li>For multiliners: <code>(p1, p2, p3) =&gt; { /* code*/ }</code>. Simple function function.</li>\n<li>For other combination of cases - use all in conjunction.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-js\">const f = num =&gt; num\\*2; // single argument, single expression\nf() // call\n\n// Multiline body - no return\nconst f = () =&gt;\n{\nconsole.log('Hello');\nconsole.log('World'); // returns undefined\n}\n\n//Multiline - with return\nconst f = (a, b) =&gt; {\na\\*2 = b;\nreturn a+b;\n}; //\n\n(()=&gt;console.log(2))(); // Arrow function as IIFE\n</code></pre>\n<ul>\n<li>Important gotcha - arrow functions are not just a syntactic sugar for normal functions, they do more. See <a href=\"this_and_arrow_functions.html\">details</a>.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>You do need a () for zero params.</li>\n<li>Avoid normal functions for “throwaway or one-liner functions”.</li>\n<li>Arrow function is short for “arrow function expressions”. So these are actually expressions. Expressions don’t have declarations, ergo, arrow functions are not hoisted.</li>\n</ul>\n<h4 id=\"3.-template-literals\">3. Template Literals <a class=\"heading-anchor-permalink\" href=\"#3.-template-literals\">#</a></h4>\n<ul>\n<li>Extremely powerful tool.</li>\n<li>Purpose - string building, concise code, DSL injection is easier.</li>\n<li>Template string is a use case of this feature.</li>\n<li>General syntax:\n<ul>\n<li>Enclose the whole string in backticks.</li>\n<li>Write literal part verbatim.</li>\n<li>Use <code>${ JS_code }</code> to enclose the code parts.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"../../../../assets/A_Necessities-image-1-66d11922.png\" alt=\"\">\n<img src=\"../../../../assets/A_Necessities-image-2-66d11922.png\" alt=\"\"></p>\n<ul>\n<li>Supports multiline strings.</li>\n<li>Use:\n<ol>\n<li>As template string</li>\n</ol>\n<pre><code class=\"language-js\">let pname = 'Sanjar', emotion = 'Happy';\nlet message = `${pname} is ${emotion}.`;\n\nconsole.log(`I am ${pname}`); // prints -&gt; I am Sanjar\n</code></pre>\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>For carrying JS code.\n<code>${ console.log(2); }</code> // prints 2 on string evaluation</p>\n<p><code>${ (() =&gt; { console.log('Autodestruct sequence intiated'); })() }</code> // pretty hacky and dangerous</p>\n</li>\n<li>\n<p>DSL injection(Domain Specific Language)</p>\n<p>p.innerHTML(<code>&lt;h1&gt; DSL injected &lt;/h1&gt;</code>);</p>\n</li>\n</ol>\n<ul>\n<li>How it works:\n<ul>\n<li><code>${}</code>(code) parts are executed normally.</li>\n<li>Result, i.e. expression/return value of the code is placed as strings in the template literal.</li>\n<li>The string is ready, to be printed or stored.</li>\n</ul>\n</li>\n</ul>\n",
      "id": 128
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/2_ES5_and_ES6/B_Shorthands_and_object_features.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/2_ES5_and_ES6/B_Shorthands_and_object_features.html",
      "content": "# B. Shorthands and object features\nCreated Thursday 25 March 2021\n\n#### 1. Destructuring(object/iterable unpacking)\n- A very nice feature. Very popular. Inspired from python3.\n- Purpose: Concise code.\n- Works with:\n  - Iterables - Intialize variables using an iterable rvalue. Skipping is allowed, order(L to R) is maintained.\n  - Object - Declare and intialize variables(set to field-variableName corresponding value). **Order** does not matter. Works for deeply nested fields too. See [this](https://www.w3schools.com/react/tryit.asp?filename=tryreact_es6_destructuring_object2).\n- Syntax - iterable/object as **rvalue**. Literals are OK too.\n  - Iterable - `const [x, y, z] = new Set([1, 2, 3, 4]);`\n  - Object - `let {name,place='Default'} = myObj; // myObj = {name:'Sanjar', place:'Earth', era:'Phanerozoic'};`\n- Features in destructuring\n  - Default value for fields - `let {name, place='India'} = myObj; // in case myObj doesn't have a 'place' field`\n  - Skip selected values - `let [x, , y, , z] = [1, 2, 3, 4, 5]; // 2 and 4 are unused`\n  - Skip extraneous values - `let [x, y] = [1, 2, 3, 4]; // 3 and 4 ignored`\n  - Alias destructuring - `let {name: c} = {name:'Sanjar};'` creates a variable of name 'c' and gives it the value for key 'name'.\n  - Note: Spread operator is not meant for skipping.\n- Other uses:\n  1.  Swap variables - `[a, b] = [b, a]`\n  2.  Outside functions\n\t```js\n\tconst { name, place } = personObj;\n\t// use name and place\n\t```\n  3. Functions taking an object argument\n\t```js\n\tfunction f({ name, place }) {\n\t// OK\n\tconsole.log(place, name);\n\t}\n\t\n\tf(personObj); // OK\n\t```\n\n- Is destructuring worth it - [./destructuringCode.js](destructuringCode.js)\n- [More](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Ignoring_some_returned_values) at MDN\n#### 2. Dynamic fieldnames - Existing object value as field name\n\n- Use existing object's value as field name, actually its string equivalent.\n- Purpose: Have dynamic fieldnames, decided at runtime.\n- Creating the property: \\[personObject] instead of fieldName.\n\t```js\n\tlet a = [1, 2], b = 'bingo';\n\tlet z =\n\t{\n\t[a]: 1 ,\n\t[b]: 2\n\t}\n\t// { '1,2':1, 'bingo':2 } object created\n\t```\n- Accessing the property syntax: z\\[a]\n\t![](../../../../assets/B_Shorthands_and_object_features-image-1-66d11922.png)\n\t![](../../../../assets/B_Shorthands_and_object_features-image-2-66d11922.png)\n\n- Gotchas\n  - String equivalent of a list is a flattened list. For example: String equivalent of `[1, 2]` and `[1, [2]]` are identical.\n  - Avoid using plain `Object`'s as field equivalent. It's vague.\n  - Name of the variable is irrelevant.\n- How does this work?\n  - It's pretty simple - Any fieldname/key/property must be a `string` in JS, and all objects have a string equivalent.\n  - So there are 3 equivalent ways for `creating fields`, all making the same field:\n    1. Use a name - old way. Like this: `{ name: 'Sanjar' }`\n    2. Use a string - in quotes. Like this: `{ 'name': 'Sanjar' }`\n    3. Use \\[existingObject] to set string equivalent as fieldname. Like so: `{ [nameObject]: 'Sanjar' };`\n  - And so there are three equivalent ways to access field values:\n    - `Person.name` - just the name, no quotes no brackets.\n    - `Person['name']` - using strings within brackets.\n    - `Person[nameObject]` - finds a field matching the string equivalent of namedObject.\n\n#### 3. Object literal shorthand - use variable as fieldName and value\n- Use an existing variable to specify both the fieldName and value in an object literal.\n- What happens: variable name becomes field name. Variable value becomes field value.\n- Purpose: Concise code. [See](https://www.youtube.com/watch?v=HF0PN1vHsSY).\n- Syntax: Just include the variable, like element of an array.\n\n![](../../../../assets/B_Shorthands_and_object_features-image-3-66d11922.png)\n![](../../../../assets/B_Shorthands_and_object_features-image-4-66d11922.png)\n\n- Note: This feature has nothing to do with dynamic field names, as seen earlier.\n\n#### 4. Shorthand method names\n- Directly add function to object literal.\n- Purpose - Concide code\n- Syntax\n\n```js\n// old way\nconst cashier = \n{\n\tname: 'Will',\n\tcalculateWorth: function() {\n\t/_code_/\n\t},\n}\n\n// shorthand\nconst cashier = \n{\n\tname: 'Will',\n\tcalculateWorth() {/_code_/}\n}\n\n// both are identical\n```\n",
      "html": "<h1 id=\"b.-shorthands-and-object-features\">B. Shorthands and object features <a class=\"heading-anchor-permalink\" href=\"#b.-shorthands-and-object-features\">#</a></h1>\n<p>Created Thursday 25 March 2021</p>\n<h4 id=\"1.-destructuring(object%2Fiterable-unpacking)\">1. Destructuring(object/iterable unpacking) <a class=\"heading-anchor-permalink\" href=\"#1.-destructuring(object%2Fiterable-unpacking)\">#</a></h4>\n<ul>\n<li>\n<p>A very nice feature. Very popular. Inspired from python3.</p>\n</li>\n<li>\n<p>Purpose: Concise code.</p>\n</li>\n<li>\n<p>Works with:</p>\n<ul>\n<li>Iterables - Intialize variables using an iterable rvalue. Skipping is allowed, order(L to R) is maintained.</li>\n<li>Object - Declare and intialize variables(set to field-variableName corresponding value). <strong>Order</strong> does not matter. Works for deeply nested fields too. See <a href=\"https://www.w3schools.com/react/tryit.asp?filename=tryreact_es6_destructuring_object2\">this</a>.</li>\n</ul>\n</li>\n<li>\n<p>Syntax - iterable/object as <strong>rvalue</strong>. Literals are OK too.</p>\n<ul>\n<li>Iterable - <code>const [x, y, z] = new Set([1, 2, 3, 4]);</code></li>\n<li>Object - <code>let {name,place='Default'} = myObj; // myObj = {name:'Sanjar', place:'Earth', era:'Phanerozoic'};</code></li>\n</ul>\n</li>\n<li>\n<p>Features in destructuring</p>\n<ul>\n<li>Default value for fields - <code>let {name, place='India'} = myObj; // in case myObj doesn't have a 'place' field</code></li>\n<li>Skip selected values - <code>let [x, , y, , z] = [1, 2, 3, 4, 5]; // 2 and 4 are unused</code></li>\n<li>Skip extraneous values - <code>let [x, y] = [1, 2, 3, 4]; // 3 and 4 ignored</code></li>\n<li>Alias destructuring - <code>let {name: c} = {name:'Sanjar};'</code> creates a variable of name ‘c’ and gives it the value for key ‘name’.</li>\n<li>Note: Spread operator is not meant for skipping.</li>\n</ul>\n</li>\n<li>\n<p>Other uses:</p>\n<ol>\n<li>Swap variables - <code>[a, b] = [b, a]</code></li>\n<li>Outside functions</li>\n</ol>\n<pre><code class=\"language-js\">const { name, place } = personObj;\n// use name and place\n</code></pre>\n<ol start=\"3\">\n<li>Functions taking an object argument</li>\n</ol>\n<pre><code class=\"language-js\">function f({ name, place }) {\n// OK\nconsole.log(place, name);\n}\n\nf(personObj); // OK\n</code></pre>\n</li>\n<li>\n<p>Is destructuring worth it - <a href=\"destructuringCode.js\">./destructuringCode.js</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Ignoring_some_returned_values\">More</a> at MDN</p>\n</li>\n</ul>\n<h4 id=\"2.-dynamic-fieldnames---existing-object-value-as-field-name\">2. Dynamic fieldnames - Existing object value as field name <a class=\"heading-anchor-permalink\" href=\"#2.-dynamic-fieldnames---existing-object-value-as-field-name\">#</a></h4>\n<ul>\n<li>\n<p>Use existing object’s value as field name, actually its string equivalent.</p>\n</li>\n<li>\n<p>Purpose: Have dynamic fieldnames, decided at runtime.</p>\n</li>\n<li>\n<p>Creating the property: [personObject] instead of fieldName.</p>\n<pre><code class=\"language-js\">let a = [1, 2], b = 'bingo';\nlet z =\n{\n[a]: 1 ,\n[b]: 2\n}\n// { '1,2':1, 'bingo':2 } object created\n</code></pre>\n</li>\n<li>\n<p>Accessing the property syntax: z[a]\n<img src=\"../../../../assets/B_Shorthands_and_object_features-image-1-66d11922.png\" alt=\"\">\n<img src=\"../../../../assets/B_Shorthands_and_object_features-image-2-66d11922.png\" alt=\"\"></p>\n</li>\n<li>\n<p>Gotchas</p>\n<ul>\n<li>String equivalent of a list is a flattened list. For example: String equivalent of <code>[1, 2]</code> and <code>[1, [2]]</code> are identical.</li>\n<li>Avoid using plain <code>Object</code>'s as field equivalent. It’s vague.</li>\n<li>Name of the variable is irrelevant.</li>\n</ul>\n</li>\n<li>\n<p>How does this work?</p>\n<ul>\n<li>It’s pretty simple - Any fieldname/key/property must be a <code>string</code> in JS, and all objects have a string equivalent.</li>\n<li>So there are 3 equivalent ways for <code>creating fields</code>, all making the same field:\n<ol>\n<li>Use a name - old way. Like this: <code>{ name: 'Sanjar' }</code></li>\n<li>Use a string - in quotes. Like this: <code>{ 'name': 'Sanjar' }</code></li>\n<li>Use [existingObject] to set string equivalent as fieldname. Like so: <code>{ [nameObject]: 'Sanjar' };</code></li>\n</ol>\n</li>\n<li>And so there are three equivalent ways to access field values:\n<ul>\n<li><code>Person.name</code> - just the name, no quotes no brackets.</li>\n<li><code>Person['name']</code> - using strings within brackets.</li>\n<li><code>Person[nameObject]</code> - finds a field matching the string equivalent of namedObject.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3.-object-literal-shorthand---use-variable-as-fieldname-and-value\">3. Object literal shorthand - use variable as fieldName and value <a class=\"heading-anchor-permalink\" href=\"#3.-object-literal-shorthand---use-variable-as-fieldname-and-value\">#</a></h4>\n<ul>\n<li>Use an existing variable to specify both the fieldName and value in an object literal.</li>\n<li>What happens: variable name becomes field name. Variable value becomes field value.</li>\n<li>Purpose: Concise code. <a href=\"https://www.youtube.com/watch?v=HF0PN1vHsSY\">See</a>.</li>\n<li>Syntax: Just include the variable, like element of an array.</li>\n</ul>\n<p><img src=\"../../../../assets/B_Shorthands_and_object_features-image-3-66d11922.png\" alt=\"\">\n<img src=\"../../../../assets/B_Shorthands_and_object_features-image-4-66d11922.png\" alt=\"\"></p>\n<ul>\n<li>Note: This feature has nothing to do with dynamic field names, as seen earlier.</li>\n</ul>\n<h4 id=\"4.-shorthand-method-names\">4. Shorthand method names <a class=\"heading-anchor-permalink\" href=\"#4.-shorthand-method-names\">#</a></h4>\n<ul>\n<li>Directly add function to object literal.</li>\n<li>Purpose - Concide code</li>\n<li>Syntax</li>\n</ul>\n<pre><code class=\"language-js\">// old way\nconst cashier = \n{\n\tname: 'Will',\n\tcalculateWorth: function() {\n\t/_code_/\n\t},\n}\n\n// shorthand\nconst cashier = \n{\n\tname: 'Will',\n\tcalculateWorth() {/_code_/}\n}\n\n// both are identical\n</code></pre>\n",
      "id": 129
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/2_ES5_and_ES6/C_JS_exclusive_features.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/2_ES5_and_ES6/C_JS_exclusive_features.html",
      "content": "# C. JS exclusive features\nCreated Thursday 25 March 2021\n\n#### 1. Symbol data type\n- Useful when working with objects.\n- Used to create properties in objects which are invisible to the object owner.\n- This is important if different people work on the same object. Separation of concerns is the goal, symbols avoid properties to clash, if the object is handled by two scripts.\n- There is a global symbol registry, syntax, Symbol.for('id') is used to get the key for id, this is useful if we want some symbols to be the same in a team where a project has many teams.\n- Symbol() don't auto-convert to strings, which is why obj[id1] is different for different people.\n\n      id = Symbol('id'); // desciption does not affect the hash value\n      const obj = {\n      \t[id]: 23;\n      }\n\n      // we can add our own properties to an existing object\n      id1 = Symbol();\n      obj[id1] = 231; // not accessible to the original user even if he uses property name as id1\n\n  FIXME\n#### 2. use `strict`\n- Purpose - Modern mode for JS, generates more exceptions that usual. It can be enforced at the **function** or **script** level. [See](https://johnresig.com/blog/ecmascript-5-strict-mode-json-and-more/).\n- Syntax - add `\"use strict\"` at the first line inside the function, class or script. Only comments may appear about the `\"use script\"`.\n- It is just a signal for the interpreter.\n- Gotcha - There's no way to \"cancel\" `\"use strict\"`, once enabled.\n- Example\n\t```js\n\t// Example 1 - Globally\n\t\"use strict\"; // for the whole script\n\t\n\t///_ code_/\n\t\n\t// Example 2 - Selective\n\tfunction f()\n\t{\n\t\t\"use strict\"; // for the function\n\t\t// code\n\t}\n\tfunction g()\n\t{\n\t\t/_code_/ // no effect of \"strict\"\n\t}\n\t```\n\n- Is it used often? There are two cases:\n  - Code using classes and modules - Not required. `\"use strict\"` is enabled inside these by default.\n  - Old codebases - `\"use strict\"` is encouraged.",
      "html": "<h1 id=\"c.-js-exclusive-features\">C. JS exclusive features <a class=\"heading-anchor-permalink\" href=\"#c.-js-exclusive-features\">#</a></h1>\n<p>Created Thursday 25 March 2021</p>\n<h4 id=\"1.-symbol-data-type\">1. Symbol data type <a class=\"heading-anchor-permalink\" href=\"#1.-symbol-data-type\">#</a></h4>\n<ul>\n<li>\n<p>Useful when working with objects.</p>\n</li>\n<li>\n<p>Used to create properties in objects which are invisible to the object owner.</p>\n</li>\n<li>\n<p>This is important if different people work on the same object. Separation of concerns is the goal, symbols avoid properties to clash, if the object is handled by two scripts.</p>\n</li>\n<li>\n<p>There is a global symbol registry, syntax, Symbol.for(‘id’) is used to get the key for id, this is useful if we want some symbols to be the same in a team where a project has many teams.</p>\n</li>\n<li>\n<p>Symbol() don’t auto-convert to strings, which is why obj[id1] is different for different people.</p>\n<pre><code>id = Symbol('id'); // desciption does not affect the hash value\nconst obj = {\n\t[id]: 23;\n}\n\n// we can add our own properties to an existing object\nid1 = Symbol();\nobj[id1] = 231; // not accessible to the original user even if he uses property name as id1\n</code></pre>\n<p>FIXME</p>\n</li>\n</ul>\n<h4 id=\"2.-use-strict\">2. use <code>strict</code> <a class=\"heading-anchor-permalink\" href=\"#2.-use-strict\">#</a></h4>\n<ul>\n<li>\n<p>Purpose - Modern mode for JS, generates more exceptions that usual. It can be enforced at the <strong>function</strong> or <strong>script</strong> level. <a href=\"https://johnresig.com/blog/ecmascript-5-strict-mode-json-and-more/\">See</a>.</p>\n</li>\n<li>\n<p>Syntax - add <code>&quot;use strict&quot;</code> at the first line inside the function, class or script. Only comments may appear about the <code>&quot;use script&quot;</code>.</p>\n</li>\n<li>\n<p>It is just a signal for the interpreter.</p>\n</li>\n<li>\n<p>Gotcha - There’s no way to “cancel” <code>&quot;use strict&quot;</code>, once enabled.</p>\n</li>\n<li>\n<p>Example</p>\n<pre><code class=\"language-js\">// Example 1 - Globally\n&quot;use strict&quot;; // for the whole script\n\n///_ code_/\n\n// Example 2 - Selective\nfunction f()\n{\n\t&quot;use strict&quot;; // for the function\n\t// code\n}\nfunction g()\n{\n\t/_code_/ // no effect of &quot;strict&quot;\n}\n</code></pre>\n</li>\n<li>\n<p>Is it used often? There are two cases:</p>\n<ul>\n<li>Code using classes and modules - Not required. <code>&quot;use strict&quot;</code> is enabled inside these by default.</li>\n<li>Old codebases - <code>&quot;use strict&quot;</code> is encouraged.</li>\n</ul>\n</li>\n</ul>\n",
      "id": 130
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/3_Advanced_Loops.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/3_Advanced_Loops.html",
      "content": "# 3. Advanced Loops\nCreated Saturday 18 July 2020\n\n## Aren't for/while enough?\nNo, because they:\n\n* Work on iterables, but with a potential for off-by-one errors.\n* Don't work on objects.\n\n\n## 1. forEach - array\n* Purpose - iterate over an array.\n* Since ES5.\n* Syntax\n\t```js\n\tmyIterable.forEach(f); // f(ele) for all elements, returns nothing\n\n\tf = function(a){};\t// a  = element value\n\tf = function(a, b){}; // a = element value, b = index\n\t```\n* Arguments passed to function, in order:\n\t1. Element\n\t2. Index, only for arrays. OPTIONAL\n* Gotcha - no way to ``break`` or ``continue``\n\n\n## 2. for ``in`` - object\n* Purpose - iterate over an object.\n* Iterates over fieldNames, not values.\n* MAID(in-enumerate object)\n\t```js\n\tlet timeSpace = { place:'Earth',  era:'Phanerozoic'};\n\tfor(const ele in x)\n\t\tconsole.log(ele);\n\t/* fields not values\n\tplace\n\tera\n\t*/\n\t```\n* Cons\n\t* Works only for one iterable - array.\n\t* Iteration will include functions, in addition to indices of the array. [See](messyForIn.js).\n\t* Loop variable is the index instead of element for arrays.\n* Note: No provision for index as 2nd param.\n* Advice - avoid with iterables.\n\n\n## 3. for ``of`` - any iterable\n* Purpose - iterate over any *iterable*.\n* Solves the problem of iterables in ``for in``. Is a generalized ``forEach``.\n\t```js\n\t// arrays\n\tfor(const ele of [1,2,3])\n\t\tconsole.log(ele);\n\n\t// set\n\tlet s = new Set(['H', 'A', 'C', 'K']);\n\tfor(const i of s)\n\t\tconsole.log(i);\n\t```\n* To access array index, run the loop for arr``.entries()``, which is an array of [index, value] 2-arrays. Use destructuring for concise code.\n\t```js\n\tlet s = ['H', 'A', 'C', 'K'];\n\tfor(const i of s.entries())\n\t\tconsole.log(i[1]);\n\t/*\n\tH\n\tA\n\tC\n\tK\n\t*/\n\n\t// better - destructuring\n\tfor(const [i, j] of s.entries())\n\t\tconsole.log(i)\n\t/*\n\t0\n\t1\n\t2\n\t3\n\t*/\n\t```\n\n",
      "html": "<h1 id=\"3.-advanced-loops\">3. Advanced Loops <a class=\"heading-anchor-permalink\" href=\"#3.-advanced-loops\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<h2 id=\"aren%E2%80%99t-for%2Fwhile-enough%3F\">Aren’t for/while enough? <a class=\"heading-anchor-permalink\" href=\"#aren%E2%80%99t-for%2Fwhile-enough%3F\">#</a></h2>\n<p>No, because they:</p>\n<ul>\n<li>Work on iterables, but with a potential for off-by-one errors.</li>\n<li>Don’t work on objects.</li>\n</ul>\n<h2 id=\"1.-foreach---array\">1. forEach - array <a class=\"heading-anchor-permalink\" href=\"#1.-foreach---array\">#</a></h2>\n<ul>\n<li>Purpose - iterate over an array.</li>\n<li>Since ES5.</li>\n<li>Syntax<pre><code class=\"language-js\">myIterable.forEach(f); // f(ele) for all elements, returns nothing\n\nf = function(a){};\t// a  = element value\nf = function(a, b){}; // a = element value, b = index\n</code></pre>\n</li>\n<li>Arguments passed to function, in order:\n<ol>\n<li>Element</li>\n<li>Index, only for arrays. OPTIONAL</li>\n</ol>\n</li>\n<li>Gotcha - no way to <code>break</code> or <code>continue</code></li>\n</ul>\n<h2 id=\"2.-for-in---object\">2. for <code>in</code> - object <a class=\"heading-anchor-permalink\" href=\"#2.-for-in---object\">#</a></h2>\n<ul>\n<li>Purpose - iterate over an object.</li>\n<li>Iterates over fieldNames, not values.</li>\n<li>MAID(in-enumerate object)<pre><code class=\"language-js\">let timeSpace = { place:'Earth',  era:'Phanerozoic'};\nfor(const ele in x)\n\tconsole.log(ele);\n/* fields not values\nplace\nera\n*/\n</code></pre>\n</li>\n<li>Cons\n<ul>\n<li>Works only for one iterable - array.</li>\n<li>Iteration will include functions, in addition to indices of the array. <a href=\"messyForIn.js\">See</a>.</li>\n<li>Loop variable is the index instead of element for arrays.</li>\n</ul>\n</li>\n<li>Note: No provision for index as 2nd param.</li>\n<li>Advice - avoid with iterables.</li>\n</ul>\n<h2 id=\"3.-for-of---any-iterable\">3. for <code>of</code> - any iterable <a class=\"heading-anchor-permalink\" href=\"#3.-for-of---any-iterable\">#</a></h2>\n<ul>\n<li>Purpose - iterate over any <em>iterable</em>.</li>\n<li>Solves the problem of iterables in <code>for in</code>. Is a generalized <code>forEach</code>.<pre><code class=\"language-js\">// arrays\nfor(const ele of [1,2,3])\n\tconsole.log(ele);\n\n// set\nlet s = new Set(['H', 'A', 'C', 'K']);\nfor(const i of s)\n\tconsole.log(i);\n</code></pre>\n</li>\n<li>To access array index, run the loop for arr<code>.entries()</code>, which is an array of [index, value] 2-arrays. Use destructuring for concise code.<pre><code class=\"language-js\">let s = ['H', 'A', 'C', 'K'];\nfor(const i of s.entries())\n\tconsole.log(i[1]);\n/*\nH\nA\nC\nK\n*/\n\n// better - destructuring\nfor(const [i, j] of s.entries())\n\tconsole.log(i)\n/*\n0\n1\n2\n3\n*/\n</code></pre>\n</li>\n</ul>\n",
      "id": 131
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/4_Advanced_Arrays/1_spread_and_rest_operators.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/4_Advanced_Arrays/1_spread_and_rest_operators.html",
      "content": "# 1. spread and rest operators\nCreated Thursday 25 March 2021\n\n## Are the two different?\n- Both use ellipisis as operator symbol.\n- Both have different use:\n  1.  Unpacking things - \"spread operator\".\n  2.  Packing things - \"rest parameter/element\".\n\n## Spread operator\n- Purpose - unpack iterables.\n- Syntax - `...iter`. Exposes all elements, comma separated. May be placed inside `[]` or `{}`.\n- No in place effect.\n- Uses:\n  - Basic unpacking - `[1, 2, ...x]`, where `x` is an existing iterable.\n  - Concatenation - `[...x, ...y]`. A shorthand for the array `concat` function.\n  - Function call(elements as params) - `f(...[1, 2, 3]);` is equivalent to `f(1, 2, 3)`. Extraneous elements(to the right) are ignored, if parameters are less.\n  - Copy an array - `let x = [1, 2], y = [...x];`\n- How this works - syntax sugar.\n\n## Rest parameter/element\n- Purpose - pack elements, to an array.\n- Syntax - There is a slight variation\n  - Rest param - `f(a, b, ...x)`\n  - Rest element - `[a, b, ...x] = iter`, must use a `[]` or `{}`.\n- Gotcha - only the last param/element can be a rest param/element, ergo, there can only be one.\n- Uses:\n  - Variadic function definition - `f(a, b, ...theArgs)`, `theArgs` will be an array.\n  - Rest element - `[a, ...b] = new Set([1, 2, 3])`, result `a = 1`, `b = [2, 3]`.\n- Variadic functions were possible before ES6 too - you had to use the `arguments` object, which is not an array and was therefore difficult to work with. Rest param solved this problem.\n- How this works? - Rest element is a simple syntax sugar. For functions, an enclosing [] is placed around the param list by the interpreter, `arguments` as rvalue, like so: `[a, b, ...c] = arguments;`. Thus, we get `c` as a array.\n\n<https://www.youtube.com/watch?v=R8rmfD9Y5-c&ab_channel=WebDevSimplified> FIXME\n\n## How is spread operator, rest param and destructuring related?\n- All 3 have different purpose:\n  1.  Spread operator - unpack elements.\n  2.  Rest param/element - pack elements.\n  3.  Destructuring - initialize variable(_s_).\n- Destructuring can work with multiple values, other 2 don't.\n- It is simple.\n",
      "html": "<h1 id=\"1.-spread-and-rest-operators\">1. spread and rest operators <a class=\"heading-anchor-permalink\" href=\"#1.-spread-and-rest-operators\">#</a></h1>\n<p>Created Thursday 25 March 2021</p>\n<h2 id=\"are-the-two-different%3F\">Are the two different? <a class=\"heading-anchor-permalink\" href=\"#are-the-two-different%3F\">#</a></h2>\n<ul>\n<li>Both use ellipisis as operator symbol.</li>\n<li>Both have different use:\n<ol>\n<li>Unpacking things - “spread operator”.</li>\n<li>Packing things - “rest parameter/element”.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"spread-operator\">Spread operator <a class=\"heading-anchor-permalink\" href=\"#spread-operator\">#</a></h2>\n<ul>\n<li>Purpose - unpack iterables.</li>\n<li>Syntax - <code>...iter</code>. Exposes all elements, comma separated. May be placed inside <code>[]</code> or <code>{}</code>.</li>\n<li>No in place effect.</li>\n<li>Uses:\n<ul>\n<li>Basic unpacking - <code>[1, 2, ...x]</code>, where <code>x</code> is an existing iterable.</li>\n<li>Concatenation - <code>[...x, ...y]</code>. A shorthand for the array <code>concat</code> function.</li>\n<li>Function call(elements as params) - <code>f(...[1, 2, 3]);</code> is equivalent to <code>f(1, 2, 3)</code>. Extraneous elements(to the right) are ignored, if parameters are less.</li>\n<li>Copy an array - <code>let x = [1, 2], y = [...x];</code></li>\n</ul>\n</li>\n<li>How this works - syntax sugar.</li>\n</ul>\n<h2 id=\"rest-parameter%2Felement\">Rest parameter/element <a class=\"heading-anchor-permalink\" href=\"#rest-parameter%2Felement\">#</a></h2>\n<ul>\n<li>Purpose - pack elements, to an array.</li>\n<li>Syntax - There is a slight variation\n<ul>\n<li>Rest param - <code>f(a, b, ...x)</code></li>\n<li>Rest element - <code>[a, b, ...x] = iter</code>, must use a <code>[]</code> or <code>{}</code>.</li>\n</ul>\n</li>\n<li>Gotcha - only the last param/element can be a rest param/element, ergo, there can only be one.</li>\n<li>Uses:\n<ul>\n<li>Variadic function definition - <code>f(a, b, ...theArgs)</code>, <code>theArgs</code> will be an array.</li>\n<li>Rest element - <code>[a, ...b] = new Set([1, 2, 3])</code>, result <code>a = 1</code>, <code>b = [2, 3]</code>.</li>\n</ul>\n</li>\n<li>Variadic functions were possible before ES6 too - you had to use the <code>arguments</code> object, which is not an array and was therefore difficult to work with. Rest param solved this problem.</li>\n<li>How this works? - Rest element is a simple syntax sugar. For functions, an enclosing [] is placed around the param list by the interpreter, <code>arguments</code> as rvalue, like so: <code>[a, b, ...c] = arguments;</code>. Thus, we get <code>c</code> as a array.</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=R8rmfD9Y5-c&amp;ab_channel=WebDevSimplified\">https://www.youtube.com/watch?v=R8rmfD9Y5-c&amp;ab_channel=WebDevSimplified</a> FIXME</p>\n<h2 id=\"how-is-spread-operator%2C-rest-param-and-destructuring-related%3F\">How is spread operator, rest param and destructuring related? <a class=\"heading-anchor-permalink\" href=\"#how-is-spread-operator%2C-rest-param-and-destructuring-related%3F\">#</a></h2>\n<ul>\n<li>All 3 have different purpose:\n<ol>\n<li>Spread operator - unpack elements.</li>\n<li>Rest param/element - pack elements.</li>\n<li>Destructuring - initialize variable(<em>s</em>).</li>\n</ol>\n</li>\n<li>Destructuring can work with multiple values, other 2 don’t.</li>\n<li>It is simple.</li>\n</ul>\n",
      "id": 132
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/4_Advanced_Arrays/2_Map,_filter_and_reduce.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/4_Advanced_Arrays/2_Map,_filter_and_reduce.html",
      "content": "# 2. Map, filter and reduce\nCreated Thursday 25 March 2021\n\n## Why use map, filter or reduce?\n- Map, filter and reduce help us to make our code functionally pure(deterministic).\n\n## 1. Map\n- Purpose - store f(ele) for each element, in a **map object**.\n- Syntax - `arr.map(f)`; where f can be a function in any form.\n- Assume an argument when defining f.\n- f(ele) is computed and stored for each element. `undefined` is stored if `f` returns nothing.\n- The map object is index subscriptable.\n\n![](../../../../assets/2_Map,_filter_and_reduce-image-1-4ce68a0b.png)\n\n## 2. Filter\n- Purpose - returns an iterable of elements for which f(ele) is true.\n- Syntax - same as map.\n\n![](../../../../assets/2_Map,_filter_and_reduce-image-2-4ce68a0b.png)\n\n## 3. Reduce\n- Purpose - Accumulates the result by running f(accum,ele) for each element.\n- Syntax - `arr.reduce(f, accum_start=0)`\n- You must have _accumulator_ and _element_ as parameters of `f`, in order.\n\n```js\nconst arr = [1, 2, 3]\nconst res = arr.reduce(((accum, ele)=> accum + ele), accum_init_value); // 0 if unspecified\n// same as doing accum = accum + ele each time\n```\n\n- Remember to update accum inside f().\n\nNote:\n- All the quick for functions - **forEach**, **map**, **filter** and **reduce** work sequentially by default. They can be made parallel, however.\n- Iteration number is available all **forEach**, **map** and **filter **- as the second parameter of `f`. This is optional.\n\n## Gotchas\n- `map` and `filter` return an array as output, while `reduce` returns a single value (usually).\n- Use these anytime we need loops for small things.\n- forEach is different, it returns nothing.\n",
      "html": "<h1 id=\"2.-map%2C-filter-and-reduce\">2. Map, filter and reduce <a class=\"heading-anchor-permalink\" href=\"#2.-map%2C-filter-and-reduce\">#</a></h1>\n<p>Created Thursday 25 March 2021</p>\n<h2 id=\"why-use-map%2C-filter-or-reduce%3F\">Why use map, filter or reduce? <a class=\"heading-anchor-permalink\" href=\"#why-use-map%2C-filter-or-reduce%3F\">#</a></h2>\n<ul>\n<li>Map, filter and reduce help us to make our code functionally pure(deterministic).</li>\n</ul>\n<h2 id=\"1.-map\">1. Map <a class=\"heading-anchor-permalink\" href=\"#1.-map\">#</a></h2>\n<ul>\n<li>Purpose - store f(ele) for each element, in a <strong>map object</strong>.</li>\n<li>Syntax - <code>arr.map(f)</code>; where f can be a function in any form.</li>\n<li>Assume an argument when defining f.</li>\n<li>f(ele) is computed and stored for each element. <code>undefined</code> is stored if <code>f</code> returns nothing.</li>\n<li>The map object is index subscriptable.</li>\n</ul>\n<p><img src=\"../../../../assets/2_Map,_filter_and_reduce-image-1-4ce68a0b.png\" alt=\"\"></p>\n<h2 id=\"2.-filter\">2. Filter <a class=\"heading-anchor-permalink\" href=\"#2.-filter\">#</a></h2>\n<ul>\n<li>Purpose - returns an iterable of elements for which f(ele) is true.</li>\n<li>Syntax - same as map.</li>\n</ul>\n<p><img src=\"../../../../assets/2_Map,_filter_and_reduce-image-2-4ce68a0b.png\" alt=\"\"></p>\n<h2 id=\"3.-reduce\">3. Reduce <a class=\"heading-anchor-permalink\" href=\"#3.-reduce\">#</a></h2>\n<ul>\n<li>Purpose - Accumulates the result by running f(accum,ele) for each element.</li>\n<li>Syntax - <code>arr.reduce(f, accum_start=0)</code></li>\n<li>You must have <em>accumulator</em> and <em>element</em> as parameters of <code>f</code>, in order.</li>\n</ul>\n<pre><code class=\"language-js\">const arr = [1, 2, 3]\nconst res = arr.reduce(((accum, ele)=&gt; accum + ele), accum_init_value); // 0 if unspecified\n// same as doing accum = accum + ele each time\n</code></pre>\n<ul>\n<li>Remember to update accum inside f().</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>All the quick for functions - <strong>forEach</strong>, <strong>map</strong>, <strong>filter</strong> and <strong>reduce</strong> work sequentially by default. They can be made parallel, however.</li>\n<li>Iteration number is available all <strong>forEach</strong>, <strong>map</strong> and **filter **- as the second parameter of <code>f</code>. This is optional.</li>\n</ul>\n<h2 id=\"gotchas\">Gotchas <a class=\"heading-anchor-permalink\" href=\"#gotchas\">#</a></h2>\n<ul>\n<li><code>map</code> and <code>filter</code> return an array as output, while <code>reduce</code> returns a single value (usually).</li>\n<li>Use these anytime we need loops for small things.</li>\n<li>forEach is different, it returns nothing.</li>\n</ul>\n",
      "id": 133
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/4_Advanced_Arrays/3_some_and_every.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/4_Advanced_Arrays/3_some_and_every.html",
      "content": "# 3. some and every\nCreated Thursday 25 March 2021\n\n\n* Purpose - concise code.\n* Given a criteria and an array, there are 3 possibilities. The criteria holds for:\n\t1. *every* element\n\t2. *some* element\n\t3. no element - same as **not(for all)**. Duplicate of 2.\n* Consquently, JS has two array methods:\n\t1. ``every``\n\t2. ``some``\n* About the functions:\n\t* Syntax: myArray.``every(criteriaFunc(ele, idx){})``. Similarly for ``some``.\n\t* You can access index as the 2nd param.\n\t* Working: ``every`` stops at first violation. ``some`` stops at first validation.\n\t* Time complexity - Θ(n)\n\t* Both return Boolean.\n\nExample\n```js\nlet nums = [22, 82, 90, 3, 96];\n\nfunction isEven(a) {\treturn a%2==0;\t}\nconsole.log('All even - ' + nums.every(isEven));\n/* output\nAll even - false\n*/\n\nconsole.log('Atleast one even - ' + nums.some(isEven));\n/* output\nAtleast one even - true\n*/\n\n// Access index\nlet nums = [22, 82, 90, 19, 96];\n\nconsole.log(nums.some((a, b) => {\n\tif(a%2)\n\t\treturn false;\n\tconsole.log(b);\n\treturn true;\n}));\n\n/* output\ntrue\n3\n*/\n```\n",
      "html": "<h1 id=\"3.-some-and-every\">3. some and every <a class=\"heading-anchor-permalink\" href=\"#3.-some-and-every\">#</a></h1>\n<p>Created Thursday 25 March 2021</p>\n<ul>\n<li>Purpose - concise code.</li>\n<li>Given a criteria and an array, there are 3 possibilities. The criteria holds for:\n<ol>\n<li><em>every</em> element</li>\n<li><em>some</em> element</li>\n<li>no element - same as <strong>not(for all)</strong>. Duplicate of 2.</li>\n</ol>\n</li>\n<li>Consquently, JS has two array methods:\n<ol>\n<li><code>every</code></li>\n<li><code>some</code></li>\n</ol>\n</li>\n<li>About the functions:\n<ul>\n<li>Syntax: myArray.<code>every(criteriaFunc(ele, idx){})</code>. Similarly for <code>some</code>.</li>\n<li>You can access index as the 2nd param.</li>\n<li>Working: <code>every</code> stops at first violation. <code>some</code> stops at first validation.</li>\n<li>Time complexity - Θ(n)</li>\n<li>Both return Boolean.</li>\n</ul>\n</li>\n</ul>\n<p>Example</p>\n<pre><code class=\"language-js\">let nums = [22, 82, 90, 3, 96];\n\nfunction isEven(a) {\treturn a%2==0;\t}\nconsole.log('All even - ' + nums.every(isEven));\n/* output\nAll even - false\n*/\n\nconsole.log('Atleast one even - ' + nums.some(isEven));\n/* output\nAtleast one even - true\n*/\n\n// Access index\nlet nums = [22, 82, 90, 19, 96];\n\nconsole.log(nums.some((a, b) =&gt; {\n\tif(a%2)\n\t\treturn false;\n\tconsole.log(b);\n\treturn true;\n}));\n\n/* output\ntrue\n3\n*/\n</code></pre>\n",
      "id": 134
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/5_Advanced_Functions/1_Pure_functions.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/5_Advanced_Functions/1_Pure_functions.html",
      "content": "# 1. Pure functions\nCreated Thursday 25 March 2021\n\n#### What are pure functions?\n- Have a single purpose.\n- Should be free from side-effects(i.e change to external variables), as much as possible.\n- Always return something.\n\n#### How to write pure functions?\n- Use `const` and avoid using `function` keyword as much as possible.\n- This makes our code deterministic(each function is a mathematical function, not just a relation), and consequently more robust.\n",
      "html": "<h1 id=\"1.-pure-functions\">1. Pure functions <a class=\"heading-anchor-permalink\" href=\"#1.-pure-functions\">#</a></h1>\n<p>Created Thursday 25 March 2021</p>\n<h4 id=\"what-are-pure-functions%3F\">What are pure functions? <a class=\"heading-anchor-permalink\" href=\"#what-are-pure-functions%3F\">#</a></h4>\n<ul>\n<li>Have a single purpose.</li>\n<li>Should be free from side-effects(i.e change to external variables), as much as possible.</li>\n<li>Always return something.</li>\n</ul>\n<h4 id=\"how-to-write-pure-functions%3F\">How to write pure functions? <a class=\"heading-anchor-permalink\" href=\"#how-to-write-pure-functions%3F\">#</a></h4>\n<ul>\n<li>Use <code>const</code> and avoid using <code>function</code> keyword as much as possible.</li>\n<li>This makes our code deterministic(each function is a mathematical function, not just a relation), and consequently more robust.</li>\n</ul>\n",
      "id": 135
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/5_Advanced_Functions/2_Closures.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/5_Advanced_Functions/2_Closures.html",
      "content": "# 2. Closures\nCreated Thursday 25 March 2021\n\n#### Why\n- Many a times, functions need to have some state. This is done using `static` variables in `C++`.\n- **This construct of a function and it's state, is called a closure.**\n- Closures help in avoiding global variables.\n\n#### How\n- Create some variables and a function in a scope. Then store the function in a variable, by returning the function in the scope. This \"stored\" function is a closure.\n- One can also have a closure generator, i.e. a factory of \"functions with a state\".\n- State is saved in heap memory, and is freed when the variable storing the function goes out of scope.\n\nExample - counter without a global variable, using closure.\n```javascript\nlet Base = function () {\n\tlet counter = 0;\n\treturn function () { \n\t\tcounter+=1; \n\t\tconsole.log(counter);\n\t} // returns function + \"state\" (outer variables)\n}\n\nlet add = Base(); // closure instance created\nadd() // 1\nadd() // 2\nadd() // 3\n\n// We can have more closures too.\nlet plus = Base();\n\nconsole.log(plus === add) // false, closure instances are different\n```\n\n#### What\nClosure is just a \"saved instance\" (state) of the outer lexical environment. But how far (upwards) does it save. Let's have a look at scopes for a function, and it's availablity:\n1. Global scope - yes, due to Global section of code.\n2. Local scope - yes, due to stack memory.\n3. Outer function (s) - yes, due to closure - their instance is \"saved\" to heap memory.\n\t1. One outer function - yes, due to closure.\n\t2. More outer functions - yes, due to closure.\n4. Inner functions (more deeper than it) - No.\n\nSo, a closure has access to values from \"all outer\" scopes, although the closure part is only outer variables (whose instance is saved to heap), till the global depth.\n\n###### Is closure created only for the available function?\nYes\n```javascript\nfunction Base()\n{\n\tlet counter = 0;\n\n\tfunction f()\n\t{\n\t\tcounter += 1000;\n\t\tconsole.log(counter);\n\t}\n\n\tfunction g()\n\t{\n\t\tcounter += 1;\n\t\tconsole.log(counter);\n\t}\n\treturn g;\n}\n\nlet add = Base(); // Closure created: g and counter present, f is absent\n```\nHere closure is created only for `g`, and not `f`, because f goes out of scope upon executing the return statement.\n\nAlso, this is the reason event handlers are always closures, because the `addEventListener` is like a return statement, i.e. it makes the function available to other location, hence saves the state.\n",
      "html": "<h1 id=\"2.-closures\">2. Closures <a class=\"heading-anchor-permalink\" href=\"#2.-closures\">#</a></h1>\n<p>Created Thursday 25 March 2021</p>\n<h4 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h4>\n<ul>\n<li>Many a times, functions need to have some state. This is done using <code>static</code> variables in <code>C++</code>.</li>\n<li><strong>This construct of a function and it’s state, is called a closure.</strong></li>\n<li>Closures help in avoiding global variables.</li>\n</ul>\n<h4 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h4>\n<ul>\n<li>Create some variables and a function in a scope. Then store the function in a variable, by returning the function in the scope. This “stored” function is a closure.</li>\n<li>One can also have a closure generator, i.e. a factory of “functions with a state”.</li>\n<li>State is saved in heap memory, and is freed when the variable storing the function goes out of scope.</li>\n</ul>\n<p>Example - counter without a global variable, using closure.</p>\n<pre><code class=\"language-javascript\">let Base = function () {\n\tlet counter = 0;\n\treturn function () { \n\t\tcounter+=1; \n\t\tconsole.log(counter);\n\t} // returns function + &quot;state&quot; (outer variables)\n}\n\nlet add = Base(); // closure instance created\nadd() // 1\nadd() // 2\nadd() // 3\n\n// We can have more closures too.\nlet plus = Base();\n\nconsole.log(plus === add) // false, closure instances are different\n</code></pre>\n<h4 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h4>\n<p>Closure is just a “saved instance” (state) of the outer lexical environment. But how far (upwards) does it save. Let’s have a look at scopes for a function, and it’s availablity:</p>\n<ol>\n<li>Global scope - yes, due to Global section of code.</li>\n<li>Local scope - yes, due to stack memory.</li>\n<li>Outer function (s) - yes, due to closure - their instance is “saved” to heap memory.\n<ol>\n<li>One outer function - yes, due to closure.</li>\n<li>More outer functions - yes, due to closure.</li>\n</ol>\n</li>\n<li>Inner functions (more deeper than it) - No.</li>\n</ol>\n<p>So, a closure has access to values from “all outer” scopes, although the closure part is only outer variables (whose instance is saved to heap), till the global depth.</p>\n<h6 id=\"is-closure-created-only-for-the-available-function%3F\">Is closure created only for the available function? <a class=\"heading-anchor-permalink\" href=\"#is-closure-created-only-for-the-available-function%3F\">#</a></h6>\n<p>Yes</p>\n<pre><code class=\"language-javascript\">function Base()\n{\n\tlet counter = 0;\n\n\tfunction f()\n\t{\n\t\tcounter += 1000;\n\t\tconsole.log(counter);\n\t}\n\n\tfunction g()\n\t{\n\t\tcounter += 1;\n\t\tconsole.log(counter);\n\t}\n\treturn g;\n}\n\nlet add = Base(); // Closure created: g and counter present, f is absent\n</code></pre>\n<p>Here closure is created only for <code>g</code>, and not <code>f</code>, because f goes out of scope upon executing the return statement.</p>\n<p>Also, this is the reason event handlers are always closures, because the <code>addEventListener</code> is like a return statement, i.e. it makes the function available to other location, hence saves the state.</p>\n",
      "id": 136
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/5_Advanced_Functions/3_Currying.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/5_Advanced_Functions/3_Currying.html",
      "content": "# 3. Currying\nCreated Thursday 25 March 2021\n\nTODO\n\n#### What is currying?\n- _A [curried](https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983) function is a function that takes multiple arguments one at a time._ All functions in the chain are different, with the contexts building up as we go inside(∵ closure).\n- Function call trace is a singly linked list.\n\n#### Syntax\n- Arrow functions are used, because they store state.\n- Definition: Most parts are one liners, so they may be chain them directly {} for the body.\n- Function invocation: f(a)(b)(c) also called point-free-style.\n\n#### Use\n- Generate specific version of functions, by setting contexts. Example: `const g = f(a)(b);` we can set contexts a and b to generate `g`, a specialized function.\n- **Why do this** ? - Concise code and DRY\n\n  // Without currying\n  function add(x, y, z) { return x + y + z } // general definition\n  function a1(p) { return 1 + 2 + z; } // no reuse\n  function a2(p) { return 10 + 20 + z; } // no reuse\n\n  // With currying\n  let add => x => y => z => (x + y + z);\n  let a1 = add(1)(2);\n  let a2 = add(10)(20); //\n\n  // calling is the same\n\n- Currying is highly incentivized in JS - there are even special functions which help debug curried functions.\n",
      "html": "<h1 id=\"3.-currying\">3. Currying <a class=\"heading-anchor-permalink\" href=\"#3.-currying\">#</a></h1>\n<p>Created Thursday 25 March 2021</p>\n<p>TODO</p>\n<h4 id=\"what-is-currying%3F\">What is currying? <a class=\"heading-anchor-permalink\" href=\"#what-is-currying%3F\">#</a></h4>\n<ul>\n<li><em>A <a href=\"https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983\">curried</a> function is a function that takes multiple arguments one at a time.</em> All functions in the chain are different, with the contexts building up as we go inside(∵ closure).</li>\n<li>Function call trace is a singly linked list.</li>\n</ul>\n<h4 id=\"syntax\">Syntax <a class=\"heading-anchor-permalink\" href=\"#syntax\">#</a></h4>\n<ul>\n<li>Arrow functions are used, because they store state.</li>\n<li>Definition: Most parts are one liners, so they may be chain them directly {} for the body.</li>\n<li>Function invocation: f(a)(b)© also called point-free-style.</li>\n</ul>\n<h4 id=\"use\">Use <a class=\"heading-anchor-permalink\" href=\"#use\">#</a></h4>\n<ul>\n<li>\n<p>Generate specific version of functions, by setting contexts. Example: <code>const g = f(a)(b);</code> we can set contexts a and b to generate <code>g</code>, a specialized function.</p>\n</li>\n<li>\n<p><strong>Why do this</strong> ? - Concise code and DRY</p>\n<p>// Without currying\nfunction add(x, y, z) { return x + y + z } // general definition\nfunction a1§ { return 1 + 2 + z; } // no reuse\nfunction a2§ { return 10 + 20 + z; } // no reuse</p>\n<p>// With currying\nlet add =&gt; x =&gt; y =&gt; z =&gt; (x + y + z);\nlet a1 = add(1)(2);\nlet a2 = add(10)(20); //</p>\n<p>// calling is the same</p>\n</li>\n<li>\n<p>Currying is highly incentivized in JS - there are even special functions which help debug curried functions.</p>\n</li>\n</ul>\n",
      "id": 137
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/5_Advanced_Functions/4_Function_composition.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/5_Advanced_Functions/4_Function_composition.html",
      "content": "# 4. Function composition\nCreated Thursday 25 March 2021\n\nTODO\n\n#### What is Composition\n- Writing functions where the input of the outer function is the output of the inner function, and this is true for all. Implementing f(g(h(x))) using main_func(f, g)(arg).\n\n#### Syntax\n```js\nconst g = (foo) => (/*code*/); // takes function as argument\nconst h = (a) => (/*code*/); // takes value as argument\n\nconst f(g, h) = (x) => f(g(x)); // composition definition\n\nf(g(x)); // call\n```\n- Accumulation of context is optional.\n\n#### Why do this\n- For concise code\n\t```js\n\t// Without composition\n\tfunction f(g, h)\n\t{\n\t\n\t}\n\t\n\t// With currying\n\tlet add => x => y => z => (x + y + z);\n\tlet a1 = add(1)(2);\n\tlet a2 = add(10)(20); //\n\t\n\t// calling is the same\n\t```\n- Currying vs Composition - Currying is a multi-argument system and composition is multi-function(not multi-purpose) system.\n",
      "html": "<h1 id=\"4.-function-composition\">4. Function composition <a class=\"heading-anchor-permalink\" href=\"#4.-function-composition\">#</a></h1>\n<p>Created Thursday 25 March 2021</p>\n<p>TODO</p>\n<h4 id=\"what-is-composition\">What is Composition <a class=\"heading-anchor-permalink\" href=\"#what-is-composition\">#</a></h4>\n<ul>\n<li>Writing functions where the input of the outer function is the output of the inner function, and this is true for all. Implementing f(g(h(x))) using main_func(f, g)(arg).</li>\n</ul>\n<h4 id=\"syntax\">Syntax <a class=\"heading-anchor-permalink\" href=\"#syntax\">#</a></h4>\n<pre><code class=\"language-js\">const g = (foo) =&gt; (/*code*/); // takes function as argument\nconst h = (a) =&gt; (/*code*/); // takes value as argument\n\nconst f(g, h) = (x) =&gt; f(g(x)); // composition definition\n\nf(g(x)); // call\n</code></pre>\n<ul>\n<li>Accumulation of context is optional.</li>\n</ul>\n<h4 id=\"why-do-this\">Why do this <a class=\"heading-anchor-permalink\" href=\"#why-do-this\">#</a></h4>\n<ul>\n<li>For concise code<pre><code class=\"language-js\">// Without composition\nfunction f(g, h)\n{\n\n}\n\n// With currying\nlet add =&gt; x =&gt; y =&gt; z =&gt; (x + y + z);\nlet a1 = add(1)(2);\nlet a2 = add(10)(20); //\n\n// calling is the same\n</code></pre>\n</li>\n<li>Currying vs Composition - Currying is a multi-argument system and composition is multi-function(not multi-purpose) system.</li>\n</ul>\n",
      "id": 138
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/6_Advanced_Objects/1_How_variables_work.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/6_Advanced_Objects/1_How_variables_work.html",
      "content": "# 1. How variables work\nCreated Thursday 25 March 2021\n\nFIXME\n\n#### Reference types\nAll the datatypes except the primitive ones(number, boolean, string, null, undefined, symbol). e.g Array, Set, Object etc.\n\n- Reference types are compared(=== and ==) only by their address, no bit by bit comparison is performed.\n- All data-structures(except strings) are reference types. This is the reason [] and [] is false, they are actually two empty arrays stored at two locations.\n- Shallow copy is done for all reference type assignments.\n\n![](../../../../assets/1_How_variables_work-image-1-7ed442d7.png)\n![](../../../../assets/1_How_variables_work-image-2-7ed442d7.png)\n\n- Why is it so? - This makes code efficient, and comparing big types doesn't make sense.\n- All primitive types are passed by value, and all the others are passed by reference.\n",
      "html": "<h1 id=\"1.-how-variables-work\">1. How variables work <a class=\"heading-anchor-permalink\" href=\"#1.-how-variables-work\">#</a></h1>\n<p>Created Thursday 25 March 2021</p>\n<p>FIXME</p>\n<h4 id=\"reference-types\">Reference types <a class=\"heading-anchor-permalink\" href=\"#reference-types\">#</a></h4>\n<p>All the datatypes except the primitive ones(number, boolean, string, null, undefined, symbol). e.g Array, Set, Object etc.</p>\n<ul>\n<li>Reference types are compared(=== and ==) only by their address, no bit by bit comparison is performed.</li>\n<li>All data-structures(except strings) are reference types. This is the reason [] and [] is false, they are actually two empty arrays stored at two locations.</li>\n<li>Shallow copy is done for all reference type assignments.</li>\n</ul>\n<p><img src=\"../../../../assets/1_How_variables_work-image-1-7ed442d7.png\" alt=\"\">\n<img src=\"../../../../assets/1_How_variables_work-image-2-7ed442d7.png\" alt=\"\"></p>\n<ul>\n<li>Why is it so? - This makes code efficient, and comparing big types doesn’t make sense.</li>\n<li>All primitive types are passed by value, and all the others are passed by reference.</li>\n</ul>\n",
      "id": 139
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/6_Advanced_Objects/2_Scope_context.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/6_Advanced_Objects/2_Scope_context.html",
      "content": "# 2. Scope context\nCreated Thursday 25 March 2021\n\n**Context** - The parent object, or answer to the question'What parent object environment are we in ?'\n\n* Accessed using the **this** keyword\n* When we run f(), it is equivalent to this.f(), i.e run w.r.t the parent object.\n* A simpler definition - What's on the left side of the dot. e.g alert('Hello') has window as it's context because it is equivalent to window.alert('hello');\n```js\nfunction f()\t// context of f is the same as LOC sibling to f\n{\n\tconst a = 10;\t// a does not affect the parent - 'this' talks about parent object.\n\treturn this;\n}\nconsole.log(this===f()); // -> true for a webpage, this and f() reference the document\n```\n\n\n* How to change context - we need to be inside another object.\n\t![](../../../../assets/2_Scope_context-image-1-7ed442d7.png)\nNote that lambda function doesn't acknowledge a change in parent object but a function does.\n\nFIXME: <https://youtu.be/zE9iro4r918> ``this`` keyword, ``apply`` and ``bind``\n\n",
      "html": "<h1 id=\"2.-scope-context\">2. Scope context <a class=\"heading-anchor-permalink\" href=\"#2.-scope-context\">#</a></h1>\n<p>Created Thursday 25 March 2021</p>\n<p><strong>Context</strong> - The parent object, or answer to the question’What parent object environment are we in ?’</p>\n<ul>\n<li>Accessed using the <strong>this</strong> keyword</li>\n<li>When we run f(), it is equivalent to this.f(), i.e run w.r.t the parent object.</li>\n<li>A simpler definition - What’s on the left side of the dot. e.g alert(‘Hello’) has window as it’s context because it is equivalent to window.alert(‘hello’);</li>\n</ul>\n<pre><code class=\"language-js\">function f()\t// context of f is the same as LOC sibling to f\n{\n\tconst a = 10;\t// a does not affect the parent - 'this' talks about parent object.\n\treturn this;\n}\nconsole.log(this===f()); // -&gt; true for a webpage, this and f() reference the document\n</code></pre>\n<ul>\n<li>How to change context - we need to be inside another object.\n<img src=\"../../../../assets/2_Scope_context-image-1-7ed442d7.png\" alt=\"\">\nNote that lambda function doesn’t acknowledge a change in parent object but a function does.</li>\n</ul>\n<p>FIXME: <a href=\"https://youtu.be/zE9iro4r918\">https://youtu.be/zE9iro4r918</a> <code>this</code> keyword, <code>apply</code> and <code>bind</code></p>\n",
      "id": 140
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/6_Advanced_Objects/3_Classes_and_objects.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/6_Advanced_Objects/3_Classes_and_objects.html",
      "content": "# 3. Classes and objects\nCreated Thursday 25 March 2021\n\n\n* Instantiation - Making an object from a class.\n* Syntax - defining a class:\n\t```js\n\tclass A{\n\t\tconstructor(name) // constructor is a keyword\n\t\t{\n\t\t\tthis.name = name;\n\t\t}\n\t\tintro()\n\t\t{\n\t\t\tconsole.log(`Hi, I'm ${this.name}.`);\n\t\t}\n\t\t// no need of destructor - auto gargabge collector\n\t};\n\t```\n* Syntax - instantiation\n\t```js\n\tSanjar = new A('Muhammad Sanjar Afaq');\n\tSanjar.intro();\t// -> Hi, I'm Muhammad Sanjar Afaq\n\t```\n\nFIXME: static functions\nFIXME: inheritance\n\n",
      "html": "<h1 id=\"3.-classes-and-objects\">3. Classes and objects <a class=\"heading-anchor-permalink\" href=\"#3.-classes-and-objects\">#</a></h1>\n<p>Created Thursday 25 March 2021</p>\n<ul>\n<li>Instantiation - Making an object from a class.</li>\n<li>Syntax - defining a class:<pre><code class=\"language-js\">class A{\n\tconstructor(name) // constructor is a keyword\n\t{\n\t\tthis.name = name;\n\t}\n\tintro()\n\t{\n\t\tconsole.log(`Hi, I'm ${this.name}.`);\n\t}\n\t// no need of destructor - auto gargabge collector\n};\n</code></pre>\n</li>\n<li>Syntax - instantiation<pre><code class=\"language-js\">Sanjar = new A('Muhammad Sanjar Afaq');\nSanjar.intro();\t// -&gt; Hi, I'm Muhammad Sanjar Afaq\n</code></pre>\n</li>\n</ul>\n<p>FIXME: static functions\nFIXME: inheritance</p>\n",
      "id": 141
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/6_Advanced_Objects/4_Inheritance.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/6_Advanced_Objects/4_Inheritance.html",
      "content": "# 4. Inheritance\nCreated Thursday 25 March 2021\n\n4. **Inheritance** - Simple.\n   - Suppose we are making a MOBA. Our players can be a Wizard, Healer, etc.\n   - How to handle object creation, and then allot them their type.\n\n_Approach_ - Make a Player class, having a function with a switch(type_input) which creates the required object, and also adds Player properties to it.\n\n- This approach is good, but it has many practical and theoretic problems, which are solved using inheritance:\n  1.  We have two classes, Player and Wizard(which contains everything from Player. This is **hampering extensibility** - what if we had a Wizard which was female, we'd have to work on Player, Wizard and the new female class. The code would be very **clumsy**. Code reuse is easy.\n  2.  It makes code **maintainable **- Changing the superclass, will reflect the change in all the subclasses, if such a change is ever required.\n- All this is implemented and the simplified approach is called inheritance. It can be tricky, but is way better than the manual way.\n- Syntax: Use **extends** keyword.\n\n![](../../../../assets/4_Inheritance-image-1-7ed442d7.png)\nNote:\n\n- Classes are nothing but syntactic sugar introduced from ES6 2015\n- All OOPS syntax is a subset of Java syntax.\n- No access modifiers exist in Javascript\n",
      "html": "<h1 id=\"4.-inheritance\">4. Inheritance <a class=\"heading-anchor-permalink\" href=\"#4.-inheritance\">#</a></h1>\n<p>Created Thursday 25 March 2021</p>\n<ol start=\"4\">\n<li><strong>Inheritance</strong> - Simple.\n<ul>\n<li>Suppose we are making a MOBA. Our players can be a Wizard, Healer, etc.</li>\n<li>How to handle object creation, and then allot them their type.</li>\n</ul>\n</li>\n</ol>\n<p><em>Approach</em> - Make a Player class, having a function with a switch(type_input) which creates the required object, and also adds Player properties to it.</p>\n<ul>\n<li>This approach is good, but it has many practical and theoretic problems, which are solved using inheritance:\n<ol>\n<li>We have two classes, Player and Wizard(which contains everything from Player. This is <strong>hampering extensibility</strong> - what if we had a Wizard which was female, we’d have to work on Player, Wizard and the new female class. The code would be very <strong>clumsy</strong>. Code reuse is easy.</li>\n<li>It makes code **maintainable **- Changing the superclass, will reflect the change in all the subclasses, if such a change is ever required.</li>\n</ol>\n</li>\n<li>All this is implemented and the simplified approach is called inheritance. It can be tricky, but is way better than the manual way.</li>\n<li>Syntax: Use <strong>extends</strong> keyword.</li>\n</ul>\n<p><img src=\"../../../../assets/4_Inheritance-image-1-7ed442d7.png\" alt=\"\">\nNote:</p>\n<ul>\n<li>Classes are nothing but syntactic sugar introduced from ES6 2015</li>\n<li>All OOPS syntax is a subset of Java syntax.</li>\n<li>No access modifiers exist in Javascript</li>\n</ul>\n",
      "id": 142
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/7_ES7.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/7_ES7.html",
      "content": "# 7. ES7\nCreated Friday 17 July 2020\n\nOnly two significant changes:\n1. arr.`includes`(key_value) - returns a Boolean for array membership. `in` is much weaker.\n2. Exponentiation using `**`\n",
      "html": "<h1 id=\"7.-es7\">7. ES7 <a class=\"heading-anchor-permalink\" href=\"#7.-es7\">#</a></h1>\n<p>Created Friday 17 July 2020</p>\n<p>Only two significant changes:</p>\n<ol>\n<li>arr.<code>includes</code>(key_value) - returns a Boolean for array membership. <code>in</code> is much weaker.</li>\n<li>Exponentiation using <code>**</code></li>\n</ol>\n",
      "id": 143
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/8_ES8.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/8_ES8.html",
      "content": "# 8. ES8\nCreated Friday 17 July 2020\n\nImportant changes in 2017:\n1. String functions for adding spaces to the end(s).\n   - `myString.padStart(targetLength, fillUnit)`\n   - `myString.padStart(20, '*')` Output: `******8273`\n   - `myString.padEnd(20, 'x');`   Output: `Angry Birdsxxxxxxxxx`\n2. Trailing comma is ignored - in iterables, objects, functions(call and definition). But avoided repeated commas in arrays, otherwise *empty elements will be created*.\n3. Object iteration key, value or both:\n   - `Object.keys(student)` - existing feature.\n   - `Object.values(student)` - returns an array of values.\n   - `Object.entries(student)` - returns an array of key value pairs(as arrays of size 2).\n\tNote: `Object` class is used here.\n4. Async Await - FIXME\n\nNote:\n- `\"my String\".trim()` trims the whitespace at the ends.",
      "html": "<h1 id=\"8.-es8\">8. ES8 <a class=\"heading-anchor-permalink\" href=\"#8.-es8\">#</a></h1>\n<p>Created Friday 17 July 2020</p>\n<p>Important changes in 2017:</p>\n<ol>\n<li>String functions for adding spaces to the end(s).\n<ul>\n<li><code>myString.padStart(targetLength, fillUnit)</code></li>\n<li><code>myString.padStart(20, '*')</code> Output: <code>******8273</code></li>\n<li><code>myString.padEnd(20, 'x');</code>   Output: <code>Angry Birdsxxxxxxxxx</code></li>\n</ul>\n</li>\n<li>Trailing comma is ignored - in iterables, objects, functions(call and definition). But avoided repeated commas in arrays, otherwise <em>empty elements will be created</em>.</li>\n<li>Object iteration key, value or both:\n<ul>\n<li><code>Object.keys(student)</code> - existing feature.</li>\n<li><code>Object.values(student)</code> - returns an array of values.</li>\n<li><code>Object.entries(student)</code> - returns an array of key value pairs(as arrays of size 2).\nNote: <code>Object</code> class is used here.</li>\n</ul>\n</li>\n<li>Async Await - FIXME</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li><code>&quot;my String&quot;.trim()</code> trims the whitespace at the ends.</li>\n</ul>\n",
      "id": 144
    },
    {
      "path": "vault/3_JavaScript/3_Advanced_JS/9_Debugging.md",
      "url": "vault/3_JavaScript/3_Advanced_JS/9_Debugging.html",
      "content": "# 9. Debugging\nCreated Saturday 18 July 2020\n\nDebugging - Figuring out why the program isn't working as intended.\n\n- Rename things according to you.\n- Use console.log() to check behavior.\n- Use the keyword **debugger** to stop the program and open the chrome debugger.\n",
      "html": "<h1 id=\"9.-debugging\">9. Debugging <a class=\"heading-anchor-permalink\" href=\"#9.-debugging\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<p>Debugging - Figuring out why the program isn’t working as intended.</p>\n<ul>\n<li>Rename things according to you.</li>\n<li>Use console.log() to check behavior.</li>\n<li>Use the keyword <strong>debugger</strong> to stop the program and open the chrome debugger.</li>\n</ul>\n",
      "id": 145
    },
    {
      "path": "vault/3_JavaScript/4_Extra_JS/1_Intl_API.md",
      "url": "vault/3_JavaScript/4_Extra_JS/1_Intl_API.html",
      "content": "# 1. Intl API\nCreated Tue Dec 26, 2023 at 12:13 AM\n\nA JS feature that helps generate human friendly strings.\nIt has parts to work with multiplicity, dates, numbers, time, currency and more.\nVery useful and enhances productivity.\n\nProjects usually create their own wrappers (common functions) that use the Intl API to output strings according to the app's design. This saves effort since developers don't need to know intricacies of the Intl API. One off usage is fine if the text is a display exception.\n\n## Starter examples:\n```js\nconst fruits = ['Apple', 'Banana', 'Orange'];\nconst formatter = new Intl.ListFormat('en', { style: 'long', type: 'conjunction' });\n\n// `, and` is added\nconsole.log(formatter.format(fruits)); // \"Apple, Banana, and Orange\"\n```\n```js\nconst number = 123456.789;\nconst formatter = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' });\nconsole.log(formatter.format(number)); // \"$123,456.79\"\n```\n\n```js\nconst date = new Date();\nconst formatter = new Intl.DateTimeFormat('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });\nconsole.log(formatter.format(date)); // \"Tuesday, January 24, 2023\"\n```\n\n```js\nconst formatter = new Intl.RelativeTimeFormat('en', { numeric: 'auto' });\nconsole.log(formatter.format(-3, 'day')); // \"3 days ago\"\n```\n## Syntax\nThere are 4 things:\n1. Formatter - created once using the contextual constructor. Example: `ListFormat`, `DateTimeFormat`. The formatter exposes a `.format()` method that we're interested in.\n2. Locale - the language/region. Example: `en-US`, `en-IN`\n3. Options - configuration. varies according to the chosen sub API. Usually enums.\n4. Argument - a string, array, date. The raw thing.\n\n\n```js\nconst formatter = new Intl.ListFormat(); // constructor\nconst renderValue = formatter.format(rawValue); // method invocation\n```\n\n## Variations\n[Formatters list](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#static_properties)\n\nCommon ones are - [DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat), [Intl.ListFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) (for comma separation).\n\nDetails TBD",
      "html": "<h1 id=\"1.-intl-api\">1. Intl API <a class=\"heading-anchor-permalink\" href=\"#1.-intl-api\">#</a></h1>\n<p>Created Tue Dec 26, 2023 at 12:13 AM</p>\n<p>A JS feature that helps generate human friendly strings.\nIt has parts to work with multiplicity, dates, numbers, time, currency and more.\nVery useful and enhances productivity.</p>\n<p>Projects usually create their own wrappers (common functions) that use the Intl API to output strings according to the app’s design. This saves effort since developers don’t need to know intricacies of the Intl API. One off usage is fine if the text is a display exception.</p>\n<h2 id=\"starter-examples%3A\">Starter examples: <a class=\"heading-anchor-permalink\" href=\"#starter-examples%3A\">#</a></h2>\n<pre><code class=\"language-js\">const fruits = ['Apple', 'Banana', 'Orange'];\nconst formatter = new Intl.ListFormat('en', { style: 'long', type: 'conjunction' });\n\n// `, and` is added\nconsole.log(formatter.format(fruits)); // &quot;Apple, Banana, and Orange&quot;\n</code></pre>\n<pre><code class=\"language-js\">const number = 123456.789;\nconst formatter = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' });\nconsole.log(formatter.format(number)); // &quot;$123,456.79&quot;\n</code></pre>\n<pre><code class=\"language-js\">const date = new Date();\nconst formatter = new Intl.DateTimeFormat('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });\nconsole.log(formatter.format(date)); // &quot;Tuesday, January 24, 2023&quot;\n</code></pre>\n<pre><code class=\"language-js\">const formatter = new Intl.RelativeTimeFormat('en', { numeric: 'auto' });\nconsole.log(formatter.format(-3, 'day')); // &quot;3 days ago&quot;\n</code></pre>\n<h2 id=\"syntax\">Syntax <a class=\"heading-anchor-permalink\" href=\"#syntax\">#</a></h2>\n<p>There are 4 things:</p>\n<ol>\n<li>Formatter - created once using the contextual constructor. Example: <code>ListFormat</code>, <code>DateTimeFormat</code>. The formatter exposes a <code>.format()</code> method that we’re interested in.</li>\n<li>Locale - the language/region. Example: <code>en-US</code>, <code>en-IN</code></li>\n<li>Options - configuration. varies according to the chosen sub API. Usually enums.</li>\n<li>Argument - a string, array, date. The raw thing.</li>\n</ol>\n<pre><code class=\"language-js\">const formatter = new Intl.ListFormat(); // constructor\nconst renderValue = formatter.format(rawValue); // method invocation\n</code></pre>\n<h2 id=\"variations\">Variations <a class=\"heading-anchor-permalink\" href=\"#variations\">#</a></h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#static_properties\">Formatters list</a></p>\n<p>Common ones are - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\">DateTimeFormat</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\">Intl.ListFormat</a> (for comma separation).</p>\n<p>Details TBD</p>\n",
      "id": 146
    },
    {
      "path": "vault/4_Website_Design/1_Accessibility.md",
      "url": "vault/4_Website_Design/1_Accessibility.html",
      "content": "# 1. Accessibility\nCreated Tuesday 01 September 2020\n\n- Headings should be used in order 1 to 6\n- Use only one h1 per page\n- Have either an alt or a figcaption\n- one main per page\n\n### Hiding the element\n- Hide an element using overflow=hidden(This is read by screen readers only)\n- visibility:none or display:none or (width:0px and height:0px) and hide the element [completely](https://www.freecodecamp.org/learn/responsive-web-design/applied-accessibility/make-elements-only-visible-to-a-screen-reader-by-using-custom-css), for everyone.\n\n### Contrast for reading\n- WCAG [recommend](https://www.freecodecamp.org/learn/responsive-web-design/applied-accessibility/improve-readability-with-high-contrast-text)s at least 4.5:1 ration for normal text. Maximum value is 21:1 for black:white and 1:1 for no the same color.\n- Adjust the colors using hsl()\n- Avoid colors which are neighbours in the color wheel\n\n### Fast navigation\n- [accesskey](https://www.freecodecamp.org/learn/responsive-web-design/applied-accessibility/make-links-navigable-with-html-access-keys) attribute and set it to any string\n",
      "html": "<h1 id=\"1.-accessibility\">1. Accessibility <a class=\"heading-anchor-permalink\" href=\"#1.-accessibility\">#</a></h1>\n<p>Created Tuesday 01 September 2020</p>\n<ul>\n<li>Headings should be used in order 1 to 6</li>\n<li>Use only one h1 per page</li>\n<li>Have either an alt or a figcaption</li>\n<li>one main per page</li>\n</ul>\n<h3 id=\"hiding-the-element\">Hiding the element <a class=\"heading-anchor-permalink\" href=\"#hiding-the-element\">#</a></h3>\n<ul>\n<li>Hide an element using overflow=hidden(This is read by screen readers only)</li>\n<li>visibility:none or display:none or (width:0px and height:0px) and hide the element <a href=\"https://www.freecodecamp.org/learn/responsive-web-design/applied-accessibility/make-elements-only-visible-to-a-screen-reader-by-using-custom-css\">completely</a>, for everyone.</li>\n</ul>\n<h3 id=\"contrast-for-reading\">Contrast for reading <a class=\"heading-anchor-permalink\" href=\"#contrast-for-reading\">#</a></h3>\n<ul>\n<li>WCAG <a href=\"https://www.freecodecamp.org/learn/responsive-web-design/applied-accessibility/improve-readability-with-high-contrast-text\">recommend</a>s at least 4.5:1 ration for normal text. Maximum value is 21:1 for black:white and 1:1 for no the same color.</li>\n<li>Adjust the colors using hsl()</li>\n<li>Avoid colors which are neighbours in the color wheel</li>\n</ul>\n<h3 id=\"fast-navigation\">Fast navigation <a class=\"heading-anchor-permalink\" href=\"#fast-navigation\">#</a></h3>\n<ul>\n<li><a href=\"https://www.freecodecamp.org/learn/responsive-web-design/applied-accessibility/make-links-navigable-with-html-access-keys\">accesskey</a> attribute and set it to any string</li>\n</ul>\n",
      "id": 147
    },
    {
      "path": "vault/4_Website_Design/2_Folder_structure.md",
      "url": "vault/4_Website_Design/2_Folder_structure.html",
      "content": "# 2. Folder structure\nCreated Wednesday 10 March 2021\n\n#### Basic\nClassify resource as per type:\n1. index.html at root\n2. styles folder - CSS files\n3. scripts folder - JS files\n4. images - image files\n5. media - audio/video\n\n![](../../assets/2_Folder_structure-image-1-5eb0ebc6.png)\n\n",
      "html": "<h1 id=\"2.-folder-structure\">2. Folder structure <a class=\"heading-anchor-permalink\" href=\"#2.-folder-structure\">#</a></h1>\n<p>Created Wednesday 10 March 2021</p>\n<h4 id=\"basic\">Basic <a class=\"heading-anchor-permalink\" href=\"#basic\">#</a></h4>\n<p>Classify resource as per type:</p>\n<ol>\n<li>index.html at root</li>\n<li>styles folder - CSS files</li>\n<li>scripts folder - JS files</li>\n<li>images - image files</li>\n<li>media - audio/video</li>\n</ol>\n<p><img src=\"../../assets/2_Folder_structure-image-1-5eb0ebc6.png\" alt=\"\"></p>\n",
      "id": 148
    },
    {
      "path": "vault/notebook.md",
      "url": "vault/notebook.html",
      "content": "# Index of Web Development\n- [0. Basics of the Web](0_Basics_of_the_Web.md)\n  - [1. Browsing the web](1_Browsing_the_web.md)\n  - [2. Dev Tool](2_Dev_Tool.md)\n    - [DevTool advanced](1_DevTool_advanced.md)\n- [1. HTML](1_HTML.md)\n  - [1. What are tags](1_What_are_tags.md)\n  - [2. Commonly used tags](2_Commonly_used_tags.md)\n    - [1. Writing stuff](1_HTML/2_Common_tags/1_Writing_stuff.md)\n    - [2. Anchor tag](1_HTML/2_Common_tags/2_Anchor_tag.md)\n    - [3. Lists](1_HTML/2_Common_tags/3_Lists.md)\n    - [4. Multimedia tags](1_HTML/2_Common_tags/4_Multimedia_tags.md)\n    - [5. Table](1_HTML/2_Common_tags/5_Table.md)\n    - [6. Meta tags](1_HTML/2_Common_tags/6_Meta_tags.md)\n  - [3. Containers](3_Containers.md)\n  - [4. Forms](4_Forms.md)\n  - [5. Semantic tags - Page Sections](5_Semantic_tags_-_Page_Sections.md)\n- [2. CSS](2_CSS.md)\n  - [1. CSS Basics](1_CSS_Basics.md)\n    - [1. Types of CSS](1_Types_of_CSS.md)\n    - [2. CSS Selectors](2_CSS_Selectors.md)\n    - [3. Order and Inheritance in CSS](3_Order_and_Inheritance_in_CSS.md)\n    - [4. Critical Render Path](4_Critical_Render_Path.md)\n  - [2. Commonly used properties - IGN](2_Commonly_used_properties_-_IGN.md)\n    - [0. Miscellaneous](0_Miscellaneous.md)\n    - [1. Data based](1_Data_based.md)\n      - [1. Size](1_Size.md)\n      - [2. Colors](2_Colors.md)\n      - [3. background-image](3_background-image.md)\n      - [4. Fonts](4_Fonts.md)\n      - [5. Text Formatting](5_Text_Formatting.md)\n      - [6. Icons](6_Icons.md)\n      - [7. Links](7_Links.md)\n    - [4. List styles](4_List_styles.md)\n    - [5. CSS tables](5_CSS_tables.md)\n    - [6. CSS extras - IGN](6_CSS_extras_-_IGN.md)\n      - [1. Media queries](1_Media_queries.md)\n      - [2. auto keyword](2_auto_keyword.md)\n      - [3. Avoid pixelation](3_Avoid_pixelation.md)\n      - [4. Viewport sizes](4_Viewport_sizes.md)\n      - [5. CSS variables](5_CSS_variables.md)\n      - [6. CSS calc function](6_CSS_calc_function.md)\n  - [3. Box Model](3_Box_Model.md)\n    - [1. Box model](1_Box_model.md)\n    - [2. margin and padding](2_margin_and_padding.md)\n    - [3. border](3_border.md)\n    - [4. height and width](4_height_and_width.md)\n    - [5. outline](5_outline.md)\n    - [6. display and visibility](6_display_and_visibility.md)\n  - [4. Layouts - flex, grid](4_Layouts_-_flex,_grid.md)\n    - [1. Flexbox](1._Flexbox.md)\n      - [1. flex property](1._flex_property.md)\n      - [2. Container controls](2._Container_controls.md)\n        - [1. main axis](vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/2._Container_controls/1._main_axis.md)\n        - [2. cross axis](vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/2._Container_controls/2._cross_axis.md)\n        - [3. Wrapping](vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/2._Container_controls/3._Wrapping.md)\n      - [Flex-item controls](Flex-item_controls.md)\n        - [1. flex-shrink](vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/Flex-item_controls/1._flex-shrink.md)\n        - [2. flex-grow](vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/Flex-item_controls/2._flex-grow.md)\n        - [3. flex-basis](vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/Flex-item_controls/3._flex-basis.md)\n        - [4. order](vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/Flex-item_controls/4._order.md)\n        - [5. align self](vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/Flex-item_controls/5._align_self.md)\n        - [6. All in one flex property](vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/Flex-item_controls/6._All_in_one_flex_property.md)\n    - [1. Flexbox - 1D](1_Flexbox_-_1D.md)\n      - [0. flex syntax](0_flex_syntax.md)\n      - [1. Container](vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/1_Container.md)\n        - [1. main axis](1_main_axis.md)\n        - [2. cross axis](2_cross_axis.md)\n        - [3. Wrapping](3_Wrapping.md)\n      - [2. Items](vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items.md)\n        - [1. flex-shrink](1_flex-shrink.md)\n        - [2. flex-grow](2_flex-grow.md)\n        - [3. flex-basis](3_flex-basis.md)\n        - [4. order](4_order.md)\n        - [5. align self](5_align_self.md)\n        - [6. All in one flex property](6_All_in_one_flex_property.md)\n    - [2. Grid - 2D](2_Grid_-_2D.md)\n      - [1. Container](vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/1_Container.md)\n        - [1. grid-template](1_grid-template.md)\n          - [1. CSS functions](1_CSS_functions.md)\n        - [2. units](2_units.md)\n        - [3. row and column gap](3_row_and_column_gap.md)\n        - [4. Justifying and aligning items](4_Justifying_and_aligning_items.md)\n        - [5. Naming items](5_Naming_items.md)\n      - [2. Items](vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/2_Items.md)\n        - [1. Space occupied](1_Space_occupied.md)\n        - [2. grid item position](2_grid_item_position.md)\n      - [3. Flex vs Grid](3_Flex_vs_Grid.md)\n    - [3. Floats](3_Floats.md)\n  - [5. Positioning](5_Positioning.md)\n  - [6. Transition and Animations](6_Transition_and_Animations.md)\n- [3. JavaScript](3_JavaScript.md)\n  - [1. JS Basics](1_JS_Basics.md)\n    - [1. JS Setup](1_JS_Setup.md)\n    - [2. What is JavaScript](2_What_is_JavaScript.md)\n    - [3. Basic JavaScript](3_Basic_JavaScript.md)\n    - [4. Using JS](4_Using_JS.md)\n    - [5. Basic Data Structures](5_Basic_Data_Structures.md)\n    - [6. Building Facebook](6_Building_Facebook.md)\n  - [2. DOM Manipulation](2_DOM_Manipulation.md)\n    - [1. DOM and JS Engine](1_DOM_and_JS_Engine.md)\n    - [2. DOM Selectors](2_DOM_Selectors.md)\n    - [3. DOM events](3_DOM_events.md)\n    - [4. Creating new HTML elements](4_Creating_new_HTML_elements.md)\n    - [5. Background color picker](5_Background_color_picker.md)\n    - [6. jQuery - trivia](6_jQuery_-_trivia.md)\n    - [7. Developer Fundamental 5](7_Developer_Fundamental_5.md)\n  - [3. Advanced JS](3_Advanced_JS.md)\n    - [1. Scope](1_Scope.md)\n    - [2. ES5 and ES6](2_ES5_and_ES6.md)\n      - [A. Necessities](A_Necessities.md)\n        - [this and arrow functions](this_and_arrow_functions.md)\n      - [B. Shorthands and object features](B_Shorthands_and_object_features.md)\n      - [C. JS exclusive features](C_JS_exclusive_features.md)\n    - [3. Advanced Loops](3_Advanced_Loops.md)\n    - [4. Advanced Arrays](4._Advanced_Arrays.md)\n      - [1. spread and rest operators](1_spread_and_rest_operators.md)\n      - [2. Map, filter and reduce](2_Map,_filter_and_reduce.md)\n      - [3. some and every](3_some_and_every.md)\n    - [5. Advanced Functions](5._Advanced_Functions.md)\n      - [1. Pure functions](1_Pure_functions.md)\n      - [2. Closures](2_Closures.md)\n      - [3. Currying](3_Currying.md)\n      - [4. Function composition](4_Function_composition.md)\n    - [6. Advanced Objects](6._Advanced_Objects.md)\n      - [1. How variables work](1_How_variables_work.md)\n      - [2. Scope context](2_Scope_context.md)\n      - [3. Classes and objects](3_Classes_and_objects.md)\n      - [4. Inheritance](4_Inheritance.md)\n    - [7. ES7](7_ES7.md)\n    - [8. ES8](8_ES8.md)\n    - [9. Debugging](9_Debugging.md)\n    - [10. How Does JS works](10_How_Does_JS_works.md)\n    - [11. Modules in JS](11_Modules_in_JS.md)\n    - [12. Asynchronous JavaScript](12_Asynchronous_JavaScript.md)\n      - [1. Callbacks](1_Callbacks.md)\n      - [2. Promises](2_Promises.md)\n      - [3. Async await syntax sugar](3_Async_await_syntax_sugar.md)\n- [4. Website Design](4_Website_Design.md)\n  - [1. Accessibility](1_Accessibility.md)\n  - [2. Folder structure](2_Folder_structure.md)\n- [Home](./Home.md)\n  - [1. Motivation](1_Motivation.md)\n  - [2. Our job as problem solvers](2._Our_job_as_problem_solvers.md)\n  - [3. Applying to jobs](3._Applying_to_jobs.md)\n  - [4. Roadmap](2_Roadmap.md)\n  - [3_Resources](3_Resources.md)\n  - [Transition](Transition.md)\n    - [1. JavaScript.info course](1._JavaScript.info_course.md)\n      - [1. An Introduction](1._An_Introduction.md)\n      - [2. JS fundamentals](2._JS_fundamentals.md)\n",
      "html": "<h1 id=\"index-of-web-development\">Index of Web Development <a class=\"heading-anchor-permalink\" href=\"#index-of-web-development\">#</a></h1>\n<ul>\n<li><a href=\"0_Basics_of_the_Web.html\">0. Basics of the Web</a>\n<ul>\n<li><a href=\"1_Browsing_the_web.html\">1. Browsing the web</a></li>\n<li><a href=\"2_Dev_Tool.html\">2. Dev Tool</a>\n<ul>\n<li><a href=\"1_DevTool_advanced.html\">DevTool advanced</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"1_HTML.html\">1. HTML</a>\n<ul>\n<li><a href=\"1_What_are_tags.html\">1. What are tags</a></li>\n<li><a href=\"2_Commonly_used_tags.html\">2. Commonly used tags</a>\n<ul>\n<li><a href=\"1_HTML/2_Common_tags/1_Writing_stuff.html\">1. Writing stuff</a></li>\n<li><a href=\"1_HTML/2_Common_tags/2_Anchor_tag.html\">2. Anchor tag</a></li>\n<li><a href=\"1_HTML/2_Common_tags/3_Lists.html\">3. Lists</a></li>\n<li><a href=\"1_HTML/2_Common_tags/4_Multimedia_tags.html\">4. Multimedia tags</a></li>\n<li><a href=\"1_HTML/2_Common_tags/5_Table.html\">5. Table</a></li>\n<li><a href=\"1_HTML/2_Common_tags/6_Meta_tags.html\">6. Meta tags</a></li>\n</ul>\n</li>\n<li><a href=\"3_Containers.html\">3. Containers</a></li>\n<li><a href=\"4_Forms.html\">4. Forms</a></li>\n<li><a href=\"5_Semantic_tags_-_Page_Sections.html\">5. Semantic tags - Page Sections</a></li>\n</ul>\n</li>\n<li><a href=\"2_CSS.html\">2. CSS</a>\n<ul>\n<li><a href=\"1_CSS_Basics.html\">1. CSS Basics</a>\n<ul>\n<li><a href=\"1_Types_of_CSS.html\">1. Types of CSS</a></li>\n<li><a href=\"2_CSS_Selectors.html\">2. CSS Selectors</a></li>\n<li><a href=\"3_Order_and_Inheritance_in_CSS.html\">3. Order and Inheritance in CSS</a></li>\n<li><a href=\"4_Critical_Render_Path.html\">4. Critical Render Path</a></li>\n</ul>\n</li>\n<li><a href=\"2_Commonly_used_properties_-_IGN.html\">2. Commonly used properties - IGN</a>\n<ul>\n<li><a href=\"0_Miscellaneous.html\">0. Miscellaneous</a></li>\n<li><a href=\"1_Data_based.html\">1. Data based</a>\n<ul>\n<li><a href=\"1_Size.html\">1. Size</a></li>\n<li><a href=\"2_Colors.html\">2. Colors</a></li>\n<li><a href=\"3_background-image.html\">3. background-image</a></li>\n<li><a href=\"4_Fonts.html\">4. Fonts</a></li>\n<li><a href=\"5_Text_Formatting.html\">5. Text Formatting</a></li>\n<li><a href=\"6_Icons.html\">6. Icons</a></li>\n<li><a href=\"7_Links.html\">7. Links</a></li>\n</ul>\n</li>\n<li><a href=\"4_List_styles.html\">4. List styles</a></li>\n<li><a href=\"5_CSS_tables.html\">5. CSS tables</a></li>\n<li><a href=\"6_CSS_extras_-_IGN.html\">6. CSS extras - IGN</a>\n<ul>\n<li><a href=\"1_Media_queries.html\">1. Media queries</a></li>\n<li><a href=\"2_auto_keyword.html\">2. auto keyword</a></li>\n<li><a href=\"3_Avoid_pixelation.html\">3. Avoid pixelation</a></li>\n<li><a href=\"4_Viewport_sizes.html\">4. Viewport sizes</a></li>\n<li><a href=\"5_CSS_variables.html\">5. CSS variables</a></li>\n<li><a href=\"6_CSS_calc_function.html\">6. CSS calc function</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"3_Box_Model.html\">3. Box Model</a>\n<ul>\n<li><a href=\"1_Box_model.html\">1. Box model</a></li>\n<li><a href=\"2_margin_and_padding.html\">2. margin and padding</a></li>\n<li><a href=\"3_border.html\">3. border</a></li>\n<li><a href=\"4_height_and_width.html\">4. height and width</a></li>\n<li><a href=\"5_outline.html\">5. outline</a></li>\n<li><a href=\"6_display_and_visibility.html\">6. display and visibility</a></li>\n</ul>\n</li>\n<li><a href=\"4_Layouts_-_flex,_grid.html\">4. Layouts - flex, grid</a>\n<ul>\n<li><a href=\"1._Flexbox.html\">1. Flexbox</a>\n<ul>\n<li><a href=\"1._flex_property.html\">1. flex property</a></li>\n<li><a href=\"2._Container_controls.html\">2. Container controls</a>\n<ul>\n<li><a href=\"vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/2._Container_controls/1._main_axis.html\">1. main axis</a></li>\n<li><a href=\"vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/2._Container_controls/2._cross_axis.html\">2. cross axis</a></li>\n<li><a href=\"vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/2._Container_controls/3._Wrapping.html\">3. Wrapping</a></li>\n</ul>\n</li>\n<li><a href=\"Flex-item_controls.html\">Flex-item controls</a>\n<ul>\n<li><a href=\"vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/Flex-item_controls/1._flex-shrink.html\">1. flex-shrink</a></li>\n<li><a href=\"vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/Flex-item_controls/2._flex-grow.html\">2. flex-grow</a></li>\n<li><a href=\"vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/Flex-item_controls/3._flex-basis.html\">3. flex-basis</a></li>\n<li><a href=\"vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/Flex-item_controls/4._order.html\">4. order</a></li>\n<li><a href=\"vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/Flex-item_controls/5._align_self.html\">5. align self</a></li>\n<li><a href=\"vault/2._CSS/4._Layouts_-_flex,_grid/1._Flexbox/Flex-item_controls/6._All_in_one_flex_property.html\">6. All in one flex property</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"1_Flexbox_-_1D.html\">1. Flexbox - 1D</a>\n<ul>\n<li><a href=\"0_flex_syntax.html\">0. flex syntax</a></li>\n<li><a href=\"vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/1_Container.html\">1. Container</a>\n<ul>\n<li><a href=\"1_main_axis.html\">1. main axis</a></li>\n<li><a href=\"2_cross_axis.html\">2. cross axis</a></li>\n<li><a href=\"3_Wrapping.html\">3. Wrapping</a></li>\n</ul>\n</li>\n<li><a href=\"vault/2_CSS/4_Layouts_-_flex,_grid/1_Flexbox_-_1D/2_Items.html\">2. Items</a>\n<ul>\n<li><a href=\"1_flex-shrink.html\">1. flex-shrink</a></li>\n<li><a href=\"2_flex-grow.html\">2. flex-grow</a></li>\n<li><a href=\"3_flex-basis.html\">3. flex-basis</a></li>\n<li><a href=\"4_order.html\">4. order</a></li>\n<li><a href=\"5_align_self.html\">5. align self</a></li>\n<li><a href=\"6_All_in_one_flex_property.html\">6. All in one flex property</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"2_Grid_-_2D.html\">2. Grid - 2D</a>\n<ul>\n<li><a href=\"vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/1_Container.html\">1. Container</a>\n<ul>\n<li><a href=\"1_grid-template.html\">1. grid-template</a>\n<ul>\n<li><a href=\"1_CSS_functions.html\">1. CSS functions</a></li>\n</ul>\n</li>\n<li><a href=\"2_units.html\">2. units</a></li>\n<li><a href=\"3_row_and_column_gap.html\">3. row and column gap</a></li>\n<li><a href=\"4_Justifying_and_aligning_items.html\">4. Justifying and aligning items</a></li>\n<li><a href=\"5_Naming_items.html\">5. Naming items</a></li>\n</ul>\n</li>\n<li><a href=\"vault/2_CSS/4_Layouts_-_flex,_grid/2_Grid_-_2D/2_Items.html\">2. Items</a>\n<ul>\n<li><a href=\"1_Space_occupied.html\">1. Space occupied</a></li>\n<li><a href=\"2_grid_item_position.html\">2. grid item position</a></li>\n</ul>\n</li>\n<li><a href=\"3_Flex_vs_Grid.html\">3. Flex vs Grid</a></li>\n</ul>\n</li>\n<li><a href=\"3_Floats.html\">3. Floats</a></li>\n</ul>\n</li>\n<li><a href=\"5_Positioning.html\">5. Positioning</a></li>\n<li><a href=\"6_Transition_and_Animations.html\">6. Transition and Animations</a></li>\n</ul>\n</li>\n<li><a href=\"3_JavaScript.html\">3. JavaScript</a>\n<ul>\n<li><a href=\"1_JS_Basics.html\">1. JS Basics</a>\n<ul>\n<li><a href=\"1_JS_Setup.html\">1. JS Setup</a></li>\n<li><a href=\"2_What_is_JavaScript.html\">2. What is JavaScript</a></li>\n<li><a href=\"3_Basic_JavaScript.html\">3. Basic JavaScript</a></li>\n<li><a href=\"4_Using_JS.html\">4. Using JS</a></li>\n<li><a href=\"5_Basic_Data_Structures.html\">5. Basic Data Structures</a></li>\n<li><a href=\"6_Building_Facebook.html\">6. Building Facebook</a></li>\n</ul>\n</li>\n<li><a href=\"2_DOM_Manipulation.html\">2. DOM Manipulation</a>\n<ul>\n<li><a href=\"1_DOM_and_JS_Engine.html\">1. DOM and JS Engine</a></li>\n<li><a href=\"2_DOM_Selectors.html\">2. DOM Selectors</a></li>\n<li><a href=\"3_DOM_events.html\">3. DOM events</a></li>\n<li><a href=\"4_Creating_new_HTML_elements.html\">4. Creating new HTML elements</a></li>\n<li><a href=\"5_Background_color_picker.html\">5. Background color picker</a></li>\n<li><a href=\"6_jQuery_-_trivia.html\">6. jQuery - trivia</a></li>\n<li><a href=\"7_Developer_Fundamental_5.html\">7. Developer Fundamental 5</a></li>\n</ul>\n</li>\n<li><a href=\"3_Advanced_JS.html\">3. Advanced JS</a>\n<ul>\n<li><a href=\"1_Scope.html\">1. Scope</a></li>\n<li><a href=\"2_ES5_and_ES6.html\">2. ES5 and ES6</a>\n<ul>\n<li><a href=\"A_Necessities.html\">A. Necessities</a>\n<ul>\n<li><a href=\"this_and_arrow_functions.html\">this and arrow functions</a></li>\n</ul>\n</li>\n<li><a href=\"B_Shorthands_and_object_features.html\">B. Shorthands and object features</a></li>\n<li><a href=\"C_JS_exclusive_features.html\">C. JS exclusive features</a></li>\n</ul>\n</li>\n<li><a href=\"3_Advanced_Loops.html\">3. Advanced Loops</a></li>\n<li><a href=\"4._Advanced_Arrays.html\">4. Advanced Arrays</a>\n<ul>\n<li><a href=\"1_spread_and_rest_operators.html\">1. spread and rest operators</a></li>\n<li><a href=\"2_Map,_filter_and_reduce.html\">2. Map, filter and reduce</a></li>\n<li><a href=\"3_some_and_every.html\">3. some and every</a></li>\n</ul>\n</li>\n<li><a href=\"5._Advanced_Functions.html\">5. Advanced Functions</a>\n<ul>\n<li><a href=\"1_Pure_functions.html\">1. Pure functions</a></li>\n<li><a href=\"2_Closures.html\">2. Closures</a></li>\n<li><a href=\"3_Currying.html\">3. Currying</a></li>\n<li><a href=\"4_Function_composition.html\">4. Function composition</a></li>\n</ul>\n</li>\n<li><a href=\"6._Advanced_Objects.html\">6. Advanced Objects</a>\n<ul>\n<li><a href=\"1_How_variables_work.html\">1. How variables work</a></li>\n<li><a href=\"2_Scope_context.html\">2. Scope context</a></li>\n<li><a href=\"3_Classes_and_objects.html\">3. Classes and objects</a></li>\n<li><a href=\"4_Inheritance.html\">4. Inheritance</a></li>\n</ul>\n</li>\n<li><a href=\"7_ES7.html\">7. ES7</a></li>\n<li><a href=\"8_ES8.html\">8. ES8</a></li>\n<li><a href=\"9_Debugging.html\">9. Debugging</a></li>\n<li><a href=\"10_How_Does_JS_works.html\">10. How Does JS works</a></li>\n<li><a href=\"11_Modules_in_JS.html\">11. Modules in JS</a></li>\n<li><a href=\"12_Asynchronous_JavaScript.html\">12. Asynchronous JavaScript</a>\n<ul>\n<li><a href=\"1_Callbacks.html\">1. Callbacks</a></li>\n<li><a href=\"2_Promises.html\">2. Promises</a></li>\n<li><a href=\"3_Async_await_syntax_sugar.html\">3. Async await syntax sugar</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"4_Website_Design.html\">4. Website Design</a>\n<ul>\n<li><a href=\"1_Accessibility.html\">1. Accessibility</a></li>\n<li><a href=\"2_Folder_structure.html\">2. Folder structure</a></li>\n</ul>\n</li>\n<li><a href=\"./Home.html\">Home</a>\n<ul>\n<li><a href=\"1_Motivation.html\">1. Motivation</a></li>\n<li><a href=\"2._Our_job_as_problem_solvers.html\">2. Our job as problem solvers</a></li>\n<li><a href=\"3._Applying_to_jobs.html\">3. Applying to jobs</a></li>\n<li><a href=\"2_Roadmap.html\">4. Roadmap</a></li>\n<li><a href=\"3_Resources.html\">3_Resources</a></li>\n<li><a href=\"Transition.html\">Transition</a>\n<ul>\n<li><a href=\"1._JavaScript.info_course.html\">1. JavaScript.info course</a>\n<ul>\n<li><a href=\"1._An_Introduction.html\">1. An Introduction</a></li>\n<li><a href=\"2._JS_fundamentals.html\">2. JS fundamentals</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
      "id": 149
    }
  ]
}