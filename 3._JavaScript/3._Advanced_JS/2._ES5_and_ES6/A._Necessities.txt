Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-03-25T07:46:57+05:30

====== A. Necessities ======
Created Thursday 25 March 2021

These were necessary features common in other programming languages:
1. let and const - solve hositing and scope problems.
2. arrow functions - solve context binding
3. Template literals - easy string builder, ability to add DSL.

=== 1. let and const ===
* Both were introduced in ES6.
* Purpose: Very basic feature. Makes JS sensible.
* Both follow the same scoping rules - LEGB.
* Neither can be redeclared, just like C++, Java.
* Use ''const'' if you want to restrict reassignment.
* Use of ''var'' is discouraged.

=== 2. Arrow functions ===
* //Looks// similar to lamdas(storable functions).
* Purpose: Function(state) Binding. Concise code.
* The de-facto standard for anonymous functions.
* Syntax(can be used in conjunction):
	* For single argument: ''p => {};''
	* For single expression as definition: ''(p1, p2) => 2*3;''. Returns expression value.
	* For multiliners: ''(p1, p2, p3) => { /* code*/ }''. Simple function function.
{{{code: lang="js" linenumbers="True"
const f = num => num*2;	// single argument, single expression
f() // call

// Multiline body - no return
const f = () => 
{
	console.log('Hello');
	console.log('World'); // returns undefined
}

//Multiline - with return
const f = (a, b) => {
	a*2 = b; 
	return a+b; 
}; // 

(()=>console.log(2))(); // Arrow function as IIFE
}}}

Note:	
* You do need a () for zero params.
* **Make it a habit to ditch **//function **keyword**//** for throwaway and/or one-liner(use const) functions.**
* Arrow functions automatically bind function to object. In contrast, //function// function requires explicit binding.

=== 3. Template Literals ===
* Extremely powerful tool.
* Purpose - DSL injection, concide code.
* Template string is a use case of this feature.
* General syntax: 
	* Enclose the whole string in backticks. 
	* Write literal part verbatim.
	* Use ''${ JS_code }'' to enclose the code parts.
	{{./pasted_image007.png}}
	{{./pasted_image008.png}}
* Supports multiline strings.
* Use:
	a. As template string
{{{code: lang="js" linenumbers="True"
let pname = 'Sanjar', emotion = 'Happy';
let message = `${ name } is ${emotion}.`;

console.log(`I am ${name}`); // prints -> I am Sanjar
}}}

	b. For carrying JS code.
{{{code: lang="js" linenumbers="True"
`${ console.log(2); }` // prints 2 on string evaluation

`${ (() => { console.log('Autodestruct sequence intiated'); })() } `	// pretty hacky and dangerous
}}}

	c. DSL injection(Domain Specific Language)
{{{code: lang="js" linenumbers="True"
p.innerHTML(`<h1> DSL injected </h1>`);
}}}
 
* How it works:
	* ''${}''(code) parts are executed normally.
	* Result, i.e. expression/return value of the code is placed as strings in the template literal.
	* The string is ready, to be printed or stored.
